<?xml version="1.0" encoding="UTF-8" standalone="yes"?><rules><rule><key>checkmarx_3115</key><name>Path_Traversal</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could define any arbitrary file path for the application to use, potentially leading to:&lt;/div&gt;
&lt;ol&gt;
&lt;ul&gt;
&lt;li&gt;Stealing sensitive files, such as configuration or system files&lt;/li&gt;
&lt;li&gt;Overwriting files such as program binaries, configuration files, or system files&lt;/li&gt;
&lt;li&gt;Deleting critical files, causing a denial of service (DoS).&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses user input in the file path for accessing files on the application server&amp;#8217;s local disk. This enables an attacker to arbitrarily determine the file path.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Ideally, avoid depending on user input for file selection.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Accept user input only for the filename, not for the path and folders.&lt;/li&gt;
&lt;li&gt;Ensure that file path is fully canonicalized.&lt;/li&gt;
&lt;li&gt;Explicitly limit the application to using a designated folder that separate from the applications binary folder.&lt;/li&gt;
&lt;li&gt;Restrict the privileges of the application&amp;#8217;s OS user to necessary files and folders. The application should not be able to write to the application binary folder, and should not read anything outside of the application folder and data folder.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Using unvalidated user input as the file name may enable the user to access arbitrary files on the server local disk&lt;/h4&gt;&lt;pre&gt;public class PathTraversal
{
        private void foo(TextBox textbox1)
        {
                string fileNum = textbox1.Text;
                string path = "c:\files\file" + fileNum;
                FileStream f = new FileStream(path, FileMode.Open);
                byte[] output = new byte[10];
                f.Read(output,0, 10);
        }
}&lt;/pre&gt;&lt;h4&gt;
Potentially hazardous characters are removed from the user input before use
      &lt;/h4&gt;&lt;pre&gt;public class PathTraversalFixed
{
        private void foo(TextBox textbox1)
        {
                string fileNum = textbox1.Text.Replace("\", "").Replace("..", "");
                string path = "c:\files\file" + fileNum;
                FileStream f = new FileStream(path, FileMode.Open);
                byte[] output = new byte[10];
                f.Read(output,0, 10);
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Using unvalidated user input as the file name may enable the user to access arbitrary files on the server local disk&lt;/h4&gt;&lt;pre&gt;public class Absolute_Path_Traversal {
    public static void main(String[] args) {
        Scanner userInputScanner = new Scanner(System.in);
        System.out.print("\nEnter file name: ");
        String name = userInputScanner.nextLine();
        String path = "c:\files\file" + name;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(path));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/pre&gt;&lt;h4&gt;Potentially hazardous characters are removed from the user input before use&lt;/h4&gt;&lt;pre&gt;public class Absolute_Path_Traversal_Fixed {
    public static void main(String[] args) {
        Scanner userInputScanner = new Scanner(System.in);
        System.out.print("\nEnter file name: ");
        String name = userInputScanner.nextLine();
        name = name.replace("/", "").replace("..", "");
        String path = "c:\files\file" + name;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(path));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3580</key><name>XSRF</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could cause the victim to perform any action for which the victim is authorized, such as transferring funds from the victim&amp;#8217;s account to the attacker&amp;#8217;s. The action will be logged as being performed by the victim.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application performs some action that modifies database contents, based purely on HTTP request content, and does not require per-request renewed authentication (such as transaction authentication or a cryptographic form token), instead relying on browser or session authentication. This means that an attacker could use social engineering to cause a victim to click a link including a transaction request, and the application would trust the victim&amp;#8217;s browser and would perform the action. This type of attack is known as Cross-Site Request Forgery (XSRF or CSRF).&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Implement a standard or library anti-CSRF mechanism: preferably a built-in platform-provided mechanism or OWASP&amp;#8217;s CSRFGuard. Selective re-authentication or transaction authentication, such as with a cryptographic form token, is also acceptable.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
HttpRequest content is used in a database query without any validation of that content
      &lt;/h4&gt;&lt;pre&gt;

public class XSRF
{
        public void foo(SqliteConnection connection, HttpRequest Request)
        {
                string input = Request.QueryString["user"];
                string sql = "insert into Comments(comment) values (@user)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
            	cmd.Parameters.AddwithValue(@user, input);
            	connection.Open();
            	SqlDataReader reader = cmd.ExecuteReader();
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The HttpRequest content is validated using AntiXsrfTokenKey
      &lt;/h4&gt;&lt;pre&gt;

public class XSRFFixed
{
        public void foo(SqliteConnection connection, AntiXsrf AntiXsrfTokenKey, HttpRequest Request)
        {
                string input = AntiXsrfTokenKey.Validate(Request.QueryString["user"]);
                string sql = "insert into Comments(comment) values (@user)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
            	cmd.Parameters.AddwithValue(@user, input);
            	connection.Open();
            	SqlDataReader reader = cmd.ExecuteReader();
        }

}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_4425</key><name>SSRF</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker can abuse this flaw to make arbitrary requests, originating from the application server. This can be exploited to&amp;#160;scan internal services; proxy attacks into a protected network; bypass network controls; download unauthorized files; access internal services and management interfaces; and possibly control the contents of requests and even steal server credentials. &amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application accepts a URL (or other data) from the user, and uses this to make a request to another remote server.&lt;/div&gt;
&lt;div&gt;However, the attacker can inject an arbitrary URL into the request, causing the application to connect to any server the attacker wants. Thus, the attacker can abuse the application to gain access to services she would not otherwise be able to access, and cause the request to ostensibly originate from the application server.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Do not connect to arbitrary services based on user input.&lt;/li&gt;
&lt;li&gt;If possible, the application should have the user's browser retrieve the desired information directly.&amp;#160;&lt;/li&gt;
&lt;li&gt;If it is necessary for the&amp;#160;application to proxy the request on the server, explicitly whitelist the allowed target URLs, and do not include any sensitive server information.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;Retrieve and Display Contents of URL&lt;/h4&gt;&lt;pre&gt;def do_GET(self):
    location = urllib.parse.urlparse(self.path)
    query = location.query
    
    url = urllib.parse.parse_qs(query)['url']
    
    response = urllib.request.urlopen(url)
    if response.status == 200:
        data = response.read()
        
        self.send_response(200)
        self.send_header('Content-Type', 'text/html')
        self.send_header('Content-Length', str(len(data)))
        self.end_headers()
        self.wfile.write(data)

    &lt;/pre&gt;&lt;h4&gt;Validate and Redirect User's Browser Instead&lt;/h4&gt;&lt;pre&gt;def do_GET(self):
    location = urllib.parse.urlparse(self.path)
    query = location.query
    
    url = urllib.parse.parse_qs(query)['url']
    
    if url.startswith('/') or url.startswith("https://" + location.netloc + "/"):
        self.send_response(302)
        self.send_header('Location', url)
        self.end_headers()
        &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3103</key><name>Reflected_XSS_All_Clients</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to cause a user to send the website engineered input, rewriting web pages and inserting malicious scripts. The attacker can then pretend to be the original website, which would enable the attacker to steal the user's password, request the user&amp;#8217;s credit card information, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website, and the victim would blame the site for incurred damage.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from previous user input. The user input is embedded directly in the page's HTML, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary user input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Fully encode all dynamic data before embedding it in output.&lt;/li&gt;
&lt;li&gt;Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;JavaScript encoding for server-generated JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or the built-in platform functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Bad - The application uses the "Referer" field string to construct the HttpResponse&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClients
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(Referer);
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "Referer" field string is HTML encoded before use&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClientsFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response, AntiXss.AntiXssEncoder encoder)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(encoder.HtmlEncode(Referer, true));
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - User input is written to a TextBox displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClients
{
        public void foo(TextBox tb)
        {
                string input = Console.ReadLine();
                tb.Text = input;
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The user input is HTML encoded before being displayed on the screen&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClientsFixed
{
        public void foo(TextBox tb, AntiXssEncoder encode)
        {
                string input = Console.ReadLine();
                tb.Text = encode.HtmlEncode(input);
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - The application uses the "filename" field string from an HttpRequest construct an HttpResponse&lt;/h4&gt;&lt;pre&gt;public class UTF7XSS
{
        public void foo(HttpRequest Request, HttpResponse Response
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["filename"];
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "filename" string is converted to an int and using a switch case the new "filename" string is constructed&lt;/h4&gt;&lt;pre&gt;public class UTF7XSSFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["fileNum"];
                int fileNum = Convert.ToInt32(filename);
                
                switch(fileNum)
                {
                        case 1:
                                filename = "File1.txt";
                                break;
                        default:
                                filename = "File2.txt";
                                break;
                }
                
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User input is written to a label displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClients {
	public static void XSSExample(TextArea name) {	
		Label label = new Label();		
		label.setText("Hello " + name.getText());	
	}
}&lt;/pre&gt;&lt;h4&gt;Switch case is used in order to assemble the label's text value and manage wrong user input&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClientsFixed {
	public static void XSSExample(TextArea name) {
		Label label = new Label();		
		switch (name) {
		case "Joan":
			label.setText("Hello Joan");	
			break;
		case "Jim":
			label.setText("Hello Jim");	
			break;
		case "James":
			label.setText("Hello James");	
			break;
		default:
			System.out.println("Wrong Input");
		}
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3099</key><name>Find_XSS_Sanitize</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3565</key><name>Insecure_Randomness</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Random values are often used as a mechanism to prevent malicious users from guessing a value, such as a password, encryption key, or session identifier. Depending on what&amp;#160;this random value is used for, an attacker would be able to predict&amp;#160;the next numbers generated, or previously generated values. This could enable the attacker to hijack another user's session, impersonate another user, or crack an encryption key (depending on what&amp;#160;the pseudo-random value was used for).&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses a weak method of generating pseudo-random values, such that other numbers could be determined from a relatively small sample size. Since the pseudo-random number generator used is designed for statistically uniform distribution of values, it is approximately deterministic. Thus, after collecting a few generated values (e.g. by creating a few individual sessions, and collecting the sessionids), it would be possible for an attacker to calculate another sessionid.&amp;#160;&lt;br /&gt;Specifically, if this&amp;#160;pseudo-random value is used in any security context, such as passwords, keys, or secret identifiers, an attacker would be able to predict&amp;#160;the next numbers generated, or previously generated values.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Whenever unpredicatable numbers are required in a security context, use a cryptographically strong random number generator, instead of a statistical pseudo-random generator.&amp;#160;&lt;/li&gt;
&lt;li&gt;Use the cryptorandom generator that is built-in to your language or platform, and ensure it is securely seeded. Do not seed the generator with a weak, non-random seed. (In most cases, the default is securely random).&amp;#160;&lt;/li&gt;
&lt;li&gt;Ensure you use a long enough random value, to make brute-force attacks unfeasible.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not use the statistical pseudo-random number generator, use the cryptorandom generator instead. In Java, this is the SecureRandom class.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Swift&lt;/h3&gt;&lt;h4&gt;Use of a weak pseudo-random number generator&lt;/h4&gt;&lt;pre&gt;let sessNum = rand();
let sessionId = String(format:"%ld", sessNum)&lt;/pre&gt;&lt;h4&gt;Cryptographically secure random number generator&lt;/h4&gt;&lt;pre&gt;var sessBytes: UInt32 = 0
withUnsafeMutablePointer(&amp;sessBytes, { (sessBytesPointer) -&gt; Void in
    let castedPointer = unsafeBitCast(sessBytesPointer, UnsafeMutablePointer&lt;UInt8&gt;.self)
    SecRandomCopyBytes(kSecRandomDefault, sizeof(UInt32), castedPointer)
})
    
let sessionId = String(format:"%llu", sessBytes)&lt;/pre&gt;&lt;h3&gt;Objc&lt;/h3&gt;&lt;h4&gt;Use of a weak pseudo-random number generator&lt;/h4&gt;&lt;pre&gt;long sessNum = rand();
NSString* sessionId = [NSString stringWithFormat:@"%ld", sessNum];&lt;/pre&gt;&lt;h4&gt;Cryptographically secure random number generator&lt;/h4&gt;&lt;pre&gt;UInt32 sessBytes;
SecRandomCopyBytes(kSecRandomDefault, sizeof(sessBytes), (uint8_t*)&amp;sessBytes);
    
NSString* sessionId = [NSString stringWithFormat:@"%llu", sessBytes];&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Use of a weak pseudo-random number generator&lt;/h4&gt;&lt;pre&gt;
Random random = new Random();

long sessNum = random.nextLong();

String sessionId = sessNum.toString();
&lt;/pre&gt;&lt;h4&gt;Cryptographically secure random number generator&lt;/h4&gt;&lt;pre&gt;
SecureRandom random = new SecureRandom();

byte sessBytes[] = new byte[32];

random.nextBytes(sessBytes);

String sessionId = new String(sessBytes);
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3977</key><name>Improper_Restriction_of_XXE_Ref</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An&amp;#160;application that will parse and replace DTD entity references, in an XML document that the user controls, can allow an attacker to craft an XML document to read arbitrary server files. This XML document could contain an XML entity reference, which refers to an embedded DTD entity definition that points to any local file. This would enable the attacker to retrieve any arbitrary system file on the server.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;An attacker could upload an XML document that contains a DTD declaration, in particular an entity defintion that refers to a local file on the server's disk, e.g. &lt;code&gt;&amp;lt;!ENTITY xxe SYSTEM "file:///c:/boot.ini"&amp;gt;&lt;/code&gt;. The attacker would then include an XML entity reference that refers back to that entity definition, e.g. &lt;code&gt;&amp;lt;div&amp;gt;&amp;amp;xxe;&amp;lt;/div&amp;gt;&lt;/code&gt; . If the parsed XML document is then returned to the user, the result will include the contents of the sensitive system file.&amp;#160;&lt;/div&gt;
&lt;div&gt;This is caused by the XML parser, which is configured to automatically parse DTD declarations and resolve entity references, instead of disabling both DTD and external references altogether.&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Avoid processing user input directly, where possible.&amp;#160;&lt;/li&gt;
&lt;li&gt;If necessary to receive XML from the user, ensure the XML parser is restricted and constrained.&amp;#160;&lt;/li&gt;
&lt;li&gt;In particular, disable DTD parsing and resolving of entities. Apply a strict XML schema on the server, and validate the input XML accordingly.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Use safe XML parsers, and disable DTD parsing and entity resolving.&amp;#160;&lt;/li&gt;
&lt;li&gt;Do not enable DTD parsing or entity resolving.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Vulnerable XML Parsing with XMLStreamReader&lt;/h4&gt;&lt;pre&gt;String parseXML(InputStream input) {
    StringBuilder content = new StringBuilder();
    
    XMLInputFactory factory = XMLInputFactory.newFactory(); 
    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, true);
    factory.setProperty(XMLInputFactory.SUPPORT_DTD, true); 
    
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    
    while(reader.hasNext())
    {
        if(reader.hasText()
        {
            content.append(reader.getText());
        }
        reader.next();
    }
    
    return content.toString();
}
&lt;/pre&gt;&lt;h4&gt;Disabling DTD Entities with XMLStreamReader&lt;/h4&gt;&lt;pre&gt;String parseXML(InputStream input) {
    StringBuilder content = new StringBuilder();
    
    XMLInputFactory factory = XMLInputFactory.newFactory(); 
    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false); 
    
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    
    while(reader.hasNext())
    {
        if(reader.hasText()
        {
            content.append(reader.getText());
        }
        reader.next();
    }
    
    return content.toString();
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3109</key><name>Information_Exposure_Through_an_Error_Message</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Exposed details about the application&amp;#8217;s environment, users, or associated data (for example, stack trace) could enable an attacker to find another flaw and help the attacker to mount an attack.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application generates an error message including raw exceptions, either by not being handled, by explicit returning of the object, or by configuration. Exception details may include sensitive information that could leak out of the exception to the users.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Any method that could cause an exception should be wrapped in a try-catch block that:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Explicitly handles expected exceptions.&lt;/li&gt;
&lt;li&gt;Includes a default solution to explicitly handle unexpected exceptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Configure a global handler to prevent unhandled errors from leaving the application.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Do not reveal exception details, instead always return a static message.

      &lt;/h4&gt;&lt;pre&gt;


try
{
// Database access or other potentially dangerous function
}
catch (SqlException ex)
{
LogException(ex);
Response.Write("Error occurred.");
}



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Do not reveal exception details, instead always return a static message.

      &lt;/h4&gt;&lt;pre&gt;


try
{
// Database access or other potentially dangerous function
}
catch (SqlException ex)
{
LogException(ex);
Response.Write("Error occurred.");
}


      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3571</key><name>Cookie_Poisoning</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;If an external, malicious 3rd party&amp;#160;can control another user's application cookies, this could be misused in a variety of ways. This includes tampering with application data, bypassing access control checks, violation of integrity constraints, or changing the user's preferences, such as the contents of a shopping cart.&lt;/div&gt;
&lt;div&gt;In addition, this flaw can&amp;#160;even lead to additional classes of&amp;#160;attacks, such as Session Fixation or Cross-Site Scripting (XSS) attacks.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application does not prevent malicious input from being inserted into the application cookies. An attacker could influence the victim's browser with malicious URL parameters, causing the script to load these malicious values into the user's cookie. This could be via phishing, stored links, external links, and more.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Do not set cookies based on user-controllable input, such as URL.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;h4&gt;URL-Based Cookie&lt;/h4&gt;&lt;pre&gt;function setCookie()
{
    var value = window.location.hash;
    document.cookie = "Action=" + value; 
}&lt;/pre&gt;&lt;h4&gt;Whitelisted Cookie Value&lt;/h4&gt;&lt;pre&gt;function setCookie()
{
    var value = window.location.hash;
    
    if (actionsArray[value] != undefined)
    {
        var date = new Date();
        date.setTime(date.getTime() + 1000*60*20);

        document.cookie = "ActionID=" + actionsArray[value] 
                        + "; expires=" + date.toUTCString()
                        + "; path=/myApp/" 
                        + "; secure;"
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3572</key><name>Header_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Hijack session, performing session fixation in which a cookie or other authenticated header is injected into the request.&lt;/li&gt;
&lt;li&gt;Cause web cache poisoning, via a Response Splitting attack or by tricking the cache server into unintentionally associating a URL with another URL&amp;#8217;s page (content), and caching this content for the URL.&lt;/li&gt;
&lt;li&gt;Bypass CSRF protection which relies on the referrer header.&lt;/li&gt;
&lt;li&gt;Bypass Firewall/IPS/IDS protection, via a Request smuggling attack, by sending a second, unnoticed request.&lt;/li&gt;
&lt;li&gt;Executing arbitrary Javascript code, via Cross-Site Scripting (XSS), by changing headers like Content-Type or overriding headers like x-xss-protection.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;p class="MsoNormal"&gt;HTTP header injection vulnerabilities occur when an HTTP request header is influenced by an input received from the client without being validated. This attack usually occurs by injecting CRLF (newline) characters (i.e. \r, \n, %0a, %0d) into a HTTP request header, breaking out of the headers into the message body and writing a second arbitrary request. Alternatively, it is possible to perform other attacks by influencing the request authentication headers, security header and bypass. This attack makes it possible to exploit other attacks, like Cache Poisoning, Session Hijacking, Cross-site Scripting (XSS) and the ability to bypass web application firewall protection.&lt;/p&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p class="MsoNormal"&gt;Perform URL encoding on all inputs before adding them to the request, such as CRLF characters, to avoid dealing with malicious data.&lt;/p&gt;
&lt;h5&gt;Secure Code Approach&lt;/h5&gt;
&lt;p class="MsoNormal"&gt;Validate all input, regardless of source on the server side. Validation should be based on a whitelist. Accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&amp;#160;&lt;/li&gt;
&lt;/ul&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;h4&gt;User input is being used in a HTTP request header, enabling an attacker to add a newline character and multiple headers:&lt;/h4&gt;&lt;pre&gt;var xmlhttp = new XmlHttpRequest();
xmlhttp.open("GET", url, true);
var username = location.search.split('user=')[1];
xmlhttp.setRequestHeader("x-user:", username);
xmlhttp.send();&lt;/pre&gt;&lt;h4&gt;The user input is examined to contain and newline character and the input is also URL encoded:&lt;/h4&gt;&lt;pre&gt;var xmlhttp = new XmlHttpRequest();
xmlhttp.open("GET", url, true);
var username = location.search.split('user=')[1];
var safeUsername = encodeURIComponent(username).replace(/[\n\r]/g, '');
xmlhttp.setRequestHeader("x-user:", safeUsername);
xmlhttp.send();
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3114</key><name>Parameter_Tampering</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; information. By requesting information directly, such as by an account number, authorization may be bypassed and the attacker could steal confidential or restricted information (for example, a bank account balance), using a direct object reference.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application provides user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application concatenates the user input directly into the SQL query string, without any additional filtering. The application also does not perform any validation on the input, nor constrain it to a pre-computed list of acceptable values.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not concatenate user input directly into SQL queries.&amp;#160;&lt;/li&gt;
&lt;li&gt;Include a user-specific identifier as a filter in the WHERE clause of the SQL query.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unfiltered Direct Object Reference&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req)  {
    int accountId = Integer.parseInt(req.getParameter("accountId"));
    
    string sql = "select * from [Accounts] where [AccountId] = " 
                        + accountId.toString();
                        
    Statement stmt = conn.createStatement();
    ResultSet accountRS = stmt.executeQuery(sql); 
    
    return accountRS;
}&lt;/pre&gt;&lt;h4&gt;Record References are Now Filtered and Indirect&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req)  {
    int accountIndex = Integer.parseInt(req.getParameter("accountIndex"));
    int realAccountId = userAccountList.get(accountIndex);
    
    int userId = req.getSession().getAttribute("userId"); 
    
    string sql = "select * from [Accounts] where [AccountId] = " 
                        + realAccountId.toString() 
                        + " and [UserId] = " + userId.toString();
                        
    Statement stmt = conn.createStatement();
    ResultSet accountRS = stmt.executeQuery(sql); 
    
    return accountRS;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3557</key><name>DB_Parameter_Tampering</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; personal information, by simply altering the reference parameter sent to the server. Thus, the malicious user could bypass access controls and access unauthorized records, such as other users accounts,&amp;#160;stealing confidential or restricted information.&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application accesses&amp;#160;user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application uses the user input to filter specific records from database tables, which contain sensitive personal information (e.g. user accounts or payment details). Since the application does not filter the records according to any user identifier, nor&amp;#160;constrain it to a pre-computed list of acceptable values, a malicious user can easily modify the submitted reference identifier, and thus access unauthorized records.&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Filter the database query according to&amp;#160;a user-specific identifier, such as the customer number.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unfiltered Direct Object Reference&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req){
    int accountId = Integer.parseInt(req.getParameter("accountId"));    
    PreparedStatement stmt = connection.PreparedStatement("SELECT * from Accounts where AccountId = ?");
    
    stmt.setInt(1, accountId);   
    ResultSet accountRS = stmt.executeQuery();                 
    
    return accountRS;
}&lt;/pre&gt;&lt;h4&gt;Record References are Now Filtered and Indirect&lt;/h4&gt;&lt;pre&gt;    public ResultSet getAccountInfo(request req){
    int accountIndex = Integer.parseInt(req.getParameter("accountId"));
    int realAccountId = userAccountList.get(accountIndex);
    int userId = req.getSession().getAttribute("userId"); 
    PreparedStatement stmt = connection.PreparedStatement("SELECT * from Accounts where AccountId = ? AND UserId = ?");
    
    stmt.setInt(1, realAccountId);   
    stmt.setInt(2, userId);
    ResultSet accountRS = stmt.executeQuery();                 
    
    return accountRS;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3108</key><name>Hardcoded_Absolute_Path</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Generally, hardcoding absolute paths makes the application brittle, and will prevent the program from operating properly in some environments that do not have the identical file system structure. This will also cause software maintenance problems in future versions of the application, if the design or requirements were to change.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Additionally, if the application uses this path to read or write data, this can cause a breach of confidentiality or&amp;nbsp;allow malicious input into the program. In some situations, this vulnerability might even allow a malicious user to override the expected functionality, and cause the application to run any arbitrary program and execute any code the attacker deploys to the server.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Hardcoded paths are less flexible, and do not allow the application to account for changes in the environment. For example, the program might be installed in a different directory than the default. Likewise, different system languages and OS architectures can change the names of the system folders; for example, in a Spanish Windows machine there could&amp;nbsp;be&amp;nbsp;"&lt;code&gt;C:\Archivos de programa (x86)\&lt;/code&gt;" instead of "&lt;code&gt;C:\Program Files\&lt;/code&gt;".&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Moreover, on Windows by default all directories and files created outside of the system folders and outside the user's profile, will be allow full read and write access to any authenticated user. An unauthorized, malicious user could access any sensitive data in these folders, despite the application assuming they are protected. Even worse, an attacker&amp;nbsp;could overwrite existing programs in these unprotected folders and plant malicious code, which&amp;nbsp;will be activated by the application.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Do not hardcode absolute paths into the application.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Instead, store the absolute paths in an external configuration file, that can be modified as required for each environment.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Alternatively, use paths relative to the current application, if the target file is in a subdirectory of the application's root.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Do not assume a specific file system structure, outside of the application's subdirectories. On Windows, use the built-in expandable variables, such as &lt;code&gt;%WINDIR%&lt;/code&gt;, &lt;code&gt;%PROGRAMFILES%,&lt;/code&gt; and &lt;code&gt;%TEMP%&lt;/code&gt;.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;On Linux and other OS where available, implement a system jail (chroot) for the application, and store&amp;nbsp;all programs and data files there only.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Prefer storing all executables under the protected program directory (under "&lt;code&gt;C:\Program Files\&lt;/code&gt;" by default on Windows).&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Do not store sensitive data or configuration files in arbitrary folders. Likewise, do not store data files in the program directory. Instead, use the designated folders as intended, i.e. &lt;code&gt;%PROGRAMDATA%&lt;/code&gt; and &lt;code&gt;%APPDATA%&lt;/code&gt;&amp;nbsp;on Windows, respectively.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Configure hardened permissions to the most restricted as possible, according to the Principle of Least Privilege. Consider implementing this automatically in the installation and setup routines.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Hardcoded Path to Data File&lt;/h4&gt;&lt;pre&gt;public File getLogFile() { 
	String filename = "C:\Logs\myapp.log";
	File logFile = new File(filename); 

  	return logFile; 
}&lt;/pre&gt;&lt;h4&gt;Configured Path for Data File&lt;/h4&gt;&lt;pre&gt;public File getLogFile() { 
	Properties props = this.Properties; 
  	String filename = (String)props.get("logDirectory") + (String)props.get("logFilename");
  
	File logFile = new File(filename); 

  	return logFile; 
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2872</key><name>Find_Inputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_4466</key><name>Find_Socket_Inputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3101</key><name>Command_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could run arbitrary system-level OS commands on the application server host. Depending on the application&amp;rsquo;s OS permissions, these could include:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;File actions (read / create / modify / delete)&lt;/li&gt;
&lt;li&gt;Open a network connection to the attacker&amp;rsquo;s server&lt;/li&gt;
&lt;li&gt;Start and stop system services&lt;/li&gt;
&lt;li&gt;Complete server takeover&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application runs an OS system-level command to complete it's task, rather than via application code. The command includes untrusted data, that may be controllable by an attacker. This untrusted string may contain malicious, system-level commands engineered by an attacker, which would be executed as though the attacker were running commands directly on the application server.&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Refactor the code to avoid any direct shell command execution. Instead, use platform provided APIs or library calls.&lt;/li&gt;
&lt;li&gt;If it is impossible to remove the command execution, execute only static commands that do not include dynamic, user-controlled data.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified format, rather than rejecting bad patterns (blacklist). Parameters should be limited to an allowed character set, and non-validated input should be dropped. In addition to characters, check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;In order to minimize damage as a measure of defense in depth, configure the application to run using a restricted user account that has no unnecessary OS privileges.&lt;/li&gt;
&lt;li&gt;If possible, isolate all OS commands to use a separate, dedicated user account that has minimal privileges only for the specific commands and files used by the application, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3573</key><name>Password_In_Comment</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;It is often possible to&amp;#160;retrieve and view the application source code.&amp;#160;For web applications, it is even simpler to "&lt;code&gt;View Source&lt;/code&gt;" in the user's browser. Thus, a malicious user can steal these passwords, and use them to impersonate whoever they belong to. It is not known if these are valid, current passwords, nor if they are user passwords or for backend systems, like a database.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;A well-developed application will have it's source code well commented. Often, programmers&amp;#160;will&amp;#160;leave deployment information in comments, or&amp;#160;retain debugging data that was used during development. These comments often contain secret data, such as passwords. These password comments are stored in the source code in perpetuity, and are not protected.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Do not store secrets, such as passwords, in source code comments.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;h4&gt;Old code retained in comment with password&lt;/h4&gt;&lt;pre&gt;
function login() {
    // send credentials to server instead of reading from database
    // constring = "Initial Catalog=mytest;User Id=sa;Pwd=mypass;";
    var creds = "username=" + txtUsername.text + "&amp;password=" + txtPassword.text;
    
    var resp = sendToServer("/login", creds);
    return (resp == "success");
}&lt;/pre&gt;&lt;h4&gt;Passwords Cleaned from Comments&lt;/h4&gt;&lt;pre&gt;function login() {
    // send credentials to server instead of reading from database
    var creds = "username=" + txtUsername.text + "&amp;password=" + txtPassword.text;
    
    var resp = sendToServer("/login", creds);
    return (resp == "success");
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3568</key><name>Cross_Site_History_Manipulation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could compromise the browser's Same Origin Policy and violate a user's privacy, by manipulating the browser's History object in JavaScript. This could allow the attacker in certain situations to detect whether the user is logged in, track the user's activity, or infer the&amp;nbsp;state of other conditional values. This may also enhance Cross Site Request Forgery (XSRF) attacks, by leaking the result of the initial attack.&amp;nbsp;&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Modern browsers expose the user's browsing history to local JavaScript as a stack of previously visited URLs. While the browsers enforce a strict Same Origin Policy (SOP) to prevent pages from one website from reading visited URLs on other websites, the History object does leak the size of the history stack. Using only this information, in some situations the attacker can discover the results of certain checks the application performs on the server-side. For example, if the application redirects an unauthenticated user to the login page, a script on another website can detect that whether or not the&amp;nbsp;user is logged in, by checking the length of the History object.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;This information leakage is enabled when the application redirects the user's browser based on the value of some condition, the state of the user's server-side session. E.g. whether the user is authenticated to the application, if the user has visited a certain page with specific parameters, or the value of some application data. For more information, see&amp;nbsp;https://www.checkmarx.com/wp-content/uploads/2012/07/XSHM-Cross-site-history-manipulation.pdf .&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Add the response header "X-Frame-Options: DENY" to all sensitive pages in the application, to protect against the IFrame version of XSHM in modern browser versions.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Add a random value to all targeted URLs as a parameter.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Example of code that leaks the variable state via browser history
      &lt;/h4&gt;&lt;pre&gt;If (!isAuthenticated)
    response.sendRedirect("Login.jsp");     &lt;/pre&gt;&lt;h4&gt;
Example code that prevents history leakage via random token
      &lt;/h4&gt;&lt;pre&gt;if (request.getParameter("r") == null)
    response.sendRedirect("Login.jsp?r=" + (new Random()).nextInt());

If (!isAuthenticated)
    response.sendRedirect("Login.jsp?r=" + (new Random()).nextInt());&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3111</key><name>Use_Of_Hardcoded_Password</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Hardcoded passwords expose the application to password leakage. If an attacker gains access to the source code, she will be able to steal the embedded passwords, and use them to impersonate a valid user. This could include impersonating end users to the application, or impersonating the application to a remote system, such as a database or a remote web service.&amp;#160;&lt;/div&gt;
&lt;div&gt;Once the attacker succeeds in impersonating the user or application, she will have full access to the system, and be able to do anything the impersonated identity could do.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application codebase&amp;#160;has string literal passwords embedded in the source code. This hardcoded value is used either to compare to user-provided credentials, or to authenticate downstream to a remote system (such as a database or a remote web service). &amp;#160;&lt;/div&gt;
&lt;div&gt;An attacker only needs to gain access to the source code to reveal the hardcoded password. Likewise, the attacker can reverse engineer the compiled application binaries, and easily retrieve the embedded password. Once found, the attacker can easily use the password in impersonation attacks, either directly on the application or to the remote system.&amp;#160;&lt;/div&gt;
&lt;div&gt;Furthermore, once stolen, this password cannot be easily changed to prevent further misuse, unless a new version of the application is compiled. Moreover, if this application is distributed to numerous systems, stealing the password from one system automatically allows a class break in to all the deployed systems.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not hardcode any secret data in source code, especially not passwords.&amp;#160;&lt;/li&gt;
&lt;li&gt;In particular, user passwords should be stored in a&amp;#160;database or directory service, and protected with a strong password hash (e.g. bcrypt, scrypt, PBKDF2, or Argon2). Do not compare user passwords with a hardcoded value.&amp;#160;&lt;/li&gt;
&lt;li&gt;Sytem passwords should be stored in a configuration file or the database, and protected with strong encryption (e.g. AES-256). Encryption keys should be securely managed, and not hardcoded.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Hardcoded Admin Password&lt;/h4&gt;&lt;pre&gt;bool isAdmin(String username, String password) {
    bool isMatch = false; 
    
    if (username.equals("admin")) {
        if (password.equals("P@ssw0rd"))
            return isMatch = true;
    }
    
    return isMatch;
}&lt;/pre&gt;&lt;h4&gt;No Hardcoded Credentials&lt;/h4&gt;&lt;pre&gt;bool isAdmin(String username, String password) {
    bool adminPrivs = false;
    
    if (authenticateUser(username, password)) { 
        UserPrivileges privs = getUserPrivilieges(username);
        
        if (privs.isAdmin)
            adminPrivs = true;
    }
    
    return adminPrivs;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3545</key><name>Find_Imports</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3579</key><name>Find_Django_XSRF_Sanitize</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3690</key><name>Find_Sanitize_Django_ORM</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3424</key><name>SQL_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. Using simple tools and text editing, the attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with its database by sending a textual SQL query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain SQL commands that would be interpreted as such by the database.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Instead of concatenating strings: a. Use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters). b. An even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&lt;/li&gt;
&lt;li&gt;Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application creates an SQL query using string obtained from the user
      &lt;/h4&gt;&lt;pre&gt;public class SQLInjection
{
        public void foo(TextBox tbUserName, SqliteConnection connection)
        {	
                string user = tbUserName.Text;
                string sql = "insert into users(name) VALUES (user)"
                MySqlCommand cmd = new MySqlCommand(sql, connection);
                connection.Open();
                SqlDataReader reader = cmd.ExecuteReader();
        }
}&lt;/pre&gt;&lt;h4&gt;
The string obtained from the user is checked for potentially malicious characters
      &lt;/h4&gt;&lt;pre&gt;
class SqlInjectionFixed
{
        public void foo(TextBox tbUserName, SqliteConnection connection)
        {
                string user = tbUserName.Text;
                string sql = "insert into users(name) VALUES (@param1)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue(@param1, user);
                connection.Open();
                SqlDataReader reader = cmd.ExecuteReader();
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application creates an SQL query using string obtained from the user&lt;/h4&gt;&lt;pre&gt;public class SQL_Injection {
	public static void getUserId(Connection con) {
		System.out.println("enter user name");
		Scanner in = new Scanner(System.in);
		String user = in.nextLine();
		String query = "select user_id from User where user = " + user;
		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery(query);
	}
}&lt;/pre&gt;&lt;h4&gt;The string obtained from the user is checked for potentially malicious characters&lt;/h4&gt;&lt;pre&gt;public class SQL_Injection_Fixed {
	public static void getUserId(Connection con) {
		System.out.println("enter user name");
		Scanner in = new Scanner(System.in);
		String user = in.nextLine();
		String query = "select user_id from User where user = ?";
		PreparedStatement stmt = con.createStatement(query);
		stmt.setString(1, user);
		ResultSet rs = stmt.executeQuery(query);
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3964</key><name>Debug_Enabled</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Tests and debugging code are not intended to be deployed to the production environment, and can create unintended entry points, thus increasing the application's attack surface. Furthermore, this code is often not properly tested or maintained, and can retain historic vulnerabilities that were fixed in other parts of the codebase. Often, debug code will contain a functional "back door", by enabling the programmer to bypass operational security mechanisms, such as authentication or access controls.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;During application development, it is common for programmers to implement specialized code, in order to ease debugging and testing. Often the programmer will even&amp;nbsp;enable the debug code to bypass security mechanisms, so as to focus the tests on the specific functionality and isolate it from the security architecture.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;This debug or test code is not removed from the codebase, and is then included in the software build and deployed to the production environment.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&amp;nbsp;- Remove all debug code before deploying or building the application. Ensure the configuration settings are not defined to enable debug mode.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Implement all test code via a dedicated test framework, which can isolate the test case code from the rest of the application.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Avoid implementing special "test code", "debugging-time" functionality, or "secret" interfaces or parameters in the application code itself.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Define and implement a standard and automatic build / deployment process, using dedicated CI / CD tools, that can automatically configure the deployed application, exclude all temporary code, and include only intended application code.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Ruby&lt;/h3&gt;&lt;h4&gt;Internal Test Method&lt;/h4&gt;&lt;pre&gt;class AppClass
	def run_app
      # Run the app
    end
  	def test_app
      # Test and debug the app
    end
end&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Debug Configuration&lt;/h4&gt;&lt;pre&gt;&lt;configuration&gt;
	&lt;system.web&gt;
    	&lt;compilation debug="false" /&gt;
    &lt;/system.web&gt;
&lt;/configuration&gt;&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Main in Servlet&lt;/h4&gt;&lt;pre&gt;public class AppServlet extends HttpServlet { 
	protected void doGet(HttpServletRequest request, HttpServletResponse response) 
      				throws ServletException, IOException {
      	// handle request
    }
  
  	private static String MODE = "";
  	public static void main(String[] args) {
      	// initialize app for debugging and testing
      	MODE = "DEBUGGING";
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_4463</key><name>Unsafe_Deserialization</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;An attacker could prepare serialized data which when de-serialized would cause execution of the attacker python code on the server.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Arbitrary code execution on the server might lead to data loss, denial of service, or data security compromise.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The Pickle module implements generic and powerful serialization and de-serialization of arbitrary Python objects. Pickle supports serialization of acyclic and cyclic object graphs. If an object is referenced several times, only one master copy is serialized, and the other references are preserved as the references to the master copy.&lt;/p&gt;
&lt;p&gt;The Pickle module is not intended to be used in untrusted environment, and it is not secure against invalid of maliciously constructed data.&lt;/p&gt;
&lt;p&gt;The Pickle module supports several versions of serialization protocols, version 0 being a backward-compatible ASCII-only representation.&lt;/p&gt;
&lt;p&gt;The Pickle allows arbitrary objects to declare serialization routine by defining a __reduce__ method. It should return either a string or a tuple describing how to reconstruct this object on de-serialization. This tuple should contain a callable and a tuple of arguments to be passed to this callable.&lt;/p&gt;
&lt;p&gt;We can construct a pickle, that when de-serialized, will execute /bin/sh, as follows:&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;import cPickle&lt;br /&gt;&lt;br /&gt;import subprocess&lt;br /&gt;import base64&amp;nbsp;&lt;br /&gt;&lt;br /&gt;class RunBinSh(object):&lt;br /&gt; def __reduce__(self):&lt;br /&gt;&amp;nbsp; &amp;nbsp; return (subprocess.Popen, (('/bin/sh',),))&amp;nbsp;&lt;br /&gt;&lt;br /&gt;print base64.b64encode(cPickle.dumps(RunBinSh()))&lt;/pre&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Trust boundaries&lt;/strong&gt; - Do not use Pickle module for de-serialization of the data received from an untrusted or a user-controlled source.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only unpickle data the application pickled itself. Normally the application could trust the data that come from its own server (DB, cache, etc).&amp;nbsp;&lt;/p&gt;
&lt;p&gt;However, if someone has access to manipulate the data, he/she can also exploit the pickle vulnerability.&amp;nbsp;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Safer alternatives&lt;/strong&gt; - Consider using JSON formats.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data signing&lt;/strong&gt; - Hash or sign the data with a secret key.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Secure communication&lt;/strong&gt; - If an application receives pickled data from a trusted application in a trusted environment, ensure that an encrypted network connection is used.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;Bad - The application receives the data from ZeroMQ and unpickles it without validation&lt;/h4&gt;&lt;pre&gt;import zmq
import cPickle as pickle

class Server(object):
    def __init__(self):
        context = zmq.Context()

        self.receiver = context.socket(zmq.PULL)
        self.receiver.bind("tcp://*:1234")

        self.sender = context.socket(zmq.PUSH)
        self.sender.bind("tcp://*:1235")

    def send(self, data):
        self.sender.send(pickle.dumps(data))

    def recv(self):
        data = self.receiver.recv()
        return pickle.loads(data) # bad

s = Server()
print s.recv()&lt;/pre&gt;&lt;h4&gt;Good - The application checks if SHA256 hash of the data and the secret key K is unchanged. The secret key K must not be revealed to an entrusted party&lt;/h4&gt;&lt;pre&gt;import zmq
import cPickle as pickle

class Server(object):
    def __init__(self):
        context = zmq.Context()

        self.receiver = context.socket(zmq.PULL)
        self.receiver.bind("tcp://*:1234")

        self.sender = context.socket(zmq.PUSH)
        self.sender.bind("tcp://*:1235")

    def send(self, data):
        pickled = pickle.dumps(data)
        digest = hmac.new('K', pickled, hashlib.sha256).hexdigest()
        self.sender.send(digest + ' ' + pickled)

    def recv(self):
        data = self.receiver.recv()
        recv_digest, picked = data.split(' ');
        new_digest = hmac.new('K', pickled, hashlib.sha256).hexdigest()
        if recv_digest != new_digest: # good
            raise Exception('Integrity check failed')
            
s = Server()
print s.recv()&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3748</key><name>Insufficiently_Protected_Credentials</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could steal user credentials, enabling access to user accounts and confidential data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;User passwords are written to the database without being properly encrypted with a cryptographic hash. The application reads clear passwords straight from the database.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Store passwords using a cryptographic hash designed as a password protection scheme, such as:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;bcrypt&lt;/li&gt;
&lt;li&gt;scrypt&lt;/li&gt;
&lt;li&gt;PBKDF2 (with random salt) These need to be configured with an appropriately high work effort.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Always use a secure password protection scheme to store passwords, such as bcrypt:

      &lt;/h4&gt;&lt;pre&gt;


string hashed = BCrypt.HashPassword(password, BCrypt.GenerateSalt(12));



      &lt;/pre&gt;&lt;h4&gt;

For password verification, use the matching function:

      &lt;/h4&gt;&lt;pre&gt;


bool isValid = BCrypt.CheckPassword(candidate, hashed);



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Always use a secure password protection scheme to store passwords, such as bcrypt:

      &lt;/h4&gt;&lt;pre&gt;


String hashed = BCrypt.hashpw(password, BCrypt.gensalt(12));


      &lt;/pre&gt;&lt;h4&gt;

For password verification, use the matching function:

      &lt;/h4&gt;&lt;pre&gt;


bool isValid = BCrypt.checkpw(candidate, hashed);


      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_4461</key><name>OS_Access_Violation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;An attacker could prepare malicious input data which would cause an access violation, a private data leak, data corruption or a denial of service (DEP violation and application crash)&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The Python's OS module provides a portable interface intended for using host operating system functionality.&lt;/p&gt;
&lt;p&gt;The interface of the OS module includes operations for creating, deleting and manipulating host files, directories and links.&lt;/p&gt;
&lt;p&gt;Python's OS module allows arbitrary files access and manipulation. In case an attacker is able to pass a special-crafted input path to the OS module, the access violation or data corruption may happen.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;strong&gt;Trust boundaries&lt;/strong&gt;&amp;nbsp;- Do not use the OS module for host files manipulation received from an untrusted or a user-controlled source. Normally the application could trust the data that come from its own server (DB, cache, etc).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Secure communication&lt;/strong&gt; - If an application receives an attribute name from a trusted application in a trusted environment, ensure that an encrypted network connection is used.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style="text-decoration: underline;"&gt;How to avoid it:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The general recommendation is to validate user input properly before passing it to the OS&amp;nbsp;module.&lt;/p&gt;
&lt;p&gt;1) Make sure path to file which is begin manipulated validated properly:&lt;/p&gt;
&lt;p style="padding-left: 30px;"&gt;a. Avoid depending on user input for path to file, if possible.&lt;/p&gt;
&lt;p style="padding-left: 30px;"&gt;b. Ensure that path to file is fully canocalized.&lt;/p&gt;
&lt;p style="padding-left: 30px;"&gt;c. Restrict access to file path within a specific directory (sandbox).&lt;/p&gt;
&lt;p&gt;2) Create a white list of files or directories which can be manipulated safely and allow access to only these files or directories.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;Bad - The application receives a file path and removes this file&lt;/h4&gt;&lt;pre&gt;import os
import sys

path = sys.stdin.readline()[:-1]
os.remove(path)&lt;/pre&gt;&lt;h4&gt;Good - The application restricts access to files within a specific directory&lt;/h4&gt;&lt;pre&gt;import os
import sys

def is_safe_path(basedir, path):
    return os.path.abspath(path).startswith(basedir)

path = sys.stdin.readline()[:-1]

if not is_safe_path('/tmp/userfiles', path):
    sys.stdout.write('Not allowed!\n')
    sys.exit()
    
os.remove(path)&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_4462</key><name>Object_Access_Violation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;An attacker could prepare malicious input data which would cause an access violation, a private data leak or a denial of service (DEP violation and application crash).&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The Python's built-in getattr function is used to fetch a value of a named attribute of an object.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;That means if the named attribute exists, the value of the corresponding object attribute will be returned.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;For example, getattr(obj, 'property') is equivalent to obj.property.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;If the named attribute does not exist, an AttributeError exception will be raised.&lt;/p&gt;
&lt;p&gt;All python objects ultimately represent a key-value dictionary.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The keys of the dictionary are strings and represent names of the object attributes, the values are named attributes values.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Finally, the getattr function implements attribute lookup, returning the named attribute value for the given key.&lt;/p&gt;
&lt;p&gt;The getattr function allows arbitrary object named attribute access.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;In case an attacker is able to pass a special-crafted attribute name to the getattr function, the access violation may happen.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Trust boundaries&lt;/strong&gt; - Do not use the gettatr function for the named attribute lookup received from an untrusted or a user-controlled source.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Normally the application could trust the data that come from its own server (DB, cache, etc).&amp;nbsp;&lt;/p&gt;
&lt;p&gt;However, if someone has access to manipulate the data, he/she can also exploit the `getattr` vulnerability.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;nbsp;&lt;strong&gt;Secure communication&lt;/strong&gt; - If an application receives an attribute name from a trusted application in a trusted environment, ensure that an encrypted network connection is used.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;Bad Example - The application receives configuration attribute name and dumps to the output stream&lt;/h4&gt;&lt;pre&gt;import sys

class Config(object):
    def set_field(self, field_name, field_value):
        setattr(self, field_name, field_value)

    def get_field(self, field_name):
        return getattr(self, field_name) # bad

    def set_password(self, pwd):
        self.pwd = pwd

    def get_password(self):
        return self.pwd

config = Config()
config.set_field('ip', '8.8.8.8')
config.set_field('port', '53')
config.set_field('name', 'server')
config.set_password('123')

c_key = sys.stdin.readline()[:-1]
print config.get_field(c_key)&lt;/pre&gt;&lt;h4&gt;Good Example - The application uses a separate dictionary for config values&lt;/h4&gt;&lt;pre&gt;import sys

class Config(object):
    def __init__(self):
        self.values = {}

    def set_field(self, field_name, field_value):
        self.values[field_name] = field_value

    def get_field(self, field_name):
        return self.values.get(field_name)

    def set_password(self, pwd):
        self.pwd = pwd

    def get_password(self):
        return self.pwd

config = Config()
config.set_field('ip', '8.8.8.8')
config.set_field('port', '53')
config.set_field('name', 'server')
config.set_password('123')

c_key = sys.stdin.readline()[:-1]
print config.get_field(c_key)&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3574</key><name>ReDoS_In_Replace</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) can use complex patterns to cause a denial of service (DoS). With certain patterns, processing time can grow exponentially in relation to input size. An attacker can use these regular expressions&amp;#160;to&amp;#160;cause the application&amp;#160;to spend an effectively infinite amount of time processing, preventing legitmate users from accessing the application.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) is an algorithmic complexity attack, that exploits exponential time worst case complexity. In particular, certain regex patterns - either explicitly coded in the application, or accepted from user input and used for searching&amp;#160;text&amp;#160;- can cause extreme levels of processing for some input texts. For example, `&lt;code&gt;(a+)+&lt;/code&gt;` would hang on an input of a long string of "aaaaaaaaaaaaaaaaaaaaaaaa!"&lt;/div&gt;
&lt;div style="direction: ltr;"&gt;&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not use input for constructing a regular expression.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ensure all regexes are not vulnerable to ReDoS, specifically worst case complexity does not cause the application to hang.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Strive to avoid unnecessarily complex expressions, making them as simple as possible.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Validating date based on user-supplied format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    string format = readCookieByName(req, "dateFormat");
    
    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Validating date based on server format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    // Constrain available formats to hardcoded list
    string style = readCookieByName(req, "dateStyle");
    string format;
    if (style == "YMD") 
        format = "^\d{4}-\d{2}-\d{2}";
    else 
        format = "^\d{2}-\d{2}-\d{4}";

    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password with RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.matches(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password without RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.contains(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3559</key><name>Find_Connection_Strings</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3547</key><name>Find_CGI_Inputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3537</key><name>Find_DB_Conn_ADOdb</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3941</key><name>Find_DB_Conn_DataFile</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3454</key><name>Find_DB_Conn_DBO</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3538</key><name>Find_DB_Conn_Django</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3456</key><name>Find_DB_Conn_Mongo</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3437</key><name>Find_DB_Conn_MySQL</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3094</key><name>Find_DB_Conn_MSSQL</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3540</key><name>Find_DB_Conn_Oracle</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3539</key><name>Find_DB_Conn_OJDBC</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3543</key><name>Find_DB_Conn_SQLAlchemy</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3541</key><name>Find_DB_Conn_Peewee</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3542</key><name>Find_DB_Conn_SAP</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3436</key><name>Find_DB_Conn_Postgres</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3478</key><name>Find_DB_Conn_SQLanywhere</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3479</key><name>Find_DB_Conn_SQLite</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3480</key><name>Find_DB_Conn_SqlObject</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3481</key><name>Find_DB_Conn_Sybase</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3942</key><name>Find_DB_In_DataFile</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3544</key><name>Find_DB_Imports</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2866</key><name>Find_DB_In</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3117</key><name>Find_DB_Out</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3553</key><name>Find_Django_Model_Components</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3562</key><name>Find_LDAP_Outputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3687</key><name>Find_PY_DOM_XPath_Sanitizers</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3556</key><name>Find_Models_By_Import</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3116</key><name>Privacy_Violation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;A user&amp;#8217;s personal information could be stolen by a malicious programmer, or an attacker that intercepts the data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application sends user information, such as passwords, account information, or credit card numbers, outside the application, such as writing it to a local text or log file or sending it to an external web service.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Personal data should be removed before writing to logs or other files.&lt;/li&gt;
&lt;li&gt;Review the need and justification of sending personal data to remote web services.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The user's password is written to the screen
      &lt;/h4&gt;&lt;pre&gt;

class PrivacyViolation
{
        static void foo(string insert_sql)
        {
                string password = "unsafe_password";
                insert_sql = insert_sql.Replace("$password", password);
                System.Console.WriteLine(insert_sql);
        } 
}



      &lt;/pre&gt;&lt;h4&gt;
the user's password is MD5 coded before being written to the screen
      &lt;/h4&gt;&lt;pre&gt;

class PrivacyViolationFixed
{
        static void foo(string insert_sql)
        {
                string password = "unsafe_password";
                MD5 md5Hash = System.Security.Cryptography.MD5.Create();
                byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(password));
        StringBuilder md5Password = new StringBuilder();

                for (int i = 0; i &lt; data.Length; i++)
		{
			md5Password.Append(data[i].ToString("x2"));
		}
		insert_sql = insert_sql.Replace("$password", md5Password.ToString());
                System.Console.WriteLine(insert_sql);
        } 
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3578</key><name>Hardcoded_Password_in_Connection_String</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Hardcoded database passwords expose the application to password leakage, and the database to unauthorized access. If an attacker gains access to the source code (or can decompile the application binaries), she will be able to steal the embedded passwords, and use them to directly access the database. This would enable the attacker to steal secret information, modify sensitive records, or delete important data.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;&amp;nbsp;&lt;/div&gt;
&lt;div&gt;In addition, the password cannot be easily changed when required. In the eventual situation wherein it is a necessity to update the password, a new version of the application would need to be built and deployed to production systems.&amp;nbsp;&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application has the database password hardcoded in the source code files, and uses this password in a connection string to the database or other server. This password is visible to anyone with access to source code, and cannot be changed without rebuilding or recompiling the application. Even after compilation or deployment, the password and connection string are still present in the binary program files or production environment.&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;&amp;nbsp;- Never hardcode sensitive data, such as database passwords.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;&amp;nbsp;- Prefer to avoid requiring an explicit database password at all, instead using OS-integrated system authentication.&lt;/div&gt;
&lt;div&gt;&amp;nbsp;- Alternatively, store the password in an encrypted configuration file, and implement a mechanism enabling administrators to change the password. Ensure the file permissions are configured to restrict access to administrators only.&amp;nbsp;&lt;/div&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_4063</key><name>Find_By_Param_Name</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2864</key><name>Find_Console_Outputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2863</key><name>Find_Console_Inputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3570</key><name>Find_Cookies</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3531</key><name>Find_DB_In_Django</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3431</key><name>Find_DB_In_MySQL</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3457</key><name>Find_DB_In_Mongo</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3458</key><name>Find_DB_Out_Mongo</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3433</key><name>Find_DB_Out_MySQL</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3095</key><name>Find_DB_Out_Postgres</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3978</key><name>Find_Django</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3963</key><name>Find_Django_Config</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3548</key><name>Find_Django_Inputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3554</key><name>Find_Django_Outputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3965</key><name>Find_Exception_Information</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3426</key><name>Find_Interactive_Inputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2875</key><name>Find_Log_Outputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3549</key><name>Find_Methods_By_Import</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2879</key><name>Find_Passwords</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2880</key><name>Find_Personal_Info</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3569</key><name>Find_Redirects</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_4426</key><name>Find_Remote_Requests</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_4427</key><name>Find_Remote_Requests_Sanitize</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3118</key><name>Find_Sanitize</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_4435</key><name>Find_UnknownReference</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2883</key><name>Find_Session</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3973</key><name>Find_XXE_lxml</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3976</key><name>Find_XXE_Sax_Sanitizers</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3969</key><name>Find_XXE_SaxSanitized_XMLReaders</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3473</key><name>Find_DB_In_ODBC</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3425</key><name>Find_DB_Methods</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3533</key><name>Find_DB_In_Oracle</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3526</key><name>Find_DB_Out_Oracle</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3110</key><name>Log_Forging</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could engineer audit logs of security-sensitive actions and lay a false audit trail, potentially implicating an innocent user or hiding an incident.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application writes audit logs upon security-sensitive actions. Since the audit log includes user input that is neither checked for data type validity nor subsequently sanitized, the input could contain false information made to look like legitimate audit log data,&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Validation is not a replacement for encoding. Fully encode all dynamic data, regardless of source, before embedding it in logs.&lt;/li&gt;
&lt;li&gt;Use a secure logging mechanism.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Swift&lt;/h3&gt;&lt;h4&gt;Ensure you encode any special delimiter characters before writing to a log file.&lt;/h4&gt;&lt;pre&gt;


print(logDetails.stringByReplacingOccurrencesOfString("\n", withString: "\\n"))


&lt;/pre&gt;&lt;h3&gt;Objc&lt;/h3&gt;&lt;h4&gt;Ensure you encode any special delimiter characters before writing to a log file.&lt;/h4&gt;&lt;pre&gt;


NSLog(@"%@", [logDetails stringByReplacingOccurrencesOfString:@"\n" withString:@"\\n"]);


&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Ensure you encode any special delimiter characters before writing to a log file.

      &lt;/h4&gt;&lt;pre&gt;


Log.Write( logDetails.Replace(CRLF, @"\CRLF"));



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Ensure you encode any special delimiter characters before writing to a log file.

      &lt;/h4&gt;&lt;pre&gt;


Log.Write( logDetails.Replace(CRLF, @"\CRLF"));


      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3470</key><name>Find_DB_Out_SQLite</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3097</key><name>Find_XSS_Outputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3524</key><name>Find_DB_Out_Django</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3087</key><name>Find_Match</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3475</key><name>Find_DB_In_SQLite</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3107</key><name>XPath_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Depending on the type of information contained in the queried XML document, an attacker could cause any effect of selecting the wrong information from the XML document, such as stealing unauthorized data or impersonating another user.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application queries an XML document by using a textual XPath query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could be maliciously crafted to cause the application to select the wrong information from the XML document.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Ideally, avoid making the xpath query dependent on user input. If it is necessary to make the query dependent on user input, preferably map XPath queries to user parameters, maintaining separation between data and code. If it is necessary to include the user input in the query, the input must be first properly validated as above.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application uses a user inputed string to construct an XPath query
      &lt;/h4&gt;&lt;pre&gt;class XPathInjection
    {
        static void foo(XPathDocument document)
        {
            XPathNavigator navigator = document.CreateNavigator();
            string input = Console.ReadLine();
            XPathNodeIterator nodes = navigator.Select(input);
        }
    }&lt;/pre&gt;&lt;h4&gt;
The user inputed string is encoded before usage in the XPath query
      &lt;/h4&gt;&lt;pre&gt;class XPathInjectionFixed
    {
        static void foo(XPathDocument document)
        {
            XPathNavigator navigator = document.CreateNavigator();
            string input = Console.ReadLine();
                        byte[] fileName = md5.ComputeHash(System.Text.Encoding.ASCII.GetBytes(input));
                        input = System.Text.Encoding.Default.GetString(fileName);
            XPathNodeIterator nodes = navigator.Select(input);
        }
    }&lt;/pre&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;The application uses a user inputed string to construct an XPath query&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import xpath
print 'Insert item number: '
userInput = stdin.readline()	
xpath.find('//item' + userInput, doc)&lt;/pre&gt;&lt;h4&gt;The user inputed string is turned into an integer before usage in the XPath query&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import xpath
print 'Insert item number: '
userInput = stdin.readline()	
xpath.find('//item' + str(int(userInput)), doc)&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application uses a user inputed string to construct an XPath query&lt;/h4&gt;&lt;pre&gt;public class XPath_Injection {
	public static void main(String[] args) {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter xpath expression: ");
		String expression = userInputScanner.nextLine();

		// read a string value
		XPath xPath = XPathFactory.newInstance().newXPath();
		try {
			XPathExpression email = xPath.compile(expression);
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h4&gt;The user inputed string is encoded before usage in the XPath query&lt;/h4&gt;&lt;pre&gt;public class XPath_Injection_Fixed {
	public static void main(String[] args) {
		HashMap&lt;String, String&gt; sanitize = new HashMap&lt;String, String&gt;();
		sanitize.put("student", "/class/student");
		sanitize.put("graduate", "/class/graduate");
		sanitize.put("professor", "/class/professor");
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter xpath expression: ");
		String expression = userInputScanner.nextLine();

		// read a string value
		XPath xPath = XPathFactory.newInstance().newXPath();
		try {
			XPathExpression email = xPath.compile(sanitize.get(expression));
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3576</key><name>Trust_Boundary_Violation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Application developers may treat user input as trusted data, potentially creating an input-based vulnerability such as SQL Injection or Cross-Site Scripting.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application places user input, which is untrusted data, in the server-side Session folder, which is considered a trusted location. This could lead developers to treat untrusted data as trusted.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Validate and sanitize all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Don&amp;#8217;t mix untrusted user input with trusted data.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Input from the user is added to the current session without sanitizing it
      &lt;/h4&gt;&lt;pre&gt;

public class TrustBoundaryViolation
{
        public void foo()
        {
                string input = Console.ReadLine();
                HttpContext.Current.Session[�val�] = input;
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The numbers are extracted from the user inputed data before use
      &lt;/h4&gt;&lt;pre&gt;

public class TrustBoundaryViolationFixed
{
        public void foo()
        {
                string input = Console.ReadLine();
                string inputValue = int.Parse(input).ToString();
                HttpContext.Current.Session[�val�] = inputValue;
        }
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3567</key><name>Find_Parameter_Tampering_Sanitize</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3691</key><name>Find_Sanitize_MSSQL</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2876</key><name>Find_Methods</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3558</key><name>Find_Header_Outputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3693</key><name>Find_Sanitize_ODBC</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3747</key><name>Find_HTTPServer_Outputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3477</key><name>Find_DB_In_Sybase</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3972</key><name>Find_XXE_Expat_Unsanitizers</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3701</key><name>Find_Sanitize_SQLite</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3566</key><name>Open_Redirect</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to get a victim to click a link to the application, so that the user will be immediately redirected to another, arbitrary site. Users may think that they are still in the original application site. The second site may be offensive, contain malware, or, most commonly, be used for phishing.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application redirects the user&amp;#8217;s browser to a URL provided in a user request, without warning users that they are being redirected outside the site. An attacker could use social engineering to get a victim to click a link to the application with a parameter defining another site to which the application will redirect the user&amp;#8217;s browser, and the user may not be aware of the redirection.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Ideally, do not allow arbitrary URLs for redirection. Instead, create a server-side mapping from user-provided parameter values to legitimate URLs.&lt;/li&gt;
&lt;li&gt;If it is necessary to allow arbitrary URLs:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;For URLs inside the application site, first filter and encode the user-provided parameter, and then use it as a relative URL by prefixing it with the application site domain.&lt;/li&gt;
&lt;li&gt;For URLs outside the application (if necessary), use an intermediate disclaimer page to provide users with a clear warning that they are leaving your site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Apex&lt;/h3&gt;&lt;h4&gt;&lt;/h4&gt;&lt;pre&gt;String redirsite = ApexPages.currentPage().getParameters().get('redirlocation');
PageReference pageRef;
if(redirsite != null)
{
    pageRef = new PageReference(redirsite);
    pageRef.setRedirect(true);
    return pageRef;
}
pageRef = ApexPages.currentPage();
return pageRef;&lt;/pre&gt;&lt;h4&gt;&lt;/h4&gt;&lt;pre&gt;String redirsite = ApexPages.currentPage().getParameters().get('redirlocation');
PageReference pageRef;
if(redirsite != null)
{
    pageRef = new PageReference('http://domain.com/page.jsp?' + redirsite);
    pageRef.setRedirect(true);
    return pageRef;
}
pageRef = ApexPages.currentPage();
return pageRef;&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Avoid redirecting to arbitrary URLs, instead map the parameter to a list of static URLs.

      &lt;/h4&gt;&lt;pre&gt;


Response.Redirect(getUrlById(targetUrlId));



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Avoid redirecting to arbitrary URLs, instead map the parameter to a list of static URLs.

      &lt;/h4&gt;&lt;pre&gt;


Response.Redirect(getUrlById(targetUrlId));


      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2885</key><name>Find_Write</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2881</key><name>Find_Read</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3688</key><name>Find_Sanitize_ADOdb</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3106</key><name>Stored_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use legitimate access to the application to submit engineered data to the application&amp;#8217;s database. When another user subsequently accesses this data, web pages may be rewritten and malicious scripts may be activated.&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from the application&amp;#8217;s database. The data is embedded directly in the page's HTML, causing the browser to display it as part of the web page. This data may have originated in input from another user. If the data includes HTML fragments or Javascript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary database data without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all dynamic data, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Validation is not a replacement for encoding. Fully encode all dynamic data, regardless of source, before embedding it in output. Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;Javascript encoding for server-generated Javascript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or its built-in functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is rendered to a web-page template&lt;/h4&gt;&lt;pre&gt;function renderUserProfileTable(res, connection, user_id) {
	connection.query('SELECT id,name,description from user WHERE id= ?', [user_id],function(err, results) {
		var table = "&lt;table&gt;"
		table += "&lt;table class='profile-html-table'&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + results[0].name + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + results[0].description + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;/table&gt;"
		res.render("profile", table)
	});
}&lt;/pre&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is encoded and then rendered to a web-page template&lt;/h4&gt;&lt;pre&gt;var htmlencoder = require('htmlencode');

function renderUserProfileTable(res, connection, user_id) {
	connection.query('SELECT id,name,description from user WHERE id= ?', [user_id],function(err, results) {
		var table = "&lt;table&gt;"
		table += "&lt;table class='profile-html-table'&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + htmlencoder.htmlEncode(results[0].name) + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + htmlencoder.htmlEncode(results[0].description) + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;/table&gt;"
		res.render("profile", table)
	});
}&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is output to a label&lt;/h4&gt;&lt;pre&gt;public class StoredXss
{
        public string foo(Label lblOutput, SqlConnection connection, int id)
        {
                string sql = "select email from CustomerLogin where customerNumber = @id";
                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.Prepare();
                cmd.Parameters.AddWithValue("@id", id);
                string output = (string)cmd.ExecuteScalar();
                lblOutput.Text = String.IsNullOrEmpty(output) ? "Customer Number does not exist" : output;
        }
}&lt;/pre&gt;&lt;h4&gt;
The outputed string is Html encoded before it is displayed in the label
      &lt;/h4&gt;&lt;pre&gt;public class StoredXssFixed
{
        public string foo(Label lblOutput, SqlConnection connection, HttpServerUtility Server, int id)
        {
                string sql = "select email from CustomerLogin where customerNumber = @id";
                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.Prepare();
                cmd.Parameters.AddWithValue("@id", id);
                string output = (string)cmd.ExecuteScalar()
                lblOutput.Text = String.IsNullOrEmpty(output) ? "Customer Number does not exist" : Server.HtmlEncode(output);                
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Data obtained from the excecution of an SQL command is output to a label&lt;/h4&gt;&lt;pre&gt;public class Stored_XSS {
	public static void XSSExample(Statement stmt) throws SQLException {
		Label label = new Label();
		ResultSet rs;
		rs = stmt.executeQuery("SELECT * FROM Customers WHERE UserName = Mickey");
		String lastNames = "";
		while (rs.next()) {
			lastNames += rs.getString("Lname") + ", ";
		}
		label.setText("Mickey last names are: " + lastNames + " ");
	}
}&lt;/pre&gt;&lt;h4&gt;The outputed string is encoded to hard-coded string before it is displayed in the label&lt;/h4&gt;&lt;pre&gt;public class Stored_XSS_Fix {
	public static void XSSExample(Statement stmt) throws SQLException {
		Label label = new Label();
		ResultSet rs;
		HashMap&lt;String, String&gt; sanitize = new HashMap&lt;String, String&gt;();
		sanitize.put("A", "Cohen");
		sanitize.put("B", "Smith");
		sanitize.put("C", "Bond");
		rs = stmt.executeQuery("SELECT * FROM Customers WHERE UserName = Mickey");
		String lastNames = "";
		while (rs.next()) {
			lastNames += sanitize.get(rs.getString("Lname")) + ", ";
		}
		label.setText("Mickey last names are: " + lastNames + " ");
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3975</key><name>Find_XXE_Sax</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3527</key><name>Find_DB_Out_Peewee</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3700</key><name>Find_Sanitize_SQLanywhere</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3525</key><name>Find_DB_Out_OJDBC</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2878</key><name>Find_Password_Strings</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2861</key><name>Find_DB</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3471</key><name>Find_DB_Out_SqlObject</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3468</key><name>Find_DB_Out_ODBC</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2873</key><name>Find_Integers</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2871</key><name>Find_Evil_Strings</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3523</key><name>Find_DB_Out_ADOdb</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3105</key><name>Second_Order_SQL_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. The attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with its database by sending a textual SQL query. The application creates the query by simply concatenating strings including data obtained from the database. Since that data may have been previously obtained from user input, and is neither checked for data type validity nor subsequently sanitized, the data could contain SQL commands that would be interpreted as such by the database.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all data, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Instead of concatenating strings: a. Use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters). b. An even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&lt;/li&gt;
&lt;li&gt;Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application creates an SQL query using data obtained from a database
      &lt;/h4&gt;&lt;pre&gt;public class SecondOrderSQLInjection
{
        public void foo(SqlConnection connection, SqlDataAdapter DA)
        {
                DataSet DS = new DataSet();
                DA.Fill(ref DS, "UserName"); 
                SqlCommand command = new SqlCommand("SELECT * FROM Customers " + "WHERE UserName = " + DS[0]["UserName"].ToString(), connection);
                command.ExecuteNonQuery();
        }
}&lt;/pre&gt;&lt;h4&gt;
The data obtained from the database is checked for potentially malicious characters
      &lt;/h4&gt;&lt;pre&gt;class SecondOrderSQLInjectionFixed
{
        public void foo(SqlConnection connection, SqlDataAdapter DA)
        {
                DataSet DS = new DataSet();
                DA.Fill(ref DS, "UserName");
                string userName = DS[0]["UserName"].ToString().Replace("'", "");
                SqlCommand command = new SqlCommand("SELECT * FROM Customers " + "WHERE UserName = " + userName, connection);
                command.ExecuteNonQuery();
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application creates an SQL query using data obtained from a database&lt;/h4&gt;&lt;pre&gt;public class Second_Order_SQL_Injection {
	public static void sql(Connection con, String sqlStm) {
		try {
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery(sqlStm);
			String userName = rs.getString("USER_NAME");
			String newSqlStm = "Update USER set PASSWORD = '1234' where userName like " + userName;
			stmt.executeUpdate(newSqlStm);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h4&gt;The data obtained from the database is checked for potentially malicious characters&lt;/h4&gt;&lt;pre&gt;public class Second_Order_SQL_Injection_Fixed {
	public static void sql(Connection con, String sqlStm) {
		try {
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery(sqlStm);
			String userName = rs.getString("USER_NAME");
			userName = userName.replaceAll("'", "");
			String newSqlStm = "Update USER set PASSWORD = '1234' where userName like " + userName;
			stmt.executeUpdate(newSqlStm);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3455</key><name>Find_DB_In_DBO</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3694</key><name>Find_Sanitize_OJDBC</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3474</key><name>Find_DB_In_SQLanywhere</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2874</key><name>Find_IO</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3546</key><name>Find_Members</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3697</key><name>Find_Sanitize_Postgres</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3702</key><name>Find_Sanitize_SQLObject</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3686</key><name>Find_PY_DOM_XPath</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3443</key><name>Find_DB_In_Postgres</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3689</key><name>Find_Sanitize_DBO</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3561</key><name>Find_DB_Conn_Strings</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3104</key><name>Resource_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could open a backdoor enabling the attacker to connect directly to the application server, potentially leading to server takeover or other direct attacks.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application opens a network socket, for listening to incoming network connections. However, the application uses user input to define the socket, enabling an attacker to control it.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Don&amp;#8217;t allow a user to define parameters of network sockets.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application opens a network socket using a port number inputed by the user
      &lt;/h4&gt;&lt;pre&gt;

class ResourceInjection
{
            public void foo(TextBox textBox1)
        {
                        long address = Convert.ToInt32(textBox1.Text);
            IPEndPoint endpoint = new IPEndPoint(address, port);
            Socket socket = new Socket(endpoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
            socket.Connect(endpoint);
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The application opens a hard-coded port number and does receive it from the user
      &lt;/h4&gt;&lt;pre&gt;

class ResourceInjection
{
            public void foo(TextBox textBox1, long address)
        {
            IPEndPoint endpoint = new IPEndPoint(address, 15551);
            Socket socket = new Socket(endpoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
            socket.Connect(endpoint);
        }
}



      &lt;/pre&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;The application opens a network socket using a host name inputed by the user&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import socket
import sys

userInput = stdin.readline()

HOST = userInput 
PORT = 8888 # Arbitrary non-privileged port
	 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print 'Socket created'
	 
#Bind socket to local host and port
try:
    s.bind((HOST, PORT))
except socket.error as msg:
    print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
    sys.exit()
print 'Socket bind complete'&lt;/pre&gt;&lt;h4&gt;The application opens a hard-coded host name and does receive it from the user&lt;/h4&gt;&lt;pre&gt;import socket
import sys

HOST = ''   # Symbolic name, meaning all available interfaces
PORT = 8888 # Arbitrary non-privileged port
	 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print 'Socket created'
	 
#Bind socket to local host and port
try:
    s.bind((HOST, PORT))
except socket.error as msg:
    print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
    sys.exit()
print 'Socket bind complete'&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application opens a network socket using a port number inputed by the user&lt;/h4&gt;&lt;pre&gt;public class ResourceInjection {
	public static void main(String[] args) {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter port number: ");
		int portNumber = Integer.parseInt(userInputScanner.nextLine());
		try {
			ServerSocket serverSocket = new ServerSocket(portNumber);
		} catch (Exception e) {
			System.err.println("Caught Exception: " + e.getMessage());
		}

	}
}&lt;/pre&gt;&lt;h4&gt;The application opens a hard-coded port number according to the user input&lt;/h4&gt;&lt;pre&gt;public class ResourceInjectionFixed {
	public static void main(String[] args) {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter port name: ");
		String portName = userInputScanner.nextLine();
		int portNum;
		switch (portName) {
		case "ftps":
			portNum = 989;
			break;
		case "ftp":
			portNum = 20;
			break;
		case "smtp":
			portNum = 25;
			break;
		default:
			portNum = 80;
		}
		try {
			ServerSocket serverSocket = new ServerSocket(portNum);
		} catch (Exception e) {
			System.err.println("Caught Exception: " + e.getMessage());
		}
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3469</key><name>Find_DB_Out_SQLanywhere</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3564</key><name>LDAP_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could arbitrarily engineer the application&amp;#8217;s LDAP queries. Depending on how the application is using LDAP, the attacker could potentially do any of the following:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Log in as another user&lt;/li&gt;
&lt;li&gt;Escalate privileges&lt;/li&gt;
&lt;li&gt;Steal information&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with an LDAP server, such as Active Directory, by sending a textual LDAP query or command. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain LDAP commands that would be interpreted as such by the LDAP server.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application uses the "user" field string from an HttpRequest to communicate with an LDAP server
      &lt;/h4&gt;&lt;pre&gt;

public class LDAPInjection
{
        public void foo(HttpRequest Request, DirectorySearcher searcher)
        {
                string userName = Request.QueryString["user"];
                searcher.Filter = "(&amp;(samAccountName=" + userName + "))";
        }
}



      &lt;/pre&gt;&lt;h4&gt;
Potentially hazardous characters in the "user" string are removed
      &lt;/h4&gt;&lt;pre&gt;

public class LDAPInjectionFixed
{
        public void foo(HttpRequest Request, DirectorySearcher searcher)
        {
                string userName = Request.QueryString["user"];
                userName = Regex.Replace(userName, "^\\d{3}-\\d{3}-\\d{4}$", "");
                searcher.Filter = "(&amp;(samAccountName=" + userName + "))";
        }
}





      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3096</key><name>Find_DB_In_MSSQL</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3555</key><name>Find_Interactive_Outputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3427</key><name>Find_Replace</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3528</key><name>Find_DB_Out_SAP</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3476</key><name>Find_DB_In_SqlObject</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2870</key><name>Find_Empty_Strings</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3695</key><name>Find_Sanitize_Oracle</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3467</key><name>Find_DB_Out_DBO</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3577</key><name>Stored_LDAP_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could arbitrarily engineer the application&amp;#8217;s LDAP queries. Depending on how the application is using LDAP, the attacker could potentially do any of the following:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Log in as another user&lt;/li&gt;
&lt;li&gt;Escalate privileges&lt;/li&gt;
&lt;li&gt;Steal information&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with an LDAP server, such as Active Directory, by sending a textual LDAP query or command. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain LDAP commands that would be interpreted as such by the LDAP server.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application uses the "user" field string from an HttpRequest to communicate with an LDAP server
      &lt;/h4&gt;&lt;pre&gt;

public class LDAPInjection
{
        public void foo(HttpRequest Request, DirectorySearcher searcher)
        {
                string userName = Request.QueryString["user"];
                searcher.Filter = "(&amp;(samAccountName=" + userName + "))";
        }
}



      &lt;/pre&gt;&lt;h4&gt;
Potentially hazardous characters in the "user" string are removed
      &lt;/h4&gt;&lt;pre&gt;

public class LDAPInjectionFixed
{
        public void foo(HttpRequest Request, DirectorySearcher searcher)
        {
                string userName = Request.QueryString["user"];
                userName = Regex.Replace(userName, "^\\d{3}-\\d{3}-\\d{4}$", "");
                searcher.Filter = "(&amp;(samAccountName=" + userName + "))";
        }
}





      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3746</key><name>Find_HTTPServer_Inputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3970</key><name>Find_XXE_Expat</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2865</key><name>Find_DB_Heuristic</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2877</key><name>Find_Outputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3472</key><name>Find_DB_Out_Sybase</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3434</key><name>Find_DB_Out_MSSQL</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3429</key><name>Find_Web_Outputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3435</key><name>CxDefaultQuery</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3703</key><name>Find_Sanitize_Sybase</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3696</key><name>Find_Sanitize_Peewee</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3536</key><name>Find_DB_In_SQLAlchemy</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3535</key><name>Find_DB_In_SAP</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3552</key><name>Find_CGI_Outputs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3098</key><name>Find_XSS_Replace</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3532</key><name>Find_DB_In_OJDBC</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3459</key><name>Find_DB_Conn_ODBC</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3102</key><name>Connection_String_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could manipulate the application&amp;#8217;s connection string to its database or other server.Using simple tools and text editing, the attacker might be able do any of the following:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Damage application performance (by increasing the MIN POOL SIZE)&lt;/li&gt;
&lt;li&gt;Tamper with the network connection (for example, via TRUSTED CONNECTION)&lt;/li&gt;
&lt;li&gt;Direct the application to the attacker&amp;#8217;s bogus database&lt;/li&gt;
&lt;li&gt;Discover the password to the system account on the database (by a brute-force attack)&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;To communicate with its database or with another server (for example, Active Directory), the application dynamically constructs a connection string. This connection string includes concatenated user input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could be used to maliciously manipulate the connection string.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Ideally, avoid dynamically building connection strings. If it is necessary to dynamically build a connection string, try not to include user input. In any case use platform-provided utlities, such as .NET&amp;#8217;s SqlConnectionStringBuilder, or at least encode the validated input as appropriate for your platform.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application constructs a connection string using input from the user
      &lt;/h4&gt;&lt;pre&gt;

 class ConnectionStringInjection
{
        static void foo(Textbox textbox1, SqlConnectionStringBuilder bldr)
        {
                bldr.UserID = textbox1.Text;
                myConnection = new SqlConnection(bldr.ToString());
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The user input is first checked for malicious characters before adding to the connection string
      &lt;/h4&gt;&lt;pre&gt;

 class ConnectionStringInjectionFixed
{
        static void foo(Textbox textbox, SqlConnectionStringBuilder bldr)
        {
                bldr.UserID = textbox.Text.Replace("'", "");
                myConnection = new SqlConnection(bldr.ToString());
        }
}



      &lt;/pre&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;The application constructs a connection string using input from the user&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import cx_Oracle
print 'Insert your ID: '
userInput = stdin.readline()
connection = cx_Oracle.connect(userInput + '/password@99.999.9.99:PORT/SID')&lt;/pre&gt;&lt;h4&gt;The user inputed file number is turned to a string of that number before use&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import cx_Oracle
print 'Insert your ID: '
userInput = stdin.readline()
connection = cx_Oracle.connect(str(int(userInput)) + '/password@99.999.9.99:PORT/SID')&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application constructs a connection string using input from the user&lt;/h4&gt;&lt;pre&gt;public class ConnectionStringInjection {
	public static void main(String[] args) throws SQLException {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter url name: ");
		String connURL = userInputScanner.nextLine();
		Connection con = DriverManager.getConnection(connURL, "username", "password");
	}
}&lt;/pre&gt;&lt;h4&gt;The user input is translated to a predefined connection string&lt;/h4&gt;&lt;pre&gt;public class ConnectionStringInjectionFixed {
	public static void main(String[] args) throws SQLException {
		HashMap&lt;String, String&gt; sanitize = new HashMap&lt;String, String&gt;();
		sanitize.put("DB_url_1", "DB_url_1");
		sanitize.put("DB_url_2", "DB_url_2");
		sanitize.put("DB_url_3", "DB_url_3");
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter url name: ");
		String connURL = userInputScanner.nextLine();
		Connection con = DriverManager.getConnection(sanitize.get(connURL), "username", "password");
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3534</key><name>Find_DB_In_Peewee</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3529</key><name>Find_DB_Out_SQLAlchemy</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3560</key><name>Find_Encrypt</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3432</key><name>CxDefaultQuery</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3698</key><name>Find_Sanitize_SAP</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3530</key><name>Find_DB_In_ADOdb</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3699</key><name>Find_Sanitize_SQLAlchemy</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3692</key><name>Find_Sanitize_MySQL</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3112</key><name>DoS_by_Sleep</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could provide a very high sleep value, effectively causing a denial of service for a long period of time.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses a user-provided value to set its sleep period, without enforcing a limited range for this value.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Ideally, the sleep command&amp;#8217;s duration should not be be according to user input at all. It should be either hardcoded, defined in a configuration file, or dynamically calculated at runtime.&lt;/li&gt;
&lt;li&gt;If it is necessary to allow the user to define the sleep duration, this value MUST be checked and enforced to be within a predefined range of valid values.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application receives a timeout int from the user to be used as argument for Sleep(). This int could be a very big number.
      &lt;/h4&gt;&lt;pre&gt;

public class DosbySleep
{
        public void foo()
        {
                int sleep = int.Parse(HttpContext.Request.QueryString["timeout"]);
                Thread.Sleep(sleep);
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The int received is varified to be in an acceptable range.
      &lt;/h4&gt;&lt;pre&gt;

public class DosbySleep
{
        public void foo()
        {
                int sleep = int.Parse(HttpContext.Request.QueryString["timeout"]);
                if (sleep &gt; 1000)
		{
			sleep = 1000;
		}
		else if (sleep &lt;= 10)
                {
                        sleep = 10;
                }
                Thread.Sleep(sleep);
        }
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2884</key><name>Find_Strings</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3551</key><name>Find_DB_Connections</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3971</key><name>Find_XXE_Expat_Sanitizers</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3974</key><name>Find_XXE_lxml_Sanitizers</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3575</key><name>Filtering_Sensitive_Logs</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;link rel="stylesheet" href="main.css" type="text/css"&gt;
  &lt;title&gt;Regular expression Denial of Service (ReDoS)&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div class="definitions" id="TableWithRules"&gt;
&lt;table border="0" cellpadding="0" cellspacing="0" width="100%"&gt;
  &lt;tbody&gt;
    &lt;tr class="header"&gt;
      &lt;th colspan="2" valign="top" width="100%"&gt;
      &lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;Filtering Sensitive Logs&lt;/span&gt;&lt;/div&gt;
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;CWE
ID&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;10602&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
Are you accepting sensitive user data? Passwords, credit card numbers, etc. By default, Rails
stores all submitted parameters in plain text in the logs.
This sensitive input should be filtered, it doesn't show up in the log file.
&lt;br&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Demonstrative&lt;br&gt;Example&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
If we look at a user registration form and fill it in and register, we can then look in the
development log, we can see that all of the parameters we submitted in the form are stored in plain text:&lt;br&gt;&lt;br&gt;
      &lt;table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;pre&gt;

Processing UsersController#create (for 127.0.0.1 at 2009-01-02 10:13:13) [POST]
Parameters: {"user"=&gt;{"name"=&gt;"eifion", "password_confirmation"=&gt;&lt;b&gt;"secret"&lt;/b&gt;, "password"=&gt;&lt;b&gt;"secret"&lt;/b&gt;},
  "commit"=&gt;"Register", "authenticity_token"=&gt; "9efc03bcc37191d8a6dc3676e2e7890ecdfda0b5"}
User Create (0.5ms)   INSERT INTO "users" ("name", "updated_at", "password_confirmation",
  "password","created_at") VALUES('eifion', '2009-01-02 10:13:13', 'secret', 'secret',
  '2009-01-02 10:13:13')&lt;/pre&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;

	  &lt;br&gt;
The values we entered in the form are clearly visible in the log file and this obviously
raises security issues.
&lt;br&gt;&lt;br&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top" class="style1"&gt;&lt;b&gt;Potential Mitigations&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
&lt;p&gt;
Rails 1.2 introduced the &lt;b&gt;filter_parameter_logging&lt;/b&gt; command.
Putting this command in to the &lt;b&gt;ApplicationController&lt;/b&gt; allows us to filter parameters based on their name
&lt;br&gt;&lt;br&gt;
      &lt;table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;pre&gt;

class ApplicationController &lt; actioncontroller::base="" filter_parameter_logging="" "password"="" end=""&gt;&lt;/pre&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
&lt;br&gt;
Later versions of Rails have this line in the application controller by default, but commented out,
so we only have to uncomment it to use it. Well create another new user and see whats in the logs.
&lt;br&gt;&lt;br&gt;
      &lt;table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;pre&gt;

Processing UsersController#create (for 127.0.0.1 at 2009-01-02 11:02:33) [POST]
Parameters: {"user"=&gt;{"name"=&gt;"susan", "password_confirmation"=&gt;"&lt;b&gt;[FILTERED]&lt;/b&gt;", "password"=&gt;
  "&lt;b&gt;[FILTERED]&lt;/b&gt;"}, "commit"=&gt;"Register", "action"=&gt;"create", "authenticity_token"=&gt;
  "9efc03bcc37191d8a6dc3676e2e7890ecdfda0b5", "controller"=&gt;"users"}
User Create (0.4ms)   INSERT INTO "users" ("name", "updated_at", "password_confirmation",
  "password", "created_at") VALUES('susan', '2009-01-02 11:02:33', 'verysecret', 'verysecret',
  '2009-01-02 11:02:33')&lt;/pre&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
&lt;br&gt;
Now we see that our &lt;b&gt;create&lt;/b&gt; action has put &lt;b&gt;[FILTERED]&lt;/b&gt; in the log, rather than the password supplied.
The parameter logging will filter any parameter whose name contains the argument passed to it,
so in our case the &lt;b&gt;password_confirmation&lt;/b&gt; field is filtered too. We can still see the password in the
SQL statement in the log, however. This will only be a problem in development mode as by default this data
isnt stored to the log in production mode. Also, if we are hashing our passwords before storing them in the
database then the passwords wont be sent to the database as clear text and wont be seen in the log.
&lt;/p&gt;
    &lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;References&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;div class="references"&gt;
&lt;p&gt;ASCII Cast: Filtering Sensitive Logs - &lt;a href="http://asciicasts.com/episodes/9-filtering-sensitive-logs"&gt;http://asciicasts.com/episodes/9-filtering-sensitive-logs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rails Cast: Filtering Sensitive Logs - &lt;a href="http://railscasts.com/episodes/9-filtering-sensitive-logs"&gt;http://railscasts.com/episodes/9-filtering-sensitive-logs&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
    &lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div style="padding-top: 5px; padding-bottom: 5px; clear: right;" class="noprint" align="right"&gt;&lt;a class="backtop" href="#top"&gt;Back to
top&lt;/a&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3563</key><name>Find_LDAP_Sanitize</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2886</key><name>Find_URL_Encode</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3745</key><name>Find_HTTPServer_Log</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_3100</key><name>Code_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could run arbitrary code on the application server host. Depending on the application&amp;rsquo;s OS permissions,these could include:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Database access, such as reading or modifying sensitive data;&lt;/li&gt;
&lt;li&gt;File actions (read / create / modify / delete);&lt;/li&gt;
&lt;li&gt;Changing the website;&lt;/li&gt;
&lt;li&gt;Open a network connection to the attacker&amp;rsquo;s server;&lt;/li&gt;
&lt;li&gt;Decrypt secret data using the application's encryption keys;&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Start and stop system services;&lt;/li&gt;
&lt;li&gt;Complete server takeover.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application performs some action by creating and running code that includes untrusted data, which might be under control of a malicious user. If the data contains malicious code, the executed code could contain system-level activities engineered by an attacker, as though the attacker were running code directly on the application server.&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;The application should not compile, execute, or evaluate any untrusted code from any external source, including user input, uploaded files, or a database.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;If it is absolutely necessary to include external&amp;nbsp;data in dynamic execution, it is permissible to pass the data as parameters to the code, but do not execute user data directly. &amp;nbsp;&lt;/li&gt;
&lt;li&gt;If it is necessary to pass untrusted data to dynamic execution, enforce very strict data validation. For example, accept only integers between certain values.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Parameters should be limited to an allowed character set, and non-validated input should be dropped. In addition to characters, check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;If possible, always prefer to whitelist known and trusted input instead of comparing to a blacklist.&lt;/li&gt;
&lt;li&gt;Configure the application to run using a restricted user account that has no unnecessary privileges.&lt;/li&gt;
&lt;li&gt;If possible, isolate all dynamic execution to use a separate, dedicated user account that has privileges only for the specific operations and files used by dynamic execution, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;Prefer passing user data to pre-implemented script, e.g. in another isolated application.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;If the provided user data consists only of Python literals and literal containers, consider using&amp;nbsp;&lt;code&gt;ast.literal_eval()&lt;/code&gt; instead, or even the &lt;code&gt;json&lt;/code&gt; object.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;Dynamically Execute User Code&lt;/h4&gt;&lt;pre&gt;@app.route('/execute')
def execute_user_code_unsafe(): 
    user_code = request.args.get('code')
	result = eval(user_code)
	
	return result['value']&lt;/pre&gt;&lt;h4&gt;Safely Parse User's Literals&lt;/h4&gt;&lt;pre&gt;@app.route('/execute')
def execute_user_code_unsafe(): 
    user_code = request.args.get('code')
	result = ast.literal_eval(user_code)
	
	return result['value']
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule></rules>