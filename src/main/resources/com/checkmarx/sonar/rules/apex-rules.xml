<?xml version="1.0" encoding="UTF-8" standalone="yes"?><rules><rule><key>checkmarx_1021</key><name>Cookies_Scoping</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker can control the content of the cookie that the application sends to the upstream external web service. This might include embedding malicious values in the cookie, or even creating additional cookies which the attacker should not have access to. This may allow the attacker to override other sensitive cookies, such as user identifiers.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application calls an external web service (callouts), to serve some functionality. In order to call the upstream web service, the application creates an HTTP cookie and appends it to the outgoing request. However, the application also embeds unvalidated data that was received as input from the potentially malicious user. This unvalidated data is embedded directly into the request's HTTP header value as a simple string, with no filtering, and can include any arbitrary cookie data.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not trust unvalidated data, especially from user input.&lt;/li&gt;
&lt;li&gt;Always validate data before using it, or submitting it to an external component.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#160;Do not include any user input in callout cookies.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1018</key><name>Resource_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could open a backdoor enabling the attacker to connect directly to the application server, potentially leading to server takeover or other direct attacks.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application opens a network socket, for listening to incoming network connections. However, the application uses user input to define the socket, enabling an attacker to control it.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Don&amp;#8217;t allow a user to define parameters of network sockets.&lt;/div&gt;      
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1019</key><name>SOQL_SOSL_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span style="color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;"&gt;An attacker could directly access all of the system's data. Using simple tools and text editing, the attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span style="color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;"&gt;The application communicates with its database by sending a textual SOQL query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain SOQL&amp;nbsp;commands that would be interpreted as such by the database.&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;"&gt;
&lt;li style="box-sizing: border-box;"&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"&gt;
&lt;li style="box-sizing: border-box;"&gt;Data type&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;Size&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;Range&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;Format&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;Expected values.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1029</key><name>HttpSplitting</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Arbitrarily change the application server&amp;rsquo;s response header to a victim&amp;rsquo;s HTTP request by manipulating headers&lt;/li&gt;
&lt;li&gt;Arbitrarily change the application server&amp;rsquo;s response body by injecting two consecutive line breaks, which may result in Cross-Site Scripting (XSS) attacks&lt;/li&gt;
&lt;li&gt;Cause cache poisoning, potentially controlling any site&amp;rsquo;s HTTP responses going through the same proxy as this application.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Since user input is being used in an HTTP response header, an attacker could include NewLine characters to make the header look like multiple headers with engineered content, potentially making the response look like multiple responses (for example, by engineering duplicate content-length headers). This can cause an organizational proxy server to provide the second, engineered response to a victim&amp;#8217;s subsequent request; or, if the proxy server also performs response caching, the attacker can send an immediate subsequent request to another site, causing the proxy server to cache the engineered response as a response from this second site and to later serve the response to other users.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source (including cookies). Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Additionally, URL-encode all user input before including it in the response header.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1025</key><name>FLS_Create_Partial</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; information. By requesting information directly, such as by an account number, authorization may be bypassed and the attacker could steal confidential or restricted information (for example, a bank account balance), using a direct object reference.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application provides user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application concatenates the user input directly into the SQL query string, without any additional filtering. The application also does not perform any validation on the input, nor constrain it to a pre-computed list of acceptable values.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not concatenate user input directly into SQL queries.&amp;#160;&lt;/li&gt;
&lt;li&gt;Include a user-specific identifier as a filter in the WHERE clause of the SQL query.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1027</key><name>FLS_Update_Partial</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; information. By requesting information directly, such as by an account number, authorization may be bypassed and the attacker could steal confidential or restricted information (for example, a bank account balance), using a direct object reference.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application provides user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application concatenates the user input directly into the SQL query string, without any additional filtering. The application also does not perform any validation on the input, nor constrain it to a pre-computed list of acceptable values.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not concatenate user input directly into SQL queries.&amp;#160;&lt;/li&gt;
&lt;li&gt;Include a user-specific identifier as a filter in the WHERE clause of the SQL query.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1022</key><name>CRUD_Delete</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; information. By requesting information directly, such as by an account number, authorization may be bypassed and the attacker could steal confidential or restricted information (for example, a bank account balance), using a direct object reference.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application provides user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application concatenates the user input directly into the SQL query string, without any additional filtering. The application also does not perform any validation on the input, nor constrain it to a pre-computed list of acceptable values.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not concatenate user input directly into SQL queries.&amp;#160;&lt;/li&gt;
&lt;li&gt;Include a user-specific identifier as a filter in the WHERE clause of the SQL query.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1024</key><name>FLS_Create</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; information. By requesting information directly, such as by an account number, authorization may be bypassed and the attacker could steal confidential or restricted information (for example, a bank account balance), using a direct object reference.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application provides user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application concatenates the user input directly into the SQL query string, without any additional filtering. The application also does not perform any validation on the input, nor constrain it to a pre-computed list of acceptable values.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not concatenate user input directly into SQL queries.&amp;#160;&lt;/li&gt;
&lt;li&gt;Include a user-specific identifier as a filter in the WHERE clause of the SQL query.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1026</key><name>FLS_Update</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; information. By requesting information directly, such as by an account number, authorization may be bypassed and the attacker could steal confidential or restricted information (for example, a bank account balance), using a direct object reference.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application provides user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application concatenates the user input directly into the SQL query string, without any additional filtering. The application also does not perform any validation on the input, nor constrain it to a pre-computed list of acceptable values.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not concatenate user input directly into SQL queries.&amp;#160;&lt;/li&gt;
&lt;li&gt;Include a user-specific identifier as a filter in the WHERE clause of the SQL query.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1023</key><name>Dereferenced_Field</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;There are often cases where developers use VisualForce to display data derived from an SObject field in an indirect or processed form. For instance, a page controller may use internal logic to determine the appropriate value to display.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;CRUD and FLS are not automatically encfored on non SObject field, therefore it is necessary to call isAccessible() on the appropriate Describe Field Result in order to manually check the user's CRUD and FLS access.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;It is important to invoke isAccessible() when the data type is not SObject, because CRUD and FLS is not automatically enforced.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1001</key><name>Async_Future_Method_Inside_Loops</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;An exception will be thrown when method invocation exceed the&amp;nbsp;&lt;span style="font-family: Verdana, Arial, Helvetica, Geneva, sans-serif; font-size: 14.4px;"&gt;governor&amp;nbsp;&lt;/span&gt;limit&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Calling a @future method within a loop may throw an exception for exceeding a&amp;nbsp;&lt;span style="font-family: Verdana, Arial, Helvetica, Geneva, sans-serif; font-size: 14.4px;"&gt;governor&amp;nbsp;&lt;/span&gt;limit of only ten @future invocations per Apex transactions.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The @future method should be invoked with a batch of records so that it is only invoked once for all records it needs to process.&lt;/p&gt;
&lt;p&gt;It is important to make sure that the asynchronous methods are invoked in an efficient manner.&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1002</key><name>Bulkify_Apex_Methods_Using_Collections_In_Methods</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If code exceeds a governor limit, the associated governor issues a runtime exception that cannot be handled, which terminates the request.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The issue occurs when a class structured to&amp;nbsp;receive a single object in the method signature, and since the method performs a DML statement, it raises the risk of hitting a governor exception if that apex method is called within a loop from&amp;nbsp;other apex code.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Make sure any utility of helper methods are efficiently written to handle collections of records. This will avoid unnecessarily executing inefficient queries and DML operations.&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1005</key><name>Hardcoding_Ids</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Record IDs can change between enviroments, ergo code that uses hardcoded record type IDs may not work on a different enviroment.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;By hardcoding the ID, your Apex code is dependent on that specific ID existing in the org in order for the logic to function correctly.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;It is essential to avoid hardcoding IDs. By ensuring no hardcoded IDs are stored in the Apex code, you are making the code much more dynamic and flexible - allowing that it can be deployed safely to different enviroments.&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1004</key><name>DML_Statements_Inside_Loops</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If code exceeds a governor limit, the associated governor issues a runtime exception that cannot be handled, which terminates the request.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The issue occurs when a class structured to&amp;nbsp;receive a single object in the method signature, and since the method performs a DML statement, it raises the risk of hitting a governor exception if that apex method is called within a loop from&amp;nbsp;other apex code.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Make sure any utility of helper methods are efficiently written to handle collections of records. This will avoid unnecessarily executing inefficient queries and DML operations.&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1008</key><name>Hardcoding_References_To_Static_Resources</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Refering to static resources with a hardcoded path is a bad practice.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Force.com manages internally the statis resources and the URL to access the&amp;nbsp;resources is dynamic.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Make sure your VisualForce markup does not have any hardcoded references to static resources.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1011</key><name>Multiple_Trigger_On_same_sObject</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Multiple triggers on the same sObject may lead to reaching the limit of the governors.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If two Apex triggers execute when an Account is inserted, the total number of DML statements allowed is 20 across both trigger transactions.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;It is important to make sure that the triggers avoid redundant logic, queries, DML statements, or SOSL searches. In the scenario where multiple triggers are desired, from a code architecture perspective, the use of static variables and methods is recommended to reference shared queries or common logic.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1012</key><name>Queries_With_No_Where_Or_Limit_Clause</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Return of too much data may reduce the performance of the program and increase the latency accordingly.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;WHERE and LIMIT caluses' responsibility is to provide the most specific and relevant result.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;It is important to avoid querying for all records in a given object when you only need a subset of records to operate against.&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1014</key><name>SOSL_SOQL_Statments_Inside_Loops</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If code exceeds a governor limit, the associated governor issues a runtime exception that cannot be handled, which terminates the request.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The issue occurs when a class structured to&amp;nbsp;receive a single object in the method signature, and since the method performs a DML statement, it raises the risk of hitting a governor exception if that apex method is called within a loop from&amp;nbsp;other apex code.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Make sure any utility of helper methods are efficiently written to handle collections of records. This will avoid unnecessarily executing inefficient queries and DML operations.&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1017</key><name>Reflected_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could bypass the regular channels&amp;#160;made by the system to avoid Cross-Site Scripting (XSS) attacks in order to inject JavaScript or HTML code. By using social engineering to cause a user to access the website with injection inputs, such as a URL with engineered session attributes, causing the browser to rewrite web pages.&amp;#160;The attacker can then pretend to be the original website, which would enable the attacker to steal the user's session, request the user&amp;#8217;s credentials, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website's action.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application web page includes data from a client-side controlled data&amp;#160;(including the page session). The user input is embedded in the page, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary client-side controlled input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;Secure-Coding Approach&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;Fully encode all dynamic data before embedding it in the webpage. Encoding should be context-sensitive. For example:&lt;br /&gt;
&lt;ol&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content.&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values.&lt;/li&gt;
&lt;li&gt;JavaScript encoding for JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;
It is recommended to use the known libraries for encoding output, such as ESAPI.&lt;/div&gt;      
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1020</key><name>Stored_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could bypass the regular channels&amp;#160;made by the system to avoid Cross-Site Scripting (XSS) attacks in order to inject JavaScript or HTML code. By using social engineering to cause a user to access the website with injection inputs, such as a URL with engineered session attributes, causing the browser to rewrite web pages.&amp;#160;The attacker can then pretend to be the original website, which would enable the attacker to steal the user's session, request the user&amp;#8217;s credentials, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website's action.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application web page includes data from a client-side controlled data&amp;#160;(including the page session). The user input is embedded in the page, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary client-side controlled input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;Secure-Coding Approach&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;Fully encode all dynamic data before embedding it in the webpage. Encoding should be context-sensitive. For example:&lt;br /&gt;
&lt;ol&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content.&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values.&lt;/li&gt;
&lt;li&gt;JavaScript encoding for JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;
It is recommended to use the known libraries for encoding output, such as ESAPI.&lt;/div&gt;      
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1028</key><name>Frame_Spoofing</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could bypass the regular channels&amp;#160;made by the system to avoid Cross-Site Scripting (XSS) attacks in order to inject JavaScript or HTML code. By using social engineering to cause a user to access the website with injection inputs, such as a URL with engineered session attributes, causing the browser to rewrite web pages.&amp;#160;The attacker can then pretend to be the original website, which would enable the attacker to steal the user's session, request the user&amp;#8217;s credentials, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website's action.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application web page includes data from a client-side controlled data&amp;#160;(including the page session). The user input is embedded in the page, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary client-side controlled input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;Secure-Coding Approach&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;Fully encode all dynamic data before embedding it in the webpage. Encoding should be context-sensitive. For example:&lt;br /&gt;
&lt;ol&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content.&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values.&lt;/li&gt;
&lt;li&gt;JavaScript encoding for JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;
It is recommended to use the known libraries for encoding output, such as ESAPI.&lt;/div&gt;      
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1013</key><name>Something_In_Loop</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1015</key><name>Test_Methods_With_No_Assert</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div&gt;&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;

&lt;html&gt;
&lt;head&gt;
  &lt;link rel="stylesheet" href="main.css" type="text/css"&gt;
  &lt;title&gt;Test Methods with no Asserts&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div class="definitions" id="TableWithRules"&gt;
&lt;table border="0" cellpadding="0" cellspacing="0" width="100%"&gt;
  &lt;tbody&gt;
    &lt;tr class="header"&gt;
      &lt;th colspan="2" valign="top" width="100%"&gt;
      &lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;Test Methods with no Asserts&lt;/span&gt;&lt;/div&gt;
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;CWE ID&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;10542&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;&lt;p&gt;This rule identifies Apex Test Methods that do not Assert that the code behaves properly.
      Verifying that your code works as you expect it to work is the most important part of unit testing. It is important to ensure that all test methods use the System.assert methods to prove that the code behaves as expected.
      It is also one of the things that Force.com developers commonly neglect. Unit tests that do not verify the results of the code are not true unit tests. They are commonly referred to as smoke tests, which aren't nearly as effective or informative as true unit tests.
      A good way to tell if unit tests are properly verifying results is to look for liberal use of the System.assert() methods. If you do not use any System.assert() method calls, then the tests are not verifying results properly. &lt;/p&gt;
     &lt;br&gt;
&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Demonstrative&lt;br&gt;
Examples&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;


      &lt;p&gt;This first example illustrates a Apex Test Method that invokes an Opportunity trigger, but the test method does not Assert the unit test's expected behavior.
      &lt;/p&gt;
      &lt;table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;Apex Trigger&lt;pre&gt;trigger updateParentAccountWithOpportunityName on Opportunity (after insert) {

    // Create a Map from Account Ids to Opportunities.
    Map&lt;code&gt;&amp;lt;&lt;/code&gt;Id, Opportunity&gt; accountIdOpportunityMap = new Map&lt;code&gt;&amp;lt;&lt;/code&gt;Id, Opportunity&gt;();

    for(Opportunity o : Trigger.new){
        accountIdOpportunityMap.put(o.AccountId, o);
    }

    // Create a list of Accounts to Update.
    List&lt;code&gt;&amp;lt;&lt;/code&gt;Account&gt; accounts = new List&lt;code&gt;&amp;lt;&lt;/code&gt;Account&gt;();

    for(Account a : [SELECT Id, Most_Recently_Created_Opportunity_Name__c
                     FROM Account
                     WHERE Id IN :accountIdOpportunityMap.keySet()]){
        a.Most_Recently_Created_Opportunity_Name__c =
			((Opportunity) accountIdOpportunityMap.get(a.Id)).Name;
        accounts.add(a);
    }

    update accounts;
}
            &lt;/pre&gt;
            &lt;br&gt;Apex Test Method class annonated with @isTest. &lt;pre&gt;
@isTest
private class UpdateParentAccountWithOpptyNameTest{
  static testMethod void testUpdateParentAccount(){

    // Set up the Account record.
    Account a = new Account(Name='Test Account');
    insert a;

    // Verify that the initial state is as expected.
    a = [SELECT Name, Most_Recently_Created_Opportunity_Name__c
         FROM Account
         WHERE Id = :a.Id];

    // Set up the Opportunity record.
    String opportunityName = 'My Opportunity';
    Opportunity o = new Opportunity(AccountId=a.Id, Name=opportunityName,
				StageName='Prospecting', CloseDate=Date.today());

    // Cause the Trigger to execute.
    insert o;

    // BAD: No Assertions to verify the trigger behavior did what it was supposed to...

  }
}&lt;/pre&gt;
&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;
The problem with the previous example is that the test method does not verify the results of the unit test.
The test method does properly setup all the data required for the test by inserting both the Account and Opportunity records.
But this test method doesn't Assert that the Opportunity trigger properly executed. The trigger should have updated the associated Account record and updated the Most_Recently_Created_Opportunity_Name__c field.
By applying Assertions in the test method, you can rest assured that the trigger properly executed the code as expected.
&lt;br&gt;
     &lt;br&gt; &lt;p&gt;This second example updates the Apex Test Method and uses System.assert() methods to verify the unit test code behaved properly.
      &lt;/p&gt;
      &lt;table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;pre&gt;@isTest
private class UpdateParentAccountWithOpptyNameTest{
  static testMethod void testUpdateParentAccount(){

    // Set up the Account record.
    Account a = new Account(Name='Test Account');
    insert a;

    // Verify that the initial state is as expected.
    a = [SELECT Name, Most_Recently_Created_Opportunity_Name__c
         FROM Account
         WHERE Id = :a.Id];

    System.assertEquals(null, a.Most_Recently_Created_Opportunity_Name__c);


    // Set up the Opportunity record.
    String opportunityName = 'My Opportunity';
    Opportunity o = new Opportunity(AccountId=a.Id, Name=opportunityName,
				StageName='Prospecting', CloseDate=Date.today());

    // Cause the Trigger to execute.
    insert o;

    // Verify that the results are as expected.
    a = [SELECT Name, Most_Recently_Created_Opportunity_Name__c
         FROM Account
         WHERE Id = :a.Id];

	System.assertEquals(opportunityName, a.Most_Recently_Created_Opportunity_Name__c);

  }
}&lt;/pre&gt;
&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;
Notice that this unit testing code explicitly verifies that the trigger performed the action that we expected. &lt;br&gt;
&lt;br&gt;
The most important aspect of well-written unit tests is that the unit tests must be thorough.
The Force.com platform requires 75% code coverage, but this is a minimum and should not be your end goal.
You should only be satisfied with your unit tests when you are confident that the unit tests thoroughly verify that your code works as we expect it to work.
To do this, your tests must use the various System.assert()  calls. Unit tests should exercise the expected as well as the unexpected conditions in your code.
&lt;br&gt;
      &lt;br&gt;

      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;

    &lt;tr&gt;







   &lt;!--
    &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Potential&lt;br&gt;
Mitigations&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;Here is a recommended list of solutions:
      	&lt;ul&gt;
      	&lt;li&gt;Remove DML Statements from inside a loop&lt;/li&gt;

      	&lt;/ul&gt;
 &lt;/p&gt;


      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;

    &lt;tr&gt;

    --&gt;






      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;References&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;

      &lt;a href="http://wiki.developerforce.com/index.php/An_Introduction_to_Apex_Code_Test_Methods"&gt;An Introduction to Apex Code Test Methods&lt;/a&gt;&lt;br&gt;
      &lt;br&gt;
      &lt;a href="http://wiki.developerforce.com/index.php/How_to_Write_Good_Unit_Tests"&gt;How to Write Good Unit Tests&lt;/a&gt;&lt;br&gt;
      &lt;br&gt;
      &lt;a href="http://www.salesforce.com/us/developer/docs/apexcode/index_Left.htm#StartTopic=Content%2Fapex_testing_best_practices.htm|SkinName=webhelp"&gt;Testing Best Practices&lt;/a&gt;&lt;br&gt;
      &lt;br&gt;
      &lt;a href="http://www.salesforce.com/us/developer/docs/apexcode/index.htm"&gt;Apex Developer's Guide&lt;/a&gt;&lt;br&gt;
      &lt;br&gt;
      &lt;/td&gt;

    &lt;/tr&gt;
  &lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div style="padding-top: 5px; padding-bottom: 5px; clear: right;" class="noprint" align="right"&gt;&lt;a class="backtop" href="#top"&gt;Back to
top&lt;/a&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;

&lt;/div&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1009</key><name>HTTP_Callouts</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1016</key><name>Use_Of_Ajax_Toolkit</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1007</key><name>Hardcoding_Of_Trigger_Old</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div&gt;&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;

&lt;html&gt;

&lt;head&gt;

  &lt;link rel="stylesheet" href="main.css" type="text/css"&gt;

  &lt;title&gt;Hardcoding of Trigger.old[0]&lt;/title&gt;

&lt;/head&gt;

&lt;body&gt;



&lt;div class="definitions" id="TableWithRules"&gt;

&lt;table border="0" cellpadding="0" cellspacing="0" width="100%"&gt;

  &lt;tbody&gt;

    &lt;tr class="header"&gt;

      &lt;th colspan="2" valign="top" width="100%"&gt;

      &lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;Hardcoding of Trigger.old[0]&lt;/span&gt;&lt;/div&gt;

      &lt;/th&gt;

    &lt;/tr&gt;

    &lt;tr&gt;

      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;CWE ID&lt;/b&gt;&lt;/td&gt;

      &lt;td valign="top" width="100%"&gt;10534&lt;/td&gt;

    &lt;/tr&gt;

    &lt;tr&gt;

      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;

      &lt;td valign="top" width="100%"&gt;This rule identifies the hardcoding of Trigger.old[0] in Apex code. This hardcoding is a common bad practice. It could cause both functional and scalability issues when the trigger tries to operate against more than one record.
      Bulkifying Apex code refers to the concept of making sure the code properly handles more than one record at a time. When a batch of records initiates Apex, a single instance of that Apex code is executed, but it needs to handle all of the records in that given batch.
      There are several ways a bulk operation could cause more than a single record to invoke an apex transaction such as the Force.com Web Services API, data importing, mass actions such as record owner changes, and recursive Apex methods and triggers that invoke bulk DML statements.
      Therefore, if a batch of records invokes the the same Apex code, all of those records need to be processed and not just hardcoding the processing of a single record.  &lt;br&gt;&lt;br&gt;

&lt;br&gt;

&lt;/td&gt;

    &lt;/tr&gt;



    &lt;tr&gt;

      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Demonstrative&lt;br&gt;

Examples&lt;/b&gt;&lt;/td&gt;

      &lt;td valign="top" width="100%"&gt;Here is an example of poorly written code that only handles one record: &lt;br&gt;

      &lt;br&gt;

      &lt;table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2"&gt;

        &lt;tbody&gt;

          &lt;tr&gt;

            &lt;td&gt;&lt;pre&gt;trigger accountTestTrggr on Account (before update) {

   /*
     This only handles the first record in the Trigger.new collection
     But if more than one Account initiated this trigger, those additional records
     will not be processed
   */
    if(Trigger.old[0]!=Trigger.newMap.get(Trigger.old[0].Id)){
			Trigger.new[0].Description = Trigger.new[0].Name + ':'
				+ Trigger.new[0].BillingState;
   }

}
&lt;/pre&gt;
&lt;/td&gt;

          &lt;/tr&gt;

        &lt;/tbody&gt;

      &lt;/table&gt;

      &lt;br&gt;

The issue is that only one Account record is handled because the code explicitly accesses only the first record in the Trigger.new collection by using the syntax Trigger.old[0]. To elaborate, if the trigger on the Account object were to be initiated because a bulk operation (api call, data importing, ect) tried to insert more than one Account or any other batch operation, only the first Account would have processed by the trigger logic and the remaining Accounts would not have been processed by the Trigger. &lt;br&gt;&lt;br&gt;Instead, the trigger should properly handle the entire collection of Accounts in the Trigger.new collection. Always assume the trigger needs to process a collection of records and avoid hardcoding Trigger.new[0], Trigger.old[0].
&lt;br&gt;&lt;br&gt;
Here is a sample of how to handle all incoming records:  &lt;br&gt;

      &lt;br&gt;

      &lt;table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2"&gt;

        &lt;tbody&gt;

          &lt;tr&gt;

            &lt;td&gt;&lt;pre&gt;trigger accountTestTrggr on Account (before update) {

   //Loop through all records in the Trigger.new collection
   for(Integer x=0;x&lt; trigger.new.size()="" ;x++){="" if(trigger.old[x]!="Trigger.newMap.get(Trigger.old[x].Id)){" concatenate="" the="" name="" and="" billingstate="" into="" the="" description="" field="" trigger.new[x].description="Trigger.new[x].Name" +="" ':'="" +="" trigger.new[x].billingstate;="" }="" }="" }=""&gt;&lt;/pre&gt;&lt;/td&gt;

          &lt;/tr&gt;

        &lt;/tbody&gt;

      &lt;/table&gt;

      &lt;br&gt;

Notice how this revised version of the code iterates across the entire Trigger.new  collection with a for loop. Now if this trigger is invoked with a single Account or a batch of Accounts, all records are properly processed. &lt;br&gt;

      &lt;br&gt;



      &lt;/td&gt;

    &lt;/tr&gt;



    &lt;tr&gt;

      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;References&lt;/b&gt;&lt;/td&gt;

      &lt;td valign="top" width="100%"&gt; &lt;a href="http://wiki.developerforce.com/index.php/Apex_Code_Best_Practices"&gt;Apex Best Practices&lt;/a&gt;&lt;br&gt;

      &lt;br&gt;

      &lt;a href="http://www.salesforce.com/us/developer/docs/apexcode/index.htm"&gt;Apex Developer's Guide&lt;/a&gt;&lt;br&gt;
      &lt;br&gt;

      &lt;/td&gt;


    &lt;/tr&gt;

  &lt;/tbody&gt;

&lt;/table&gt;

&lt;/div&gt;

&lt;div style="padding-top: 5px; padding-bottom: 5px; clear: right;" class="noprint" align="right"&gt;&lt;a class="backtop" href="#top"&gt;Back to

top&lt;/a&gt;&lt;/div&gt;

&lt;/body&gt;

&lt;/html&gt;
&lt;/div&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1003</key><name>Connect_Loop_To_DB</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1010</key><name>Multiple_Forms_In_Visualforce_Page</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div&gt;&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;

&lt;html&gt;
&lt;head&gt;
  &lt;link rel="stylesheet" href="main.css" type="text/css"&gt;
  &lt;title&gt;Multiple Forms in visualforce page&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div class="definitions" id="TableWithRules"&gt;
&lt;table border="0" cellpadding="0" cellspacing="0" width="100%"&gt;
  &lt;tbody&gt;
    &lt;tr class="header"&gt;
      &lt;th colspan="2" valign="top" width="100%"&gt;
      &lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;Multiple Forms in visualforce page&lt;/span&gt;&lt;/div&gt;
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;CWE ID&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;10537&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;TODO
&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Demonstrative&lt;br&gt;
Examples&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;


      &lt;p&gt;TODO
      &lt;/p&gt;
      &lt;table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;pre&gt;TODO&lt;/pre&gt;
&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;
TODO      &lt;br&gt;
&lt;br&gt;
      &lt;table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;TODO
&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;
TODO

&lt;br&gt;
      &lt;br&gt;

      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;

    &lt;tr&gt;







   &lt;!--
    &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Potential&lt;br&gt;
Mitigations&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;Here is a recommended list of solutions:
      	&lt;ul&gt;
      	&lt;li&gt;Remove DML Statements from inside a loop&lt;/li&gt;

      	&lt;/ul&gt;
 &lt;/p&gt;


      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;

    &lt;tr&gt;

    --&gt;






      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;References&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;&lt;a href="http://wiki.developerforce.com/index.php/Apex_Code_Best_Practices"&gt;Apex Best Practices&lt;/a&gt;&lt;br&gt;
      &lt;br&gt;
      &lt;a href="http://wiki.developerforce.com/index.php/Governors_in_Apex_Code"&gt;Governors in Apex Code&lt;/a&gt;&lt;br&gt;
      &lt;br&gt;
      &lt;a href="http://www.salesforce.com/us/developer/docs/apexcode/index_Left.htm#StartTopic=Content/apex_gov_limits.htm"&gt;Apex Governor Limits&lt;/a&gt;&lt;br&gt;
      &lt;br&gt;

      &lt;/td&gt;

    &lt;/tr&gt;
  &lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div style="padding-top: 5px; padding-bottom: 5px; clear: right;" class="noprint" align="right"&gt;&lt;a class="backtop" href="#top"&gt;Back to
top&lt;/a&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;


&lt;/div&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1006</key><name>Hardcoding_Of_Trigger_New</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div&gt;&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;

&lt;html&gt;

&lt;head&gt;

  &lt;link rel="stylesheet" href="main.css" type="text/css"&gt;

  &lt;title&gt;Hardcoding of Trigger.new[0]&lt;/title&gt;

&lt;/head&gt;

&lt;body&gt;



&lt;div class="definitions" id="TableWithRules"&gt;

&lt;table border="0" cellpadding="0" cellspacing="0" width="100%"&gt;

  &lt;tbody&gt;

    &lt;tr class="header"&gt;

      &lt;th colspan="2" valign="top" width="100%"&gt;

      &lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;Hardcoding of Trigger.new[0]&lt;/span&gt;&lt;/div&gt;

      &lt;/th&gt;

    &lt;/tr&gt;

    &lt;tr&gt;

      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;CWE ID&lt;/b&gt;&lt;/td&gt;

      &lt;td valign="top" width="100%"&gt;10533&lt;/td&gt;

    &lt;/tr&gt;

    &lt;tr&gt;

      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;

      &lt;td valign="top" width="100%"&gt;This rule identifies the hardcoding of Trigger.new[0] in Apex code. This hardcoding is a common bad practice. It could cause both functional and scalability issues when the trigger tries to operate against more than one record.
      Bulkifying Apex code refers to the concept of making sure the code properly handles more than one record at a time. When a batch of records initiates Apex, a single instance of that Apex code is executed, but it needs to handle all of the records in that given batch.
      There are several ways a bulk operation could cause more than a single record to invoke an apex transaction such as the Force.com Web Services API, data importing, mass actions such as record owner changes, and recursive Apex methods and triggers that invoke bulk DML statements.
      Therefore, if a batch of records invokes the the same Apex code, all of those records need to be processed and not just hardcoding the processing of a single record.  &lt;br&gt;&lt;br&gt;

&lt;br&gt;
&lt;/td&gt;

    &lt;/tr&gt;



    &lt;tr&gt;

      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Demonstrative&lt;br&gt;

Examples&lt;/b&gt;&lt;/td&gt;

      &lt;td valign="top" width="100%"&gt;Here is an example of poorly written code that only handles one record because of Trigger.new[0] hardcoding: &lt;br&gt;

      &lt;br&gt;

      &lt;table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2"&gt;

        &lt;tbody&gt;

          &lt;tr&gt;

            &lt;td&gt;&lt;pre&gt;trigger accountTestTrggr on Account (before update) {

   /*
     This only handles the first record in the Trigger.new collection
     But if more than one Account initiated this trigger, those additional records
     will not be processed
   */
   Account a = Trigger.new[0];

   //Concatenate the Name and billingState into the Description field
   a.Description = a.Name + ':' + a.BillingState
}
&lt;/pre&gt;
&lt;/td&gt;

          &lt;/tr&gt;

        &lt;/tbody&gt;

      &lt;/table&gt;

      &lt;br&gt;
The problem is that only one Account record is handled because the code explicitly accesses only the first record in the Trigger.new collection by using the syntax Trigger.new[0].
To elaborate, if the trigger on the Account object were to be initiated because the bulk operation tried to insert more than one Account or any other batch operation, only the first Account would have processed by the trigger logic and the remaining Accounts would not have been processed by the Trigger. &lt;br&gt;&lt;br&gt;Instead, the trigger should properly handle the entire collection of Accounts passed into the trigger. Always assume the trigger needs to process a collection of records and avoid hardcoding Trigger.new[0].
&lt;br&gt;&lt;br&gt;
Here is a sample of how to handle all incoming records:  &lt;br&gt;

      &lt;br&gt;

      &lt;table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2"&gt;

        &lt;tbody&gt;

          &lt;tr&gt;

            &lt;td&gt;&lt;pre&gt;trigger accountTestTrggr on Account (before update) {
   //Loop through all records in the Trigger.new collection
   for(Account a: Trigger.new){
      //Concatenate the Name and billingState into the Description field
      a.Description = a.Name + ':' + a.BillingState
   }

}
&lt;/pre&gt;&lt;/td&gt;

          &lt;/tr&gt;

        &lt;/tbody&gt;

      &lt;/table&gt;

      &lt;br&gt;

Notice how this revised version of the code iterates across the entire Trigger.new collection with a for loop. Now if this trigger is invoked with a single Account or a batch of Accounts, all records are properly processed. &lt;br&gt;

      &lt;br&gt;



      &lt;/td&gt;

    &lt;/tr&gt;



    &lt;tr&gt;

      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;References&lt;/b&gt;&lt;/td&gt;

      &lt;td valign="top" width="100%"&gt;

      &lt;a href="http://wiki.developerforce.com/index.php/Apex_Code_Best_Practices"&gt;Apex Best Practices&lt;/a&gt;&lt;br&gt;

      &lt;br&gt;

      &lt;a href="http://www.salesforce.com/us/developer/docs/apexcode/index.htm"&gt;Apex Developer's Guide&lt;/a&gt;&lt;br&gt;
      &lt;br&gt;


      &lt;/td&gt;


    &lt;/tr&gt;

  &lt;/tbody&gt;

&lt;/table&gt;

&lt;/div&gt;

&lt;div style="padding-top: 5px; padding-bottom: 5px; clear: right;" class="noprint" align="right"&gt;&lt;a class="backtop" href="#top"&gt;Back to

top&lt;/a&gt;&lt;/div&gt;

&lt;/body&gt;

&lt;/html&gt;

&lt;/div&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_53</key><name>Parameter_Tampering</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; information. By requesting information directly, such as by an account number, authorization may be bypassed and the attacker could steal confidential or restricted information (for example, a bank account balance), using a direct object reference.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application provides user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application concatenates the user input directly into the SQL query string, without any additional filtering. The application also does not perform any validation on the input, nor constrain it to a pre-computed list of acceptable values.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not concatenate user input directly into SQL queries.&amp;#160;&lt;/li&gt;
&lt;li&gt;Include a user-specific identifier as a filter in the WHERE clause of the SQL query.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2258</key><name>Use_of_Broken_or_Risky_Cryptographic_Algorithm</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Using a weak or broken algorithm ruins the protection granted by using cryptographic mechanisms in the first place, harming the confidentiality or integrity of sensitive user data. This could allow an attacker to steal secret information, alter sensitive data, or forge the source of modified messages.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application code specifies the name of the selected cryptographic algorithm, either via a String argument, a factory method, or a specific implementation class. These algorithms have fatal cryptographic weaknesses, that make it trivial to break in a reasonable timeframe. Strong algorithms should withstand attacks far beyond the realm of possible.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Only use strong, approved cryptographic algorithms, including AES, RSA, ECC, and SHA-256 respectively, amongst others.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Do not use weak algorithms that are considered completely broken, such as DES, RC4, and MD5, amongst others.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Avoid, where possible, using legacy algorithms that are not considered "future-proof" with sufficient safety margins, even though they are considered "safe enough" for today. This includes algorithms that are weaker than they should be, and have stronger replacements, even if they are not yet fatally broken - such as SHA-1, 3DES,&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Consider using a relevant official set of classifications, such as NIST or ENISA. If possible, use only FIPS 140-2 certified algorithm implementations.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1032</key><name>Sharing_With_Controller</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Without proper restrictions it is&amp;nbsp;possible to leak data&amp;nbsp;and&amp;nbsp;expose restricted information to a user without the proper clearance.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The force plafform makes extensive use of data sharing rules. Each object can have unique permissions for which users and profiles can read, create, edit and delete.&lt;/p&gt;
&lt;p&gt;These restrictions are encforced when using all standard controllers. When using a custom Apex class, the built-in profile permissions and field-level security restrictions are not respected during execution.&lt;/p&gt;
&lt;p&gt;The default behavior is that an Apex class has the ability to read and update all data with the organization. Because these rules are not enforced, developers who use Apex must take care that they do not inadvertently expose sensitive data that would normally be hidden from users by profile-based permissions, field-level security or organization-wide defaults.&lt;/p&gt;
&lt;p&gt;This is particulary true for Visualforce pages.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;1. Use the with sharing keywords when declaring a class to enforce the sharing rules that apply to the current user.&lt;/p&gt;
&lt;p&gt;2. Use the without sharing keywords when declaring a class to ensure that the sharing rules for the current user are not enforced.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1031</key><name>Sharing</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Without proper restrictions it is&amp;nbsp;possible to leak data&amp;nbsp;and&amp;nbsp;expose restricted information to a user without the proper clearance.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The force plafform makes extensive use of data sharing rules. Each object can have unique permissions for which users and profiles can read, create, edit and delete.&lt;/p&gt;
&lt;p&gt;These restrictions are encforced when using all standard controllers. When using a custom Apex class, the built-in profile permissions and field-level security restrictions are not respected during execution.&lt;/p&gt;
&lt;p&gt;The default behavior is that an Apex class has the ability to read and update all data with the organization. Because these rules are not enforced, developers who use Apex must take care that they do not inadvertently expose sensitive data that would normally be hidden from users by profile-based permissions, field-level security or organization-wide defaults.&lt;/p&gt;
&lt;p&gt;This is particulary true for Visualforce pages.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;1. Use the with sharing keywords when declaring a class to enforce the sharing rules that apply to the current user.&lt;/p&gt;
&lt;p&gt;2. Use the without sharing keywords when declaring a class to ensure that the sharing rules for the current user are not enforced.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1033</key><name>URL_Redirection_Attack</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to get a victim to click a link to the application, so that the user will be immediately redirected to another, arbitrary site. Users may think that they are still in the original application site. The second site may be offensive, contain malware, or, most commonly, be used for phishing.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application redirects the user&amp;#8217;s browser to a URL provided in a user request, without warning users that they are being redirected outside the site. An attacker could use social engineering to get a victim to click a link to the application with a parameter defining another site to which the application will redirect the user&amp;#8217;s browser, and the user may not be aware of the redirection.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Ideally, do not allow arbitrary URLs for redirection. Instead, create a server-side mapping from user-provided parameter values to legitimate URLs.&lt;/li&gt;
&lt;li&gt;If it is necessary to allow arbitrary URLs:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;For URLs inside the application site, first filter and encode the user-provided parameter, and then use it as a relative URL by prefixing it with the application site domain.&lt;/li&gt;
&lt;li&gt;For URLs outside the application (if necessary), use an intermediate disclaimer page to provide users with a clear warning that they are leaving your site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1801</key><name>Potential_URL_Redirection_Attack</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to get a victim to click a link to the application, so that the user will be immediately redirected to another, arbitrary site. Users may think that they are still in the original application site. The second site may be offensive, contain malware, or, most commonly, be used for phishing.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application redirects the user&amp;#8217;s browser to a URL provided in a user request, without warning users that they are being redirected outside the site. An attacker could use social engineering to get a victim to click a link to the application with a parameter defining another site to which the application will redirect the user&amp;#8217;s browser, and the user may not be aware of the redirection.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Ideally, do not allow arbitrary URLs for redirection. Instead, create a server-side mapping from user-provided parameter values to legitimate URLs.&lt;/li&gt;
&lt;li&gt;If it is necessary to allow arbitrary URLs:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;For URLs inside the application site, first filter and encode the user-provided parameter, and then use it as a relative URL by prefixing it with the application site domain.&lt;/li&gt;
&lt;li&gt;For URLs outside the application (if necessary), use an intermediate disclaimer page to provide users with a clear warning that they are leaving your site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1034</key><name>XSRF</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Logged in users may be tricked into actions as if they were originated by them, without any awareness at all of such actions.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Web browsers&amp;nbsp;send the relevant cookie to the server when making HTTP requests, when a user is already logged in then it's&amp;nbsp;possible to abuse the session and perform an action on his behalf, without any knowledge by the user.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Apex uses an internal anti-CSRF token to prevent this vulnerability. Every form includes a parameter containing a random string of characters as a hidden field. This feature will protect you when using all of the standard controllers and methods - but only for POST requests. GET requests are not protected with the anti-CSRF token.&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1035</key><name>XSRF_With_VF_Call</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Logged in users may be tricked into actions as if they were originated by them, without any awareness at all of such actions.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Web browsers&amp;nbsp;send the relevant cookie to the server when making HTTP requests, when a user is already logged in then it's&amp;nbsp;possible to abuse the session and perform an action on his behalf, without any knowledge by the user.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Apex uses an internal anti-CSRF token to prevent this vulnerability. Every form includes a parameter containing a random string of characters as a hidden field. This feature will protect you when using all of the standard controllers and methods - but only for POST requests. GET requests are not protected with the anti-CSRF token.&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_51</key><name>Escape_False_Warning</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Setting the escape to false may lead to XSS.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;By default, nearly all VisualForce tags escape the XSS vulnerabler characters. It is possible to disable the behavior by setting the optional attribute escape="false".&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;This option meant to allow developers the ability of bypassing the security restrictions for very specific uses. It is highly recommended not to use it on production.&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_54</key><name>Password_misuse</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The password may be leaked to an unauthorized party.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Passwords should not be retrieved from databases&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Do not retrieve passwords from the database.&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_56</key><name>Second_Order_SOQL_SOSL_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span style="color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;"&gt;An attacker could directly access all of the system's data. Using simple tools and text editing, the attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span style="color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;"&gt;The application communicates with its database by sending a textual SOQL query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain SOQL&amp;nbsp;commands that would be interpreted as such by the database.&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;"&gt;
&lt;li style="box-sizing: border-box;"&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"&gt;
&lt;li style="box-sizing: border-box;"&gt;Data type&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;Size&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;Range&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;Format&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;Expected values.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_57</key><name>Verbose_Error_Reporting</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Exposed details about the application&amp;#8217;s environment, users, or associated data (for example, stack trace) could enable an attacker to find another flaw and help the attacker to mount an attack.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application generates an error message including raw exceptions, either by not being handled, by explicit returning of the object, or by configuration. Exception details may include sensitive information that could leak out of the exception to the users.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Any method that could cause an exception should be wrapped in a try-catch block that:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Explicitly handles expected exceptions.&lt;/li&gt;
&lt;li&gt;Includes a default solution to explicitly handle unexpected exceptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Configure a global handler to prevent unhandled errors from leaving the application.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2366</key><name>SOQL_Formula_in_Where</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;!-- saved from url=(0085)https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qe --&gt;
&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;script src="./11213_files/JiffyStubs.js"&gt;&lt;/script&gt;&lt;meta http-equiv="PRAGMA" content="NO-CACHE"&gt;
&lt;meta http-equiv="Expires" content="Mon, 01 Jan 1990 12:00:00 GMT"&gt;

  &lt;link href="./11213_files/main.css" rel="stylesheet" type="text/css"&gt;
  &lt;title&gt;11213&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div class="definitions" id="TableWithRules"&gt;
&lt;table border="0" cellpadding="0" cellspacing="0" width="100%"&gt;
  &lt;tbody&gt;
    &lt;tr class="header"&gt;
      &lt;th colspan="2" valign="top" width="100%"&gt;
      &lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;WHERE clauses with formula fields or criteria that span objects&lt;/span&gt;&lt;/div&gt;
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;CWE
ID&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;11213&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;Avoid querying on formula fields.  Formula fields are computed in real-time and cannot be indexed.

From the "Using SOQL and SOSL" section of the Large Data Volume Best Practices Guide:
http://www.salesforce.com/us/developer/docs/ldv/salesforce_large_data_volumes_bp.pdf&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Demonstrative&lt;br&gt;
Examples&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;&lt;br&gt;&lt;br&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;span style="color: rgb(85, 85, 85); font-family: Arial, Helvetica, Verdana, sans-serif; font-size: 13px; "&gt;As an example, consider a custom formula field in the Opportunity object,&amp;nbsp;&lt;/span&gt;&lt;code style="font-size: 13px; font-family: inherit; color: rgb(85, 85, 85); "&gt;CloseDateAge&lt;/code&gt;&lt;span style="color: rgb(85, 85, 85); font-family: Arial, Helvetica, Verdana, sans-serif; font-size: 13px; "&gt;, with the following formula.&lt;br&gt;&lt;/span&gt;&lt;br&gt;&lt;pre&gt;TODAY() - CloseDate

&lt;span style="color: rgb(85, 85, 85); font-family: Arial, Helvetica, Verdana, sans-serif; font-size: 13px; "&gt;In the example below, CloseDateAge__c is a formula field that is used in a WHERE&amp;nbsp;clause&lt;/span&gt;&lt;span style="color: rgb(85, 85, 85); font-family: Arial, Helvetica, Verdana, sans-serif; font-size: 13px; "&gt;.&lt;/span&gt;

&lt;/pre&gt;
&lt;pre&gt;SELECT Id, Name
  FROM Opportunity
 WHERE CloseDateAge__c &amp;gt;  14
   AND CloseDateAge__c &amp;lt;= 21

&lt;span style="color: rgb(85, 85, 85); font-family: Arial, Helvetica, Verdana, sans-serif; font-size: 13px; "&gt;By default, Force.com formula fields don’t have indexes. So when you create and use a formula field such as&amp;nbsp;&lt;/span&gt;&lt;code style="font-size: 13px; font-family: inherit; color: rgb(85, 85, 85); "&gt;CloseDateAge&lt;/code&gt;&lt;span style="color: rgb(85, 85, 85); font-family: Arial, Helvetica, Verdana, sans-serif; font-size: 13px; "&gt;with very large objects (say, objects that have more than one million records), the SOQL queries and reports using the formula field as a filter might perform slower because your queries and reports have to perform full scans to find target records.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;&lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Potential&lt;br&gt;
Mitigations&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;&lt;br&gt;
      &lt;br&gt;
      &lt;/p&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;font color="#555555" face="Arial, Helvetica, Verdana, sans-serif" size="2"&gt;You can request salesforce.com Customer Support to create a custom index on a deterministic formula field.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color="#555555" face="Arial, Helvetica, Verdana, sans-serif" size="2"&gt;Before requesting an index for a formula field, carefully consider the tradeoffs. Every index you create requires maintenance overhead when DML operations update field values that are referenced by the underlying formula. This overhead can slow the performance of bulk data loads that use the formula field in some way.&lt;br&gt;&lt;/font&gt;&lt;font color="#555555" face="Arial, Helvetica, Verdana, sans-serif" size="2"&gt;&lt;br&gt;However, the CloseDateAge field given in the previous example is a non-deterministic formula field that Force.com cannot index. The field is not deterministic because the output value depends on the value of the current day, which changes every 24 hours, and factors in time zone differences.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color="#555555" face="Arial, Helvetica, Verdana, sans-serif" size="2"&gt;But when you use a SOQL query such as the following one, which is equivalent to the previous query, the Force.com query optimizer can consider taking full advantage of the index on the CloseDate field.&lt;/font&gt;&lt;/p&gt;
&lt;div class="syntaxhighlighter" id="highlighter_405863" style="width: 724.671875px; "&gt;
&lt;div class="lines" style=""&gt;
&lt;div class="line alt1" style=""&gt;
&lt;pre&gt;SELECT Id, Name
  FROM Opportunity
 WHERE ((CloseDate = LAST_N_DAYS:21)
   AND  (CloseDate &amp;lt; LAST_N_DAYS:14))&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Reviewing
For
      &lt;br&gt;
False&lt;br&gt;
Positives&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;The following conditions
may lead to false positives in the output of the report:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;This rule will purposely flag any query that has a formula field in a WHERE clause to so that you can request Salesforce Support to add an index to the field if necessary, or rewrite your query so that indexes can be applied.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;References&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;div class="references"&gt;
      &lt;p&gt;http://www.salesforce.com/us/developer/docs/ldv/salesforce_large_data_volumes_bp.pdf

http://blogs.developerforce.com/engineering/2013/03/force-com-formula-fields-indexes-and-performance-gotchas.html&lt;/p&gt;
      &lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div align="right" class="noprint" style="padding-top: 5px; padding-bottom: 5px; clear: right;"&gt;&lt;a class="backtop" href="https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qe#top"&gt;Back to
top&lt;/a&gt;&lt;/div&gt;

&lt;/body&gt;&lt;/html&gt;&lt;/div&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2769</key><name>Privacy_Violation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;A user&amp;#8217;s personal information could be stolen by a malicious programmer, or an attacker that intercepts the data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application sends user information, such as passwords, account information, or credit card numbers, outside the application, such as writing it to a local text or log file or sending it to an external web service.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Personal data should be removed before writing to logs or other files.&lt;/li&gt;
&lt;li&gt;Review the need and justification of sending personal data to remote web services.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_1030</key><name>inputText_Ignoring_FLS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Wrong permission in&amp;nbsp;input method may lead to exposure of data.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;InputField is the only input method that the FLS rules are applied&amp;nbsp;automatically.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Use inputField for automatically FLS enforcement.&lt;/p&gt;
&lt;p&gt;If inputText is necessary, use manual checks with isAccessible() etc in order to validate user permissions.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_52</key><name>Hardcoded_Password</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Hardcoded passwords expose the application to password leakage. If an attacker gains access to the source code, she will be able to steal the embedded passwords, and use them to impersonate a valid user. This could include impersonating end users to the application, or impersonating the application to a remote system, such as a database or a remote web service.&amp;#160;&lt;/div&gt;
&lt;div&gt;Once the attacker succeeds in impersonating the user or application, she will have full access to the system, and be able to do anything the impersonated identity could do.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application codebase&amp;#160;has string literal passwords embedded in the source code. This hardcoded value is used either to compare to user-provided credentials, or to authenticate downstream to a remote system (such as a database or a remote web service). &amp;#160;&lt;/div&gt;
&lt;div&gt;An attacker only needs to gain access to the source code to reveal the hardcoded password. Likewise, the attacker can reverse engineer the compiled application binaries, and easily retrieve the embedded password. Once found, the attacker can easily use the password in impersonation attacks, either directly on the application or to the remote system.&amp;#160;&lt;/div&gt;
&lt;div&gt;Furthermore, once stolen, this password cannot be easily changed to prevent further misuse, unless a new version of the application is compiled. Moreover, if this application is distributed to numerous systems, stealing the password from one system automatically allows a class break in to all the deployed systems.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not hardcode any secret data in source code, especially not passwords.&amp;#160;&lt;/li&gt;
&lt;li&gt;In particular, user passwords should be stored in a&amp;#160;database or directory service, and protected with a strong password hash (e.g. bcrypt, scrypt, PBKDF2, or Argon2). Do not compare user passwords with a hardcoded value.&amp;#160;&lt;/li&gt;
&lt;li&gt;Sytem passwords should be stored in a configuration file or the database, and protected with strong encryption (e.g. AES-256). Encryption keys should be securely managed, and not hardcoded.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2357</key><name>Batch_Apex_makes_outbound_call</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span style="font-family: Verdana, Arial, Helvetica, Geneva, sans-serif; font-size: 14.4px;"&gt;When making web service calls as part of your batch apex logic, instead consider using an ETL solution. Extract, transform and load solutions provide for better monitoring, error handling and scalability than batch apex.&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span style="font-family: Verdana, Arial, Helvetica, Geneva, sans-serif; font-size: 14.4px;"&gt;Batch Apex is an asynchronous process and performance is limited and can vary between runs and orgs. &amp;nbsp;Do not use batch apex if performance is important to the use case. &amp;nbsp;&amp;nbsp;Use an Extract, Transform, and Load solution that processes batches of data and can combine with other sources of data in a batch fashion, versus making web service calls for each record processed by batch apex. &amp;nbsp;ETL solutions provide for better monitoring, error handling and scalability than batch apex.&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2354</key><name>ActionPoller_Frequency_Check</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;ActionPoller usage with an interval of less than sixty seconds can cause scalability issues, especially if the action invoked performs DML actions.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;This rule purposely flags any usage of &amp;lt;apex:actionPoller interval="x"&amp;gt; where x is sixty seconds or less, to create awareness on the performance implications. If your code uses excessive resources, Salesforce Support may block your customer's usage of application to make sure that service levels for all customers are not impacted.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If polling logic is required, ensure that at every interval the logic that is invoked is not computationally intensive, access the database, etc.&lt;/p&gt;
&lt;p&gt;Instead of building polling logic use alternatives like the streaming API to update synchronous clients on asynchronous updates.&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2355</key><name>Ajax_Toolkit_From_VF</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If you are using the Ajax toolkit from a Visualforce page, you cannot use your partner token to access the API for Group Edition or Professional Edition because your partner token would be exposed in clear text if you a user examined the source code of a page in a browser.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2374</key><name>Empty_Catch_Blocks</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Catch blocks are meaningless unless they actually handle the exception.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2358</key><name>DmlOptions_Set_To_False</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span style="font-family: Verdana, Arial, Helvetica, Geneva, sans-serif; font-size: 14.4px;"&gt;Setting the optAllOrNone flag to false causes the system to attempt to commit records even if some of the records cause errors. This requires significant extra effort to retry all records individually and therefore slower DML performance when compared to error free DML. Be sure that proper error handling logic is implemented as an exception will not be thrown for DML errors. See: http://www.salesforce.com/us/developer/docs/apexcode/Content/apex_methods_system_database_dmloptions.htm#optAllOrNone&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2356</key><name>Batch_Apex_exists</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;There is no service level agreement for when a Batch Apex class is executed.&lt;/p&gt;
&lt;p&gt;Batch Apex is an asynchronous process and performance is limited and can vary between runs and orgs. Do not use batch apex if performance is important to the use case.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2359</key><name>Find_Exposed_Test_Data</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span style="font-family: Verdana, Arial, Helvetica, Geneva, sans-serif; font-size: 14.4px;"&gt;Test cases should not be dependent on the data in a sandbox or an organization. Using SeeAllData=true is not recommended. If your test class is version 23 or earlier, consider changing the version to 24 or later so that by default your test case cannot see the data in a sandbox or a production org. See: http://www.salesforce.com/us/developer/docs/apexcode/Content/apex_classes_annotation_isTest.htm&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span style="font-family: Verdana, Arial, Helvetica, Geneva, sans-serif; font-size: 14.4px;"&gt;Change the API&amp;nbsp;version of your Apex class to 24 or later and remove any SeeAllData=true settings. &amp;nbsp;Create test data independently of the org / sandbox where the test is executing.&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2360</key><name>Future_exists</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;@future provides no retry capability. If the method that is invoked encounters an exception make sure that a compensating action is not required. For example if a web service is invoked in an @future method, and an exception is encountered because the web service is not available, there is no automatic retry. Additionally there is no guarantee as to when an @future method executes. Also there are limits on the number of @future invocations, make sure that the number of @future invocations is in correct proportion to the number of users of your application.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div style="font-family: Verdana, Arial, Helvetica, Geneva, sans-serif; font-size: 14.4px;"&gt;&amp;nbsp;&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Any method that is annotated with @future should be evaluated carefully.&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2363</key><name>Outbound_Email_Send</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The number of automated emails sent to external addresses are intentionally limited to prevent the salesforce domain from being added to the lists of known SPAM servers. See "Outbound Email: Limits for Single and Mass Email" section here: http://www.salesforce.com/us/developer/docs/apexcode/Content/apex_gov_limits.htm&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If you are attempting to build a mass email engine on Force.com, this will not be successful. &amp;nbsp;Please build this on an external platform as the email limits on Force.com are purposely designed against using Force.com as a mass email engine.&lt;/p&gt;
&lt;p&gt;The Limits class in Apex can be used in your code to ensure that you are not approaching automated email limits:&lt;/p&gt;
&lt;p&gt;Limits.getEmailInvocations();&lt;/p&gt;
&lt;p&gt;Limits.getLimitEmailInvocations()&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2362</key><name>Old_API_Version</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;If you are in the Develop section of Setup in your DE org, you can edit the API version of your classes, Visualforce, etc. directly in the browser.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;If you are using Eclipse you can see the API version of your components in files named *-meta.xml.&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2370</key><name>SOQL_with_All_Fields_in_loop</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;!-- saved from url=(0085)https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qu --&gt;
&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;script src="./11209_files/JiffyStubs.js"&gt;&lt;/script&gt;&lt;meta http-equiv="PRAGMA" content="NO-CACHE"&gt;
&lt;meta http-equiv="Expires" content="Mon, 01 Jan 1990 12:00:00 GMT"&gt;

  &lt;link href="./11209_files/main.css" rel="stylesheet" type="text/css"&gt;
  &lt;title&gt;11209&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div class="definitions" id="TableWithRules"&gt;
&lt;table border="0" cellpadding="0" cellspacing="0" width="100%"&gt;
  &lt;tbody&gt;
    &lt;tr class="header"&gt;
      &lt;th colspan="2" valign="top" width="100%"&gt;
      &lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;SOQL with all fields (e.g. CreatedBy), created in a loop&lt;/span&gt;&lt;/div&gt;
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;CWE
ID&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;11209&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;Only add fields to a report, list view or SOQL query that are required.  Querying for all fields of an object will reduce performance.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Demonstrative&lt;br&gt;
Examples&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;&lt;br&gt;&lt;br&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;The example below uses describe to build a dynamic SOQL query. &amp;nbsp;This code arbitrarily adds all fields to the query even though they are not needed.&lt;br&gt;&lt;br&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;Map&amp;lt;String, Schema.SObjectField&amp;gt; fields = Schema.SobjectType.Foo__c.fields.getMap();&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp;String query = 'SELECT ';&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp;Schema.DescribeFieldResult fieldInfo = null;&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp;for (Schema.SObjectField field : fields.values()) {&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;fieldInfo = field.getDescribe();&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;query += ' ' + fieldInfo.getType().name() + ', ';&lt;/div&gt;
&lt;div&gt;&amp;nbsp;&amp;nbsp;&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp;}&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp; query += ' FROM Foo__c';&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp; List&amp;lt;Foo__c&amp;gt; flist = Database.query(query);&lt;br&gt;&lt;br&gt;&amp;nbsp;&lt;/div&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;&lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Potential&lt;br&gt;
Mitigations&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;&lt;br&gt;
      &lt;br&gt;
      &lt;/p&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;A better approach would be to only look for fields enumerated in a field set or a custom setting or for user-defined custom fields (fields that end in __c).&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Reviewing
For
      &lt;br&gt;
False&lt;br&gt;
Positives&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;The following conditions
may lead to false positives in the output of the report:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;This rule will flag any dynamic SOQL query that is built in a loop that arbitrarily adds all fields to the query. &amp;nbsp;This rule purposely identifies any of these scenarios to bring the performance impact to the attention of the developer.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;References&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;div class="references"&gt;
      &lt;p&gt;From the "Table of Best Practices" section of the Large Data Volume Best Practices Guide:

http://www.salesforce.com/us/developer/docs/ldv/salesforce_large_data_volumes_bp.pdf&lt;/p&gt;
      &lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div align="right" class="noprint" style="padding-top: 5px; padding-bottom: 5px; clear: right;"&gt;&lt;a class="backtop" href="https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qu#top"&gt;Back to
top&lt;/a&gt;&lt;/div&gt;

&lt;/body&gt;&lt;/html&gt;&lt;/div&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2371</key><name>SOSL_With_Where_Clause</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;!-- saved from url=(0085)https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qf --&gt;
&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;script src="./11212_files/JiffyStubs.js"&gt;&lt;/script&gt;&lt;meta http-equiv="PRAGMA" content="NO-CACHE"&gt;
&lt;meta http-equiv="Expires" content="Mon, 01 Jan 1990 12:00:00 GMT"&gt;

  &lt;link href="./11212_files/main.css" rel="stylesheet" type="text/css"&gt;
  &lt;title&gt;11212&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div class="definitions" id="TableWithRules"&gt;
&lt;table border="0" cellpadding="0" cellspacing="0" width="100%"&gt;
  &lt;tbody&gt;
    &lt;tr class="header"&gt;
      &lt;th colspan="2" valign="top" width="100%"&gt;
      &lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;WHERE clauses in SOSL will slow performance&lt;/span&gt;&lt;/div&gt;
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;CWE
ID&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;11212&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;SOSL queries for the data using a different technique but then takes the data and adds the where clause using SOQL to return the proper results. Follow SOQL best practices if a WHERE has to be added to SOSL and consider not having a WHERE clause for best performance.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Demonstrative&lt;br&gt;
Examples&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;&lt;br&gt;&lt;br&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;In the example below, SOSL can provided greater performance than SOQL by searching for a text patter.&amp;nbsp; When the WHERE&amp;nbsp;clause is specfied and the field used in the WHERE&amp;nbsp;clause is not indexed, the performance benefits of SOSL are reduced.&lt;br&gt;&lt;br&gt;List&amp;lt;List&amp;lt;SObject&amp;gt;&amp;gt; searchList = [FIND 'something*' IN ALL FIELDS RETURNING Foo__c (Id WHERE Field_A__c = 'Blah')];&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;&lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Potential&lt;br&gt;
Mitigations&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;&lt;br&gt;
      &lt;br&gt;
      &lt;/p&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;div&gt;Make sure the WHERE clause follows SOQL best practices, or do not specify a WHERE&amp;nbsp;clause in a SOSL search.&amp;nbsp; SOQL best practices are documented in the webinar Inside the Force.com Query Optimizer which is available at http://www.youtube.com/watch?v=mrOzUcycqZM.&lt;/div&gt;
&lt;div&gt;&amp;nbsp;&lt;/div&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Reviewing
For
      &lt;br&gt;
False&lt;br&gt;
Positives&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;The following conditions
may lead to false positives in the output of the report:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;This rule purposely identifies any SOSL statement that includes a WHERE&amp;nbsp;clause to make sure that the developer understands the potential performance impacts.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;References&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;div class="references"&gt;
      &lt;p&gt;http://www.youtube.com/watch?v=mrOzUcycqZM&lt;/p&gt;
      &lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div align="right" class="noprint" style="padding-top: 5px; padding-bottom: 5px; clear: right;"&gt;&lt;a class="backtop" href="https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qf#top"&gt;Back to
top&lt;/a&gt;&lt;/div&gt;

&lt;/body&gt;&lt;/html&gt;&lt;/div&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_55</key><name>Potential_Frame_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;No available description for this rule.&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2361</key><name>Warn_About_Viewstate_Size_Limit</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;!-- saved from url=(0085)https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qq --&gt;
&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;script src="./11211_files/JiffyStubs.js"&gt;&lt;/script&gt;&lt;meta http-equiv="PRAGMA" content="NO-CACHE"&gt;
&lt;meta http-equiv="Expires" content="Mon, 01 Jan 1990 12:00:00 GMT"&gt;

  &lt;link href="./11211_files/main.css" rel="stylesheet" type="text/css"&gt;
  &lt;title&gt;11211&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div class="definitions" id="TableWithRules"&gt;
&lt;table border="0" cellpadding="0" cellspacing="0" width="100%"&gt;
  &lt;tbody&gt;
    &lt;tr class="header"&gt;
      &lt;th colspan="2" valign="top" width="100%"&gt;
      &lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;Warn about viewstate size limit&lt;/span&gt;&lt;/div&gt;
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;CWE
ID&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;11211&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;Non-transient variables in an Apex controller or extension should be minimized as Visualforce has a viewstate limit of 135KB.

Consider using other design patterns just as maintaining client state using javascript and using remote actions.

See: http://www.salesforce.com/us/developer/docs/pages/Content/pages_best_practices_performance.htm&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Demonstrative&lt;br&gt;
Examples&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;&lt;br&gt;&lt;br&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;Visualforce pages that contain a form component also contain an encrypted, hidden form field that encapsulates the view state of the page. This view state is automatically created, and as its name suggests, it holds the state of the page - state that includes the components, field values and controller state.&lt;br&gt;&lt;br&gt;&lt;div&gt;What is Contained in the View State?&lt;/div&gt;
&lt;div&gt;&amp;nbsp;&lt;/div&gt;
&lt;div&gt;The data in the view state should be sufficient to recreate the state of the page when the postback is received. To do this, it stores the following data:&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;All non-transient data members in the associated controller (either standard or custom) and the controller extensions.&lt;/li&gt;&lt;li&gt;Objects that are reachable from a non-transient data member in a controller or controller extension.&lt;/li&gt;&lt;li&gt;The component tree for that page, which represents the page's component structure and the associated state, which are the values applied to those components.&lt;/li&gt;&lt;li&gt;A small amount of data for Visualforce to do housekeeping.&lt;/li&gt;&lt;/ul&gt;
&lt;strong&gt;Visualforce also imposes a limit of 135K on your view state - if the view size exceeds this limit, an exception gets thrown.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;In the example below the variable &lt;em&gt;currentDateTime&lt;/em&gt; will be shipped as viewstate if the VF pages that use this controller have a form.&lt;br&gt;&lt;br&gt;&lt;div&gt;public class ExampleController {&lt;/div&gt;
&lt;div&gt;&amp;nbsp;&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp; DateTime currentDateTime;&lt;/div&gt;
&lt;div&gt;&amp;nbsp;&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp; public String getCurrentDateTime() {&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (currentDateTime == null) currentDateTime = System.now();&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return '' + currentDateTime;&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;
&lt;div&gt;}&lt;/div&gt;
&lt;div&gt;&amp;nbsp;&lt;/div&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;&lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Potential&lt;br&gt;
Mitigations&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;&lt;br&gt;
      &lt;br&gt;
      &lt;/p&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;In the example below the variable &lt;em&gt;currentDataTime&lt;/em&gt; will not be shipped as viewstate because it is marked &lt;em&gt;transient&lt;/em&gt;.&lt;br&gt;&lt;br&gt;&lt;div&gt;public class ExampleController {&lt;/div&gt;
&lt;div&gt;&amp;nbsp;&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;strong&gt;transient&lt;/strong&gt; DateTime currentDateTime;&lt;/div&gt;
&lt;div&gt;&amp;nbsp;&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp; public String getCurrentDateTime() {&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (currentDateTime == null) currentDateTime = System.now();&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return '' + currentDateTime;&lt;/div&gt;
&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;
&lt;div&gt;}&lt;br&gt;&lt;br&gt;&amp;nbsp;&lt;/div&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Reviewing
For
      &lt;br&gt;
False&lt;br&gt;
Positives&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;The following conditions
may lead to false positives in the output of the report:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;This rule purposely flags any non-transient variable in a controller to make sure that the developer is aware of the 135K view state limit.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;References&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;div class="references"&gt;
      &lt;p&gt;http://wiki.developerforce.com/page/An_Introduction_to_Visualforce_View_State

http://www.salesforce.com/us/developer/docs/pages/Content/pages_best_practices_performance.htm&lt;/p&gt;
      &lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div align="right" class="noprint" style="padding-top: 5px; padding-bottom: 5px; clear: right;"&gt;&lt;a class="backtop" href="https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qq#top"&gt;Back to
top&lt;/a&gt;&lt;/div&gt;

&lt;/body&gt;&lt;/html&gt;&lt;/div&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2372</key><name>Workflow_sends_Emails</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;!-- saved from url=(0085)https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qk --&gt;
&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;script src="./11219_files/JiffyStubs.js"&gt;&lt;/script&gt;&lt;meta http-equiv="PRAGMA" content="NO-CACHE"&gt;
&lt;meta http-equiv="Expires" content="Mon, 01 Jan 1990 12:00:00 GMT"&gt;

  &lt;link href="./11219_files/main.css" rel="stylesheet" type="text/css"&gt;
  &lt;title&gt;11219&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div class="definitions" id="TableWithRules"&gt;
&lt;table border="0" cellpadding="0" cellspacing="0" width="100%"&gt;
  &lt;tbody&gt;
    &lt;tr class="header"&gt;
      &lt;th colspan="2" valign="top" width="100%"&gt;
      &lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;Whether Outbound Emails are being sent via Workflow&lt;/span&gt;&lt;/div&gt;
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;CWE
ID&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;11219&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;The number of automated emails sent to external addresses are intentionally limited to prevent the salesforce domain from being added to the lists of known SPAM servers.

See "Outbound Email: Limits for Single and Mass Email" section here:

http://www.salesforce.com/us/developer/docs/apexcode/Content/apex_gov_limits.htm&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Demonstrative&lt;br&gt;
Examples&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;&lt;br&gt;&lt;br&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;Any workflow that uses an action of type Email Alert will be flagged to generate awareness on the limits of automated emails sent to external users.&lt;br&gt;&lt;br&gt;&lt;div&gt;See Outbound Email limits here:&lt;/div&gt;
&lt;div&gt;http://www.salesforce.com/us/developer/docs/apexcode/Content/apex_gov_limits.htm&lt;/div&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;&lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Potential&lt;br&gt;
Mitigations&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;&lt;br&gt;
      &lt;br&gt;
      &lt;/p&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;If you need a mass email engine to send emails to many external email recipients, consider using an external solution such as a mass email marketing engine.&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Reviewing
For
      &lt;br&gt;
False&lt;br&gt;
Positives&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;The following conditions
may lead to false positives in the output of the report:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;This rule intentionally identifies any Email Alert actions to make sure that you are aware of the limits on automated emails.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;References&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;div class="references"&gt;
      &lt;p&gt;See Outbound Email limits here:
http://www.salesforce.com/us/developer/docs/apexcode/Content/apex_gov_limits.htm&lt;/p&gt;
      &lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div align="right" class="noprint" style="padding-top: 5px; padding-bottom: 5px; clear: right;"&gt;&lt;a class="backtop" href="https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qk#top"&gt;Back to
top&lt;/a&gt;&lt;/div&gt;

&lt;/body&gt;&lt;/html&gt;&lt;/div&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2368</key><name>SOQL_Relationship_in_Where</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;!-- saved from url=(0085)https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qs --&gt;
&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;script src="./11204_files/JiffyStubs.js"&gt;&lt;/script&gt;&lt;meta http-equiv="PRAGMA" content="NO-CACHE"&gt;
&lt;meta http-equiv="Expires" content="Mon, 01 Jan 1990 12:00:00 GMT"&gt;

  &lt;link href="./11204_files/main.css" rel="stylesheet" type="text/css"&gt;
  &lt;title&gt;11204&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div class="definitions" id="TableWithRules"&gt;
&lt;table border="0" cellpadding="0" cellspacing="0" width="100%"&gt;
  &lt;tbody&gt;
    &lt;tr class="header"&gt;
      &lt;th colspan="2" valign="top" width="100%"&gt;
      &lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;relationships in WHERE clauses&lt;/span&gt;&lt;/div&gt;
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;CWE
ID&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;11204&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;Avoid using relationship fields in WHERE clauses (joins).  If the field on the other object is not indexed, performance can be negatively impacted.

From the "Using SOQL and SOSL" section of the Large Data Volume Best Practices Guide:
http://www.salesforce.com/us/developer/docs/ldv/salesforce_large_data_volumes_bp.pdf&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Demonstrative&lt;br&gt;
Examples&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;&lt;br&gt;&lt;br&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;An example is given in the WHERE&amp;nbsp;clause&amp;nbsp;below, as a field "Foo_2_Field_A__c" is referenced via a relationship to the Foo_2 object. &amp;nbsp;Traversing the relationship in a WHERE&amp;nbsp;clause can cause performance to be less performant as a join must occur to evaluate the WHERE&amp;nbsp;condition.&lt;br&gt;&lt;br&gt;Foo__c f1 = [SELECT Name from Foo__c WHERE Foo_2__r.Foo_2_Field_A__c = 'x' LIMIT 1];&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;&lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Potential&lt;br&gt;
Mitigations&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;&lt;br&gt;
      &lt;br&gt;
      &lt;/p&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;In large data volume scenarios it may be better to replicate this data to the original object via triggers or workflows so that a join does not have to occur on large amounts of data before filtering can be applied.&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Reviewing
For
      &lt;br&gt;
False&lt;br&gt;
Positives&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;The following conditions
may lead to false positives in the output of the report:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;This rule will purposely flag any queries that traverse relationship fields in a WHERE&amp;nbsp;clause to make the developer aware of the potential performance implications.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;References&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;div class="references"&gt;
      &lt;p&gt;See "Best Practices for Deployments with Large Data Volumes"

http://www.salesforce.com/docs/en/cce/ldv_deployments/salesforce_large_data_volumes_bp.pdf&lt;/p&gt;
      &lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div align="right" class="noprint" style="padding-top: 5px; padding-bottom: 5px; clear: right;"&gt;&lt;a class="backtop" href="https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qs#top"&gt;Back to
top&lt;/a&gt;&lt;/div&gt;

&lt;/body&gt;&lt;/html&gt;&lt;/div&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2369</key><name>SOQL_With_All_Fields</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;!-- saved from url=(0085)https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qt --&gt;
&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;script src="./11208_files/JiffyStubs.js"&gt;&lt;/script&gt;&lt;meta http-equiv="PRAGMA" content="NO-CACHE"&gt;
&lt;meta http-equiv="Expires" content="Mon, 01 Jan 1990 12:00:00 GMT"&gt;

  &lt;link href="./11208_files/main.css" rel="stylesheet" type="text/css"&gt;
  &lt;title&gt;11208&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div class="definitions" id="TableWithRules"&gt;
&lt;table border="0" cellpadding="0" cellspacing="0" width="100%"&gt;
  &lt;tbody&gt;
    &lt;tr class="header"&gt;
      &lt;th colspan="2" valign="top" width="100%"&gt;
      &lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;SOQL with all fields (e.g. CreatedBy)&lt;/span&gt;&lt;/div&gt;
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;CWE
ID&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;11208&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;Only add fields to a report, list view or SOQL query that are required.  Querying for all fields of an object will reduce performance.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Demonstrative&lt;br&gt;
Examples&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;&lt;br&gt;&lt;br&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;In the query below, all fields are queried for, even though they are not needed. &amp;nbsp;Arbitrarily adding all fields (like CreatedById, IsDeleted, etc.) adds to the response time of the query, the heap size needed, and potentially the view state if this code is part of a Visualforce controller.&lt;br&gt;&lt;br&gt;SELECT CreatedById, &amp;nbsp;CreatedDate, Field_A__c, Field_B__c, Foo_2__c, Formula_Field_A__c, Id , IsDeleted, LastModifiedById, LastModifiedDate, Name, OwnerId, Relationship_Formula_Field__c, SystemModstamp FROM Foo__c&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;&lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Potential&lt;br&gt;
Mitigations&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;&lt;br&gt;
      &lt;br&gt;
      &lt;/p&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;div&gt;The query below only queries for the fields that are actually needed by the Apex class:&lt;/div&gt;
&lt;div&gt;&amp;nbsp;&lt;/div&gt;
&lt;div&gt;SELECT Field_A__c, Field_B__c, Foo_2__c, Formula_Field_A__c, Name, Relationship_Formula_Field__c FROM Foo__c&lt;/div&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Reviewing
For
      &lt;br&gt;
False&lt;br&gt;
Positives&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;The following conditions
may lead to false positives in the output of the report:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;This rule will flag any SOQL&amp;nbsp;query that retrieves rarely used system fields like CreatedDate, SystemModstamp to have the developer confirm that these fields are really needed.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;References&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;div class="references"&gt;
      &lt;p&gt;From the "Table of Best Practices" section of the Large Data Volume Best Practices Guide:

http://www.salesforce.com/us/developer/docs/ldv/salesforce_large_data_volumes_bp.pdf&lt;/p&gt;
      &lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div align="right" class="noprint" style="padding-top: 5px; padding-bottom: 5px; clear: right;"&gt;&lt;a class="backtop" href="https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qt#top"&gt;Back to
top&lt;/a&gt;&lt;/div&gt;

&lt;/body&gt;&lt;/html&gt;&lt;/div&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2367</key><name>SOQL_Hardcoded_null_in_Where</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;!-- saved from url=(0085)https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qc --&gt;
&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;script src="./11207_files/JiffyStubs.js"&gt;&lt;/script&gt;&lt;meta http-equiv="PRAGMA" content="NO-CACHE"&gt;
&lt;meta http-equiv="Expires" content="Mon, 01 Jan 1990 12:00:00 GMT"&gt;

  &lt;link href="./11207_files/main.css" rel="stylesheet" type="text/css"&gt;
  &lt;title&gt;11207&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div class="definitions" id="TableWithRules"&gt;
&lt;table border="0" cellpadding="0" cellspacing="0" width="100%"&gt;
  &lt;tbody&gt;
    &lt;tr class="header"&gt;
      &lt;th colspan="2" valign="top" width="100%"&gt;
      &lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;SOQL statements with a WHERE clause that has a hardcoded 'NULL' in the criteria&lt;/span&gt;&lt;/div&gt;
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;CWE
ID&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;11207&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;Executing a query with a NULL in a WHERE filter makes it unlikely that indexing will be applied. Such queries often scan the entire database to find appropriate records. Design the data model not to rely on NULLs as valid field values.

From the "Using SOQL and SOSL" section of the Large Data Volume Best Practices Guide:
http://www.salesforce.com/us/developer/docs/ldv/salesforce_large_data_volumes_bp.pdf&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Demonstrative&lt;br&gt;
Examples&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;&lt;br&gt;&lt;br&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;font face="Arial, Helvetica, sans-serif"&gt;In the example below the WHERE&amp;nbsp;clause is looking for records that a null value for a specific field.&lt;br&gt;&lt;br&gt;Foo__c f1 = [SELECT Name from Foo__c WHERE Field_A__c = 'null' LIMIT 1];&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;&lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Potential&lt;br&gt;
Mitigations&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;&lt;br&gt;
      &lt;br&gt;
      &lt;/p&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;div&gt;Design the data model not to rely on NULLs as valid field values.&lt;br&gt;&lt;br&gt;Another approach would be to have your application purposely store "NA" or another value as a NULL value.&lt;/div&gt;
&lt;div&gt;&amp;nbsp;&lt;/div&gt;
&lt;div&gt;You can also contact salesforce.com Customer Support to create custom indexes that include null rows.&lt;/div&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Reviewing
For
      &lt;br&gt;
False&lt;br&gt;
Positives&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;The following conditions
may lead to false positives in the output of the report:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;This rule will purposely flag any WHERE clause with a hard-coded NULL as part of its criteria, to purposely make the developer aware of the potential performance impact of this query.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;References&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;div class="references"&gt;
      &lt;p&gt;LDV Best Practices Guide:
http://www.salesforce.com/us/developer/docs/ldv/salesforce_large_data_volumes_bp.pdf

http://blogs.developerforce.com/engineering/2013/02/force-com-soql-best-practice&lt;/p&gt;
      &lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div align="right" class="noprint" style="padding-top: 5px; padding-bottom: 5px; clear: right;"&gt;&lt;a class="backtop" href="https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qc#top"&gt;Back to
top&lt;/a&gt;&lt;/div&gt;

&lt;/body&gt;&lt;/html&gt;&lt;/div&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2364</key><name>Report_with_no_Filter</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;!-- saved from url=(0085)https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2R4 --&gt;
&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;script src="./11205_files/JiffyStubs.js"&gt;&lt;/script&gt;&lt;meta http-equiv="PRAGMA" content="NO-CACHE"&gt;
&lt;meta http-equiv="Expires" content="Mon, 01 Jan 1990 12:00:00 GMT"&gt;

  &lt;link href="./11205_files/main.css" rel="stylesheet" type="text/css"&gt;
  &lt;title&gt;11205&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div class="definitions" id="TableWithRules"&gt;
&lt;table border="0" cellpadding="0" cellspacing="0" width="100%"&gt;
  &lt;tbody&gt;
    &lt;tr class="header"&gt;
      &lt;th colspan="2" valign="top" width="100%"&gt;
      &lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;Reports with no filters&lt;/span&gt;&lt;/div&gt;
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;CWE
ID&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;11205&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;A report with no filter criteria can timeout if the number of records is in the millions and the security model allows users to see all records.  Use report filters that emphasize the use of indexed fields.

From the "Table of Best Practices" section of the Large Data Volume Best Practices Guide:
http://www.salesforce.com/us/developer/docs/ldv/salesforce_large_data_volumes_bp.pdf&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Demonstrative&lt;br&gt;
Examples&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;&lt;br&gt;&lt;br&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;Any report that has no filter criteria is automatically flagged by this rule. &amp;nbsp;If a user should have millions of records to run this report against, performance could be less than adequate as this report attempts to run against all instances of an object, with no rule to filter the set of records returned.&amp;nbsp;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;&lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Potential&lt;br&gt;
Mitigations&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;&lt;br&gt;
      &lt;br&gt;
      &lt;/p&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;Create at least one filter that reduces the records returned by a timeframe, status, ownership, etc.&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Reviewing
For
      &lt;br&gt;
False&lt;br&gt;
Positives&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;The following conditions
may lead to false positives in the output of the report:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;This rule will automatically flag any reports that have no filter criteria.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;References&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;div class="references"&gt;
      &lt;p&gt;From the "Table of Best Practices" section of the Large Data Volume Best Practices Guide:

http://www.salesforce.com/us/developer/docs/ldv/salesforce_large_data_volumes_bp.pdf&lt;/p&gt;
      &lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div align="right" class="noprint" style="padding-top: 5px; padding-bottom: 5px; clear: right;"&gt;&lt;a class="backtop" href="https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2R4#top"&gt;Back to
top&lt;/a&gt;&lt;/div&gt;

&lt;/body&gt;&lt;/html&gt;&lt;/div&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule><rule><key>checkmarx_2365</key><name>SOQL_Dynamic_null_in_Where</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;!-- saved from url=(0085)https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qd --&gt;
&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;script src="./11206_files/JiffyStubs.js"&gt;&lt;/script&gt;&lt;meta http-equiv="PRAGMA" content="NO-CACHE"&gt;
&lt;meta http-equiv="Expires" content="Mon, 01 Jan 1990 12:00:00 GMT"&gt;

  &lt;link href="./11206_files/main.css" rel="stylesheet" type="text/css"&gt;
  &lt;title&gt;11206&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div class="definitions" id="TableWithRules"&gt;
&lt;table border="0" cellpadding="0" cellspacing="0" width="100%"&gt;
  &lt;tbody&gt;
    &lt;tr class="header"&gt;
      &lt;th colspan="2" valign="top" width="100%"&gt;
      &lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;SOQL statements with a "WHERE" clause criteria evaluates to NULL&lt;/span&gt;&lt;/div&gt;
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;CWE
ID&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;11206&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;If dynamic values are being used for the WHERE field and null values can be passed in, don't let the query run to determine there are no records; instead check for the nulls and avoid the query if necessary. Such queries must scan the entire database to find appropriate records.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Demonstrative&lt;br&gt;
Examples&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;&lt;br&gt;&lt;br&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;div&gt;In the example below, if acctid is null, this will cause the entire Account table to be scanned row by row until all data is examined.&lt;br&gt;&lt;br&gt;Select Name from account where Account_ID___c=:acctid;&lt;/div&gt;
&lt;div&gt;If (rows found==0) Return “Not Found”&lt;/div&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;&lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Potential&lt;br&gt;
Mitigations&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;&lt;br&gt;
      &lt;br&gt;
      &lt;/p&gt;
      &lt;table border="1" cellpadding="2" cellspacing="2" style="text-align: left; width: 100%;"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;div&gt;In the example below, acctid is checked to make sure that is not null, before the query is submitted:&lt;br&gt;&lt;br&gt;if (acctid!=null)&lt;/div&gt;
&lt;div&gt;&amp;nbsp; Select Name from account where Account_ID___c=:acctid&lt;/div&gt;
&lt;div&gt;else&lt;/div&gt;
&lt;div&gt;&amp;nbsp; Return “Not Found”&lt;br&gt;&lt;br&gt;Another approach would be to have your application purposely store "NA" or another value as a NULL value.&lt;br&gt;&lt;br&gt;You can also contact salesforce.com Customer Support to create custom indexes that include null rows.&lt;/div&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;Reviewing
For
      &lt;br&gt;
False&lt;br&gt;
Positives&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;p&gt;The following conditions
may lead to false positives in the output of the report:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;The static code analyzer will attempt to make sure that variables passed into a WHERE&amp;nbsp;clause will have previously been set to a value other than Null. &amp;nbsp;In some cases values can be set outside of the actual source code and can be flagged as having potentially null values.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td nowrap="nowrap" valign="top"&gt;&lt;b&gt;References&lt;/b&gt;&lt;/td&gt;
      &lt;td valign="top" width="100%"&gt;
      &lt;div class="references"&gt;
      &lt;p&gt;From the "Using SOQL and SOSL" section of the LDV Best Practices Guide:
http://www.salesforce.com/us/developer/docs/ldv/salesforce_large_data_volumes_bp.pdf

Also see:
http://blogs.developerforce.com/engineering/2013/02/force-com-soql-best-practice&lt;/p&gt;
      &lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div align="right" class="noprint" style="padding-top: 5px; padding-bottom: 5px; clear: right;"&gt;&lt;a class="backtop" href="https://c.na11.visual.force.com/apex/QualityRulesScannerFormat?ruleId=a0ZG0000003j2Qd#top"&gt;Back to
top&lt;/a&gt;&lt;/div&gt;

&lt;/body&gt;&lt;/html&gt;&lt;/div&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>INFO</severity><tag>checkmarx-info</tag><type>VULNERABILITY</type><remediationFunction>LINEAR</remediationFunction><remediationFunctionGapMultiplier>1min</remediationFunctionGapMultiplier></rule></rules>