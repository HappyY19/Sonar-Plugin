<?xml version="1.0" encoding="UTF-8" standalone="yes"?><rules><rule><key>checkmarx_846</key><name>DOM_Cookie_Poisoning</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;If an external, malicious 3rd party&amp;#160;can control another user's application cookies, this could be misused in a variety of ways. This includes tampering with application data, bypassing access control checks, violation of integrity constraints, or changing the user's preferences, such as the contents of a shopping cart.&lt;/div&gt;
&lt;div&gt;In addition, this flaw can&amp;#160;even lead to additional classes of&amp;#160;attacks, such as Session Fixation or Cross-Site Scripting (XSS) attacks.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application does not prevent malicious input from being inserted into the application cookies. An attacker could influence the victim's browser with malicious URL parameters, causing the script to load these malicious values into the user's cookie. This could be via phishing, stored links, external links, and more.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Do not set cookies based on user-controllable input, such as URL.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;h4&gt;URL-Based Cookie&lt;/h4&gt;&lt;pre&gt;function setCookie()
{
    var value = window.location.hash;
    document.cookie = "Action=" + value; 
}&lt;/pre&gt;&lt;h4&gt;Whitelisted Cookie Value&lt;/h4&gt;&lt;pre&gt;function setCookie()
{
    var value = window.location.hash;
    
    if (actionsArray[value] != undefined)
    {
        var date = new Date();
        date.setTime(date.getTime() + 1000*60*20);

        document.cookie = "ActionID=" + actionsArray[value] 
                        + "; expires=" + date.toUTCString()
                        + "; path=/myApp/" 
                        + "; secure;"
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_843</key><name>Client_Untrusted_Activex</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;An untrusted object created by the browser may allow attackers to embed dangerous content which could attack the browser and compromise its host system, or allow cross-site scripting (XSS) attacks in the application context.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;An object is created by the browser; the object may be unsafe, as its origins are dynamically determined with user input, potentially allowing attackers to determine the source of this object.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Sources for objects embedded inside web-page should always be statically determined, in order to prevent injection of malicious content from a dynamically determined source provided by user inputs.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;h4&gt;ActiveX Object Created with User-Provided Location Variable&lt;/h4&gt;&lt;pre&gt;var activeXLocation = location.href.hash.slice(1);
var customActiveX = new ActiveXObject(type, activeXLocation);&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_845</key><name>DOM_Code_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could run arbitrary code on the application server host. Depending on the application&amp;rsquo;s OS permissions,these could include:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Database access, such as reading or modifying sensitive data;&lt;/li&gt;
&lt;li&gt;File actions (read / create / modify / delete);&lt;/li&gt;
&lt;li&gt;Changing the website;&lt;/li&gt;
&lt;li&gt;Open a network connection to the attacker&amp;rsquo;s server;&lt;/li&gt;
&lt;li&gt;Decrypt secret data using the application's encryption keys;&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Start and stop system services;&lt;/li&gt;
&lt;li&gt;Complete server takeover.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;The attacker would use social engineering techniques to convince the victim to use the attacker's code, either via a malformed link or otherwise. This will enable the attacker to gain control of the user's experience with the web application, hijacking their browser to alter the displayed web pages, mount phishing attacks, and execute arbitrary scripts.&lt;/p&gt;

&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application performs some action by creating and running code that includes untrusted data, which might be under control of a malicious user. If the data contains malicious code, the executed code could contain system-level activities engineered by an attacker, as though the attacker were running code directly on the application server.&lt;/div&gt;
&lt;p&gt;In this case, the untrusted code is read by the browser, and executed on the client side. &amp;nbsp;&lt;/p&gt;

&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;The application should not compile, execute, or evaluate any untrusted code from any external source, including user input, uploaded files, or a database.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;If it is absolutely necessary to include external&amp;nbsp;data in dynamic execution, it is permissible to pass the data as parameters to the code, but do not execute user data directly. &amp;nbsp;&lt;/li&gt;
&lt;li&gt;If it is necessary to pass untrusted data to dynamic execution, enforce very strict data validation. For example, accept only integers between certain values.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Parameters should be limited to an allowed character set, and non-validated input should be dropped. In addition to characters, check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;If possible, always prefer to whitelist known and trusted input instead of comparing to a blacklist.&lt;/li&gt;
&lt;li&gt;Configure the application to run using a restricted user account that has no unnecessary privileges.&lt;/li&gt;
&lt;li&gt;If possible, isolate all dynamic execution to use a separate, dedicated user account that has privileges only for the specific operations and files used by dynamic execution, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;On the client-side, do not use any form of dynamic code evaluation with any untrusted data. Dynamic evaluation is only allowed with hard-coded commands.&lt;/li&gt;
&lt;/ul&gt;

&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;VbScript&lt;/h3&gt;&lt;h4&gt;Dynamic evaluation of untrusted input&lt;/h4&gt;&lt;pre&gt;Execute document.location.hash&lt;/pre&gt;&lt;h4&gt;Dynamically Invoking a Safe Function&lt;/h4&gt;&lt;pre&gt;window.setTimeout "hardcodedFunction()", 1000&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_842</key><name>Client_DoS_By_Sleep</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could provide a very high sleep value, effectively causing a denial of service for a long period of time.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses a user-provided value to set its sleep period, without enforcing a limited range for this value.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Ideally, the sleep command&amp;#8217;s duration should not be be according to user input at all. It should be either hardcoded, defined in a configuration file, or dynamically calculated at runtime.&lt;/li&gt;
&lt;li&gt;If it is necessary to allow the user to define the sleep duration, this value MUST be checked and enforced to be within a predefined range of valid values.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application receives a timeout int from the user to be used as argument for Sleep(). This int could be a very big number.
      &lt;/h4&gt;&lt;pre&gt;

public class DosbySleep
{
        public void foo()
        {
                int sleep = int.Parse(HttpContext.Request.QueryString["timeout"]);
                Thread.Sleep(sleep);
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The int received is varified to be in an acceptable range.
      &lt;/h4&gt;&lt;pre&gt;

public class DosbySleep
{
        public void foo()
        {
                int sleep = int.Parse(HttpContext.Request.QueryString["timeout"]);
                if (sleep &gt; 1000)
		{
			sleep = 1000;
		}
		else if (sleep &lt;= 10)
                {
                        sleep = 10;
                }
                Thread.Sleep(sleep);
        }
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_847</key><name>DOM_Open_Redirect</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to get a victim to click a link to the application, so that the user will be immediately redirected to another, arbitrary site. Users may think that they are still in the original application site. The second site may be offensive, contain malware, or, most commonly, be used for phishing.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application redirects the user&amp;#8217;s browser to a URL provided in a user request, without warning users that they are being redirected outside the site. An attacker could use social engineering to get a victim to click a link to the application with a parameter defining another site to which the application will redirect the user&amp;#8217;s browser, and the user may not be aware of the redirection.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Ideally, do not allow arbitrary URLs for redirection. Instead, create a server-side mapping from user-provided parameter values to legitimate URLs.&lt;/li&gt;
&lt;li&gt;If it is necessary to allow arbitrary URLs:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;For URLs inside the application site, first filter and encode the user-provided parameter, and then use it as a relative URL by prefixing it with the application site domain.&lt;/li&gt;
&lt;li&gt;For URLs outside the application (if necessary), use an intermediate disclaimer page to provide users with a clear warning that they are leaving your site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Avoid redirecting to arbitrary URLs, instead map the parameter to a list of static URLs.

      &lt;/h4&gt;&lt;pre&gt;


Response.Redirect(getUrlById(targetUrlId));



      &lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Avoid redirecting to arbitrary URLs, instead map the parameter to a list of static URLs.

      &lt;/h4&gt;&lt;pre&gt;


Response.Redirect(getUrlById(targetUrlId));


      &lt;/pre&gt;&lt;h3&gt;Apex&lt;/h3&gt;&lt;h4&gt;&lt;/h4&gt;&lt;pre&gt;String redirsite = ApexPages.currentPage().getParameters().get('redirlocation');
PageReference pageRef;
if(redirsite != null)
{
    pageRef = new PageReference(redirsite);
    pageRef.setRedirect(true);
    return pageRef;
}
pageRef = ApexPages.currentPage();
return pageRef;&lt;/pre&gt;&lt;h4&gt;&lt;/h4&gt;&lt;pre&gt;String redirsite = ApexPages.currentPage().getParameters().get('redirlocation');
PageReference pageRef;
if(redirsite != null)
{
    pageRef = new PageReference('http://domain.com/page.jsp?' + redirsite);
    pageRef.setRedirect(true);
    return pageRef;
}
pageRef = ApexPages.currentPage();
return pageRef;&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_848</key><name>DOM_XSRF</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could cause the victim to perform any action for which the victim is authorized, such as transferring funds from the victim&amp;#8217;s account to the attacker&amp;#8217;s. The action will be logged as being performed by the victim.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application performs some action that modifies database contents, based purely on HTTP request content, and does not require per-request renewed authentication (such as transaction authentication or a cryptographic form token), instead relying on browser or session authentication. This means that an attacker could use social engineering to cause a victim to click a link including a transaction request, and the application would trust the victim&amp;#8217;s browser and would perform the action. This type of attack is known as Cross-Site Request Forgery (XSRF or CSRF).&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Implement a standard or library anti-CSRF mechanism: preferably a built-in platform-provided mechanism or OWASP&amp;#8217;s CSRFGuard. Selective re-authentication or transaction authentication, such as with a cryptographic form token, is also acceptable.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
HttpRequest content is used in a database query without any validation of that content
      &lt;/h4&gt;&lt;pre&gt;

public class XSRF
{
        public void foo(SqliteConnection connection, HttpRequest Request)
        {
                string input = Request.QueryString["user"];
                string sql = "insert into Comments(comment) values (@user)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
            	cmd.Parameters.AddwithValue(@user, input);
            	connection.Open();
            	SqlDataReader reader = cmd.ExecuteReader();
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The HttpRequest content is validated using AntiXsrfTokenKey
      &lt;/h4&gt;&lt;pre&gt;

public class XSRFFixed
{
        public void foo(SqliteConnection connection, AntiXsrf AntiXsrfTokenKey, HttpRequest Request)
        {
                string input = AntiXsrfTokenKey.Validate(Request.QueryString["user"]);
                string sql = "insert into Comments(comment) values (@user)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
            	cmd.Parameters.AddwithValue(@user, input);
            	connection.Open();
            	SqlDataReader reader = cmd.ExecuteReader();
        }

}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_862</key><name>Weak_Password_Authentication</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;
&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;   &lt;link href="main.css" rel="stylesheet" type="text/css"&gt;   &lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;
          &lt;span style="font-weight:bold;color:white;"&gt;Weak Password Authentication&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;    &lt;span class="tool"&gt;&lt;/span&gt;    &lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;
          10710&lt;span style="font-style:italic; font-size:80%"&gt;&amp;nbsp;(Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_90_Description" id="oc_90_Description" class="expandblock"&gt;&lt;div class="detail"&gt;  &lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;
          &amp;nbsp;Passwords that are part of the client-side code can be easily exposed by
          reviewing the source.&lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_90_Time of Introduction" id="oc_90_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;  &lt;li&gt;
              &amp;nbsp;
              Implementation&lt;/li&gt;  &lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_90_Applicable Platforms" id="oc_90_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;  &lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;  &lt;p&gt;
              ALL&lt;/p&gt;  &lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_90_Demonstrative Examples" id="oc_90_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;
              Example:&lt;/p&gt;&lt;p&gt;
              In the following example, reviewing the source will reveal the password:&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example  Language:
                  Javascript&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;
                      &lt;code&gt;
                      &lt;pre class="style2"&gt;&lt;script&gt;
	//&lt;%=Date%&gt;
&lt;/script&gt;&lt;script&gt;
	//&lt;%=Date%&gt;
&lt;/script&gt;&lt;script&gt;
	//&lt;%=Date%&gt;
&lt;/script&gt;var password=&amp;quot;abcd123&amp;quot;;&lt;/pre&gt;
                      &lt;/code&gt;&lt;/div&gt;
                  &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
              &lt;p&gt;&amp;nbsp;&lt;/p&gt;
              &lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;
              Potential Mitigations&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;  &lt;tr&gt;&lt;td valign="top"&gt;
          &lt;p class="style3"&gt;
              &lt;forms&gt;avoid embedding passwords or any sensitive data in code.&lt;p&gt;
                  &lt;forms&gt;
              &lt;forms&gt; &lt;/forms&gt;&lt;/forms&gt;&lt;/forms&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div name="oc_90_Relationships" id="oc_90_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div name="oc_90_Content History" id="oc_90_Content History" class="expandblock"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;    &lt;/html&gt;    &lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;    &lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_844</key><name>Cookies_Inspection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Plaintext Storage in a Cookie&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;315&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_315_Description" id="oc_315_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;Storing sensitive data in plaintext in a cookie makes the data
more easily accessible than if encrypted. This significantly lowers the
difficulty of exploitation by attackers.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_315_Time of Introduction" id="oc_315_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_315_Applicable Platforms" id="oc_315_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_315_Demonstrative Examples" id="oc_315_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;The following code excerpt stores a plaintext user account ID in a
browser cookie.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;response.addCookie( new Cookie("userAccountID", acctID);&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Observed Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Observed Examples&lt;/div&gt;&lt;div name="oc_315_Observed Examples" id="oc_315_Observed Examples" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Reference&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1800" target="_blank"&gt;CVE-2002-1800&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Admin password in plaintext in a
cookie.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1537" target="_blank"&gt;CVE-2001-1537&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Default configuration has cleartext
usernames/passwords in cookie.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1536" target="_blank"&gt;CVE-2001-1536&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Usernames/passwords in cleartext in
cookies.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2160" target="_blank"&gt;CVE-2005-2160&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Authentication information stored in cleartext in
a cookie.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_315_Potential Mitigations" id="oc_315_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Sensitive information should not be stored in plaintext in a cookie.
Even if heavy fortifications are in place, sensitive data should be
encrypted to prevent the risk of losing confidentiality.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_315_Relationships" id="oc_315_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;312&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=312" target="_blank"&gt;Cleartext Storage of Sensitive Information&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_315_Taxonomy Mappings" id="oc_315_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Plaintext Storage in Cookie&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_315_Related Attack Patterns" id="oc_315_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org31.html" target="_blank"&gt;31&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Accessing/Intercepting/Modifying HTTP Cookies&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org37.html" target="_blank"&gt;37&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Lifting Data Embedded in Client Distributions&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org39.html" target="_blank"&gt;39&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Manipulating Opaque Client-based Data Tokens&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org74.html" target="_blank"&gt;74&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Manipulating User State&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_315_Content History" id="oc_315_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;PLOVER&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Sean Eidemiller&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;added/updated demonstrative
examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2008-04-11&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;Plaintext Storage in
Cookie&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_849</key><name>DOM_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to cause a user to send the website engineered input, such as a URL with an engineered anchor, causing the browser to rewrite web pages. The attacker can then pretend to be the original website, which would enable the attacker to steal the user's password, request the user&amp;#8217;s credit card information, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website, and the victim would blame the site for incurred damage.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application web page includes data from user input (including the page URL). The user input is embedded in the page, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary user input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Fully encode all dynamic data before embedding it in the webpage. Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content.&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values.&lt;/li&gt;
&lt;li&gt;JavaScript encoding for JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using the ESAPI4JS encoding library.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
For dynamically creating URLs in JavaScript, use the OWASP ESAPI4JS library:

      &lt;/h4&gt;&lt;pre&gt;window.location = ESAPI4JS.encodeForURL(input);&lt;/pre&gt;&lt;h4&gt;

For creating dynamic HTML in JavaScript, use the OWASP ESAPI4JS library:

      &lt;/h4&gt;&lt;pre&gt;window.location = ESAPI4JS.encodeForURL(input);&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
For dynamically creating URLs in JavaScript, use the OWASP ESAPI4JS library:

      &lt;/h4&gt;&lt;pre&gt;window.location = ESAPI4JS.encodeForURL(input);&lt;/pre&gt;&lt;h4&gt;

For creating dynamic HTML in JavaScript, use the OWASP ESAPI4JS library:

      &lt;/h4&gt;&lt;pre&gt;window.location = ESAPI4JS.encodeForURL(input);&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule></rules>