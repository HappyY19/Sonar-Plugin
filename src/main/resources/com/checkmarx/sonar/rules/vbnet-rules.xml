<?xml version="1.0" encoding="UTF-8" standalone="yes"?><rules><rule><key>checkmarx_803</key><name>Buffer_Overflow</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Buffer overflow attacks, in their various forms, could allow an attacker to control certain areas of memory. Typically, this is used to overwrite data on the stack necessary for the program to function properly, such as code and memory&amp;#160;addresses, though other forms of this attack exist. Exploiting this vulnerability can generally lead to system crashes, infinite loops, or even execution of arbitrary code.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Buffer Overflows can manifest in numerous different variations. In it's most basic form, the attack controls a buffer, which is then copied to a smaller buffer without size verification. Because the attacker's source buffer is larger than the program's target buffer, the attacker's data overwrites whatever is next on the stack, allowing the attacker to control program structures.&lt;/div&gt;
&lt;div&gt;Alternatively, the vulnerability could be the result of improper bounds checking; exposing internal memory addresses outside of their valid scope; allowing the attacker to control the size of the target buffer; or various other forms.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Always perform proper bounds checking before copying buffers or strings.&amp;#160;&lt;/li&gt;
&lt;li&gt;Prefer to use safer functions and structures, e.g. safe string classes over &lt;code&gt;char*&lt;/code&gt;, &lt;code&gt;strncpy&lt;/code&gt; over &lt;code&gt;strcpy&lt;/code&gt;, and so on.&amp;#160;&lt;/li&gt;
&lt;li&gt;Consistently apply tests for the size of buffers.&amp;#160;&lt;/li&gt;
&lt;li&gt;Do not return variable&amp;#160;addresses outside the scope of their variables.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CPP&lt;/h3&gt;&lt;h4&gt;Overflowing Buffers&lt;/h4&gt;&lt;pre&gt;const int BUFFER_SIZE = 10;
char buffer[BUFFER_SIZE];

void copyStringToBuffer(char* inputString)
{
    strcpy(buffer, inputString);
}
&lt;/pre&gt;&lt;h4&gt;Checked Buffers&lt;/h4&gt;&lt;pre&gt;const int BUFFER_SIZE = 10;
const int MAX_INPUT_SIZE = 256;
char buffer[BUFFER_SIZE];

void copyStringToBuffer(char* inputString)
{
    if (strnlen(inputString, MAX_INPUT_SIZE) &lt; sizeof(buffer))
    {
        strncpy(buffer, inputString, sizeof(buffer));
    }
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_802</key><name>XSS_Evasion_Attack</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could bypass the regular channels&amp;#160;made by the system to avoid Cross-Site Scripting (XSS) attacks in order to inject JavaScript or HTML code. By using social engineering to cause a user to access the website with injection inputs, such as a URL with engineered session attributes, causing the browser to rewrite web pages.&amp;#160;The attacker can then pretend to be the original website, which would enable the attacker to steal the user's session, request the user&amp;#8217;s credentials, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website's action.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application web page includes data from a client-side controlled data&amp;#160;(including the page session). The user input is embedded in the page, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary client-side controlled input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;Secure-Coding Approach&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;Fully encode all dynamic data before embedding it in the webpage. Encoding should be context-sensitive. For example:&lt;br /&gt;
&lt;ol&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content.&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values.&lt;/li&gt;
&lt;li&gt;JavaScript encoding for JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;
It is recommended to use the known libraries for encoding output, such as ESAPI.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;h4&gt;Dynamically calling a function without sanitizing the input:&lt;/h4&gt;&lt;pre&gt;var input = document.getElementById("id").value;
window.setInterval( myFunc(input), 1000);&lt;/pre&gt;&lt;h4&gt;Sanitizing input before using it in a function:&lt;/h4&gt;&lt;pre&gt;var input = document.getElementById("id").value;
var trusted = escape(input);
window.setInterval( myFunc(trusted), 1000);&lt;/pre&gt;&lt;h4&gt;For dynamically updating HTML in the DOM, use the OWASP ESAPI4JS library:&lt;/h4&gt;&lt;pre&gt;document.write("&lt;%=Encoder.encodeForJS(Encoder.encodeForHTML(untrustedData))%&gt;");&lt;/pre&gt;&lt;h4&gt;If you must set code to be called dynamically, only call predefined methods or hard-coded Javascript. Never call “eval()” or dynamically create code:&lt;/h4&gt;&lt;pre&gt;window.setInterval( "timedFunction();", 1000);&lt;/pre&gt;&lt;h4&gt;If you must set code to be called dynamically, only call predefined methods or hard-coded Javascript. Never call “eval()” or dynamically create code:&lt;/h4&gt;&lt;pre&gt;window.setInterval( "timedFunction();", 1000);&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_838</key><name>RequireSSL</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span id="docs-internal-guid-c71b5d0e-c0ef-f4ee-b44c-6e4a7fd4b4cc"&gt;&lt;span style="font-family: Arial; vertical-align: baseline; white-space: pre-wrap;"&gt;Cookies that contain the user's session identifier, and other sensitive application cookies, should be sent to the server over a secure network communication (HTTPS) in order to prevent attackers from sniffing the traffic and stealing those cookies. Unless the web application explicitly prevents this by using the "secure" cookie flag, these cookies will also be sent over insecure traffic, which can lead to session hijacking and impersonation.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The web application framework by default does not set the "secure" flag for the application's sessionID cookie, and other sensitive application cookies. Likewise, the application does not explicitly use the "secure" cookie flag, allowing them to be sent in plaintext over an insecure session.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Always set the "secure" flag for any sensitive server-side cookies.&lt;/li&gt;
&lt;li&gt;If the application explicitly handles cookies directly in application code, set the "secure" flag for sensitive cookies set by the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;strong&gt;Secure-Code Approach&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style="text-indent: -0.25in;"&gt;Configure the application to always use "secure" cookies, in the site-wide configuration file.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="text-indent: -0.25in;"&gt;Enable the Secure flag or use the relevant Set-Secure API in the code.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Web.xml Configuration File with Secure Cookies:&lt;/h4&gt;&lt;pre&gt;&lt;session-config&gt;
 &lt;cookie-config&gt;
  &lt;secure&gt;true&lt;/secure&gt;
 &lt;/cookie-config&gt;
&lt;/session-config&gt;&lt;/pre&gt;&lt;h4&gt;Explicit Cookie Handling in Code:&lt;/h4&gt;&lt;pre&gt;Cookie newCookie = new Cookie("name","value");
newCookie.setSecure(true);&lt;/pre&gt;&lt;h3&gt;ASP&lt;/h3&gt;&lt;h4&gt;Web.config Configuration File with Secure Cookies:&lt;/h4&gt;&lt;pre&gt;&lt;system.web&gt;
 &lt;httpCookies requireSSL="true" &gt;&lt;/httpCookies&gt;
&lt;/system.web&gt;&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Explicit Cookie Handling in Code:&lt;/h4&gt;&lt;pre&gt;HttpCookie cookie = new HttpCookie('sessionid');
cookie.Secure = True;
cookie.Value = GetNewSessionToken();
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_764</key><name>Heuristic_Parameter_Tampering</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; information. By requesting information directly, such as by an account number, authorization may be bypassed and the attacker could steal confidential or restricted information (for example, a bank account balance), using a direct object reference.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application provides user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application concatenates the user input directly into the SQL query string, without any additional filtering. The application also does not perform any validation on the input, nor constrain it to a pre-computed list of acceptable values.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not concatenate user input directly into SQL queries.&amp;#160;&lt;/li&gt;
&lt;li&gt;Include a user-specific identifier as a filter in the WHERE clause of the SQL query.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unfiltered Direct Object Reference&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req)  {
    int accountId = Integer.parseInt(req.getParameter("accountId"));
    
    string sql = "select * from [Accounts] where [AccountId] = " 
                        + accountId.toString();
                        
    Statement stmt = conn.createStatement();
    ResultSet accountRS = stmt.executeQuery(sql); 
    
    return accountRS;
}&lt;/pre&gt;&lt;h4&gt;Record References are Now Filtered and Indirect&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req)  {
    int accountIndex = Integer.parseInt(req.getParameter("accountIndex"));
    int realAccountId = userAccountList.get(accountIndex);
    
    int userId = req.getSession().getAttribute("userId"); 
    
    string sql = "select * from [Accounts] where [AccountId] = " 
                        + realAccountId.toString() 
                        + " and [UserId] = " + userId.toString();
                        
    Statement stmt = conn.createStatement();
    ResultSet accountRS = stmt.executeQuery(sql); 
    
    return accountRS;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_815</key><name>Parameter_Tampering</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; information. By requesting information directly, such as by an account number, authorization may be bypassed and the attacker could steal confidential or restricted information (for example, a bank account balance), using a direct object reference.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application provides user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application concatenates the user input directly into the SQL query string, without any additional filtering. The application also does not perform any validation on the input, nor constrain it to a pre-computed list of acceptable values.&amp;#160;&lt;/div&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not concatenate user input directly into SQL queries.&amp;#160;&lt;/li&gt;
&lt;li&gt;Include a user-specific identifier as a filter in the WHERE clause of the SQL query.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unfiltered Direct Object Reference&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req)  {
    int accountId = Integer.parseInt(req.getParameter("accountId"));
    
    string sql = "select * from [Accounts] where [AccountId] = " 
                        + accountId.toString();
                        
    Statement stmt = conn.createStatement();
    ResultSet accountRS = stmt.executeQuery(sql); 
    
    return accountRS;
}&lt;/pre&gt;&lt;h4&gt;Record References are Now Filtered and Indirect&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req)  {
    int accountIndex = Integer.parseInt(req.getParameter("accountIndex"));
    int realAccountId = userAccountList.get(accountIndex);
    
    int userId = req.getSession().getAttribute("userId"); 
    
    string sql = "select * from [Accounts] where [AccountId] = " 
                        + realAccountId.toString() 
                        + " and [UserId] = " + userId.toString();
                        
    Statement stmt = conn.createStatement();
    ResultSet accountRS = stmt.executeQuery(sql); 
    
    return accountRS;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_763</key><name>Heuristic_DB_Parameter_Tampering</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; personal information, by simply altering the reference parameter sent to the server. Thus, the malicious user could bypass access controls and access unauthorized records, such as other users accounts,&amp;#160;stealing confidential or restricted information.&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application accesses&amp;#160;user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application uses the user input to filter specific records from database tables, which contain sensitive personal information (e.g. user accounts or payment details). Since the application does not filter the records according to any user identifier, nor&amp;#160;constrain it to a pre-computed list of acceptable values, a malicious user can easily modify the submitted reference identifier, and thus access unauthorized records.&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Filter the database query according to&amp;#160;a user-specific identifier, such as the customer number.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unfiltered Direct Object Reference&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req){
    int accountId = Integer.parseInt(req.getParameter("accountId"));    
    PreparedStatement stmt = connection.PreparedStatement("SELECT * from Accounts where AccountId = ?");
    
    stmt.setInt(1, accountId);   
    ResultSet accountRS = stmt.executeQuery();                 
    
    return accountRS;
}&lt;/pre&gt;&lt;h4&gt;Record References are Now Filtered and Indirect&lt;/h4&gt;&lt;pre&gt;    public ResultSet getAccountInfo(request req){
    int accountIndex = Integer.parseInt(req.getParameter("accountId"));
    int realAccountId = userAccountList.get(accountIndex);
    int userId = req.getSession().getAttribute("userId"); 
    PreparedStatement stmt = connection.PreparedStatement("SELECT * from Accounts where AccountId = ? AND UserId = ?");
    
    stmt.setInt(1, realAccountId);   
    stmt.setInt(2, userId);
    ResultSet accountRS = stmt.executeQuery();                 
    
    return accountRS;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_807</key><name>DB_Parameter_Tampering</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;A malicious user could access other users&amp;#8217; personal information, by simply altering the reference parameter sent to the server. Thus, the malicious user could bypass access controls and access unauthorized records, such as other users accounts,&amp;#160;stealing confidential or restricted information.&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;div&gt;The application accesses&amp;#160;user information without filtering by user ID. For example, it may provide information solely by a submitted account ID. The application uses the user input to filter specific records from database tables, which contain sensitive personal information (e.g. user accounts or payment details). Since the application does not filter the records according to any user identifier, nor&amp;#160;constrain it to a pre-computed list of acceptable values, a malicious user can easily modify the submitted reference identifier, and thus access unauthorized records.&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Enforce authorization checks before providing any access to sensitive data, including the specific object reference.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly block access to any unauthorized data, especially to other users&amp;#8217; data.&lt;/li&gt;
&lt;li&gt;If possible, avoid allowing the user to request arbitrary data by simply sending a record ID. For example, instead of having the user send an account ID, the application should look up the account ID for the current authenticated user session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Mitigation:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Filter the database query according to&amp;#160;a user-specific identifier, such as the customer number.&amp;#160;&lt;/li&gt;
&lt;li&gt;Map the user input to an indirect reference, e.g. via a prepared list of allowable values.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unfiltered Direct Object Reference&lt;/h4&gt;&lt;pre&gt;public ResultSet getAccountInfo(request req){
    int accountId = Integer.parseInt(req.getParameter("accountId"));    
    PreparedStatement stmt = connection.PreparedStatement("SELECT * from Accounts where AccountId = ?");
    
    stmt.setInt(1, accountId);   
    ResultSet accountRS = stmt.executeQuery();                 
    
    return accountRS;
}&lt;/pre&gt;&lt;h4&gt;Record References are Now Filtered and Indirect&lt;/h4&gt;&lt;pre&gt;    public ResultSet getAccountInfo(request req){
    int accountIndex = Integer.parseInt(req.getParameter("accountId"));
    int realAccountId = userAccountList.get(accountIndex);
    int userId = req.getSession().getAttribute("userId"); 
    PreparedStatement stmt = connection.PreparedStatement("SELECT * from Accounts where AccountId = ? AND UserId = ?");
    
    stmt.setInt(1, realAccountId);   
    stmt.setInt(2, userId);
    ResultSet accountRS = stmt.executeQuery();                 
    
    return accountRS;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_781</key><name>Dangerous_File_Upload</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;An attacker that exploits this vulnerability would be able to cause the application server to execute arbitrary code, allowing the attacker to alter&amp;nbsp;the application, run any&amp;nbsp;operating system command, and even take over the server altogether, depending on the application's system privileges.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application allows users to upload a file to the application, which is saved to a file within the web site's directory. The application does not apply thorough validation checks on the uploaded file, especially with regards to the file type or contents. This enables the attacker to upload executable files, in particular web server code such as .ASP, .PHP, and .JSP files, and others.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;When this is followed by a regular request to the web application for the previously uploaded files, the application server will then proceed to execute the code in the uploaded file, giving the attacker direct access to the command execution environment.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Generic Guidance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Storage:&lt;/strong&gt;&lt;/span&gt; If possible, avoid saving uploaded files to disk on the server, instead storing them in an external data storage, e.g. database or document management system.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Location:&lt;/strong&gt;&lt;/span&gt; User files should be stored in an isolated directory, outside of the web site's directory with direct browsing disabled. When required, the application should explicitly read the file in code, and stream the contents to the user applicatively. &amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Non-execution:&lt;/strong&gt;&lt;/span&gt; Files uploaded from users should be explicitly marked as non-executable by the web / application server, e.g. in configuration file or by&amp;nbsp;directory.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Validation:&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;Always validate all user input. In particular, enforce a whitelist of allowed file-types, according to the file extenstion and/or MIME type. Do not allow arbitrary files (such as .ASP, .PHP, .JSP, .EXE, .HTML, and so on). For example, accept only images such as&amp;nbsp;.GIF, .JPG, .PNG, .BMP, and so on.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Renaming:&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;Explicilty impose a pre-defined extension according to the file type, before saving the file to disk. This can be a hardcoded extension, or a configured list of allowed file types.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Privileges:&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;As a measure of Defense-in-Depth, configure the application server to execute in a limited system account, with minimal OS privileges.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Specific Recommendations:&amp;nbsp;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;&lt;strong&gt;Validation:&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;Validate the uploaded filename before saving the file to disk, and verify the total file size does not exceed defined limits.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Uploading Files to Web Directory&lt;/h4&gt;&lt;pre&gt;protected void doPost(HttpServletRequest request, HttpServletResponse response) 
  							throws ServletException, IOException {
	String userDir = getServletContext().getRealPath("/userFiles/");

	String contentType = request.getContentType();
	if (contentType != null &amp;&amp; contentType.indexOf("multipart/form-data") != -1) {
		String boundary = contentType.substring(contentType.indexOf("boundary=") + 9);
		
		BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
		String firstLine = reader.readLine(); 
		String filename = firstLine.substring(firstLine.lastIndexOf("\\"), firstLine.lastIndexOf("\""));

		BufferedWriter writer = new BufferedWriter(new FileWriter(userDir + filename, true));

		for (String line; (line=reader.readLine())!=null; ) {
			if (line.indexOf(boundary) == -1) {
				writer.write(line);
				writer.newLine();
				writer.flush();
			}
		}
		writer.close(); 
	}
}&lt;/pre&gt;&lt;h4&gt;Uploading Files Safely&lt;/h4&gt;&lt;pre&gt;protected void doPost(HttpServletRequest request, HttpServletResponse response) 
  							throws ServletException, IOException {
	String userDir = DATA_DIR_ROOT + "userFiles/";

	String contentType = request.getContentType();
	if (contentType != null &amp;&amp; contentType.indexOf("multipart/form-data") != -1) {
		String boundary = contentType.substring(contentType.indexOf("boundary=") + 9);
		
		BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
		String firstLine = reader.readLine(); 
		String filename = firstLine.substring(firstLine.lastIndexOf("\\"), firstLine.lastIndexOf("\""));

&gt;		if (filename.toUpperCase().endsWith(".GIF")) { 
			try {
				BufferedWriter writer = new BufferedWriter(new FileWriter(userDir + filename, true));

				for (String line; (line=reader.readLine())!=null; ) {
					if (line.indexOf(boundary) == -1) {
						writer.write(line);
						writer.newLine();
						writer.flush();
					}
				}
				writer.close(); 
			} catch (IOException ex) {
				handleErrors(ex);
			}
		}
	}
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_785</key><name>Hardcoded_Absolute_Path</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Generally, hardcoding absolute paths makes the application brittle, and will prevent the program from operating properly in some environments that do not have the identical file system structure. This will also cause software maintenance problems in future versions of the application, if the design or requirements were to change.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Additionally, if the application uses this path to read or write data, this can cause a breach of confidentiality or&amp;nbsp;allow malicious input into the program. In some situations, this vulnerability might even allow a malicious user to override the expected functionality, and cause the application to run any arbitrary program and execute any code the attacker deploys to the server.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Hardcoded paths are less flexible, and do not allow the application to account for changes in the environment. For example, the program might be installed in a different directory than the default. Likewise, different system languages and OS architectures can change the names of the system folders; for example, in a Spanish Windows machine there could&amp;nbsp;be&amp;nbsp;"&lt;code&gt;C:\Archivos de programa (x86)\&lt;/code&gt;" instead of "&lt;code&gt;C:\Program Files\&lt;/code&gt;".&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Moreover, on Windows by default all directories and files created outside of the system folders and outside the user's profile, will be allow full read and write access to any authenticated user. An unauthorized, malicious user could access any sensitive data in these folders, despite the application assuming they are protected. Even worse, an attacker&amp;nbsp;could overwrite existing programs in these unprotected folders and plant malicious code, which&amp;nbsp;will be activated by the application.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Do not hardcode absolute paths into the application.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Instead, store the absolute paths in an external configuration file, that can be modified as required for each environment.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Alternatively, use paths relative to the current application, if the target file is in a subdirectory of the application's root.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Do not assume a specific file system structure, outside of the application's subdirectories. On Windows, use the built-in expandable variables, such as &lt;code&gt;%WINDIR%&lt;/code&gt;, &lt;code&gt;%PROGRAMFILES%,&lt;/code&gt; and &lt;code&gt;%TEMP%&lt;/code&gt;.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;On Linux and other OS where available, implement a system jail (chroot) for the application, and store&amp;nbsp;all programs and data files there only.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Prefer storing all executables under the protected program directory (under "&lt;code&gt;C:\Program Files\&lt;/code&gt;" by default on Windows).&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Do not store sensitive data or configuration files in arbitrary folders. Likewise, do not store data files in the program directory. Instead, use the designated folders as intended, i.e. &lt;code&gt;%PROGRAMDATA%&lt;/code&gt; and &lt;code&gt;%APPDATA%&lt;/code&gt;&amp;nbsp;on Windows, respectively.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Configure hardened permissions to the most restricted as possible, according to the Principle of Least Privilege. Consider implementing this automatically in the installation and setup routines.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Hardcoded Path to Data File&lt;/h4&gt;&lt;pre&gt;public File getLogFile() { 
	String filename = "C:\Logs\myapp.log";
	File logFile = new File(filename); 

  	return logFile; 
}&lt;/pre&gt;&lt;h4&gt;Configured Path for Data File&lt;/h4&gt;&lt;pre&gt;public File getLogFile() { 
	Properties props = this.Properties; 
  	String filename = (String)props.get("logDirectory") + (String)props.get("logFilename");
  
	File logFile = new File(filename); 

  	return logFile; 
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_804</key><name>CGI_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&lt;span id="docs-internal-guid-c71b5d0e-9d84-dd53-9c94-64e8de600bd5"&gt;&lt;span style="font-family: Arial; vertical-align: baseline; white-space: pre-wrap;"&gt;Special crafted HTTP requests might retrieve system information and exploit the system through CGI (Common Gateway Interface).&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p dir="ltr" style="line-height: 1.7142866666666667; margin-top: 0pt; margin-bottom: 0pt;"&gt;&lt;span style="font-family: Arial; color: #000000; background-color: #ffffff; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;The CGI specification provides opportunities to read files, acquire shell access, and corrupt file systems on server machines and their attached hosts. &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p dir="ltr" style="line-height: 1.7142866666666667; margin-top: 0pt; margin-bottom: 0pt;"&gt;&lt;span style="font-family: Arial; color: #000000; background-color: #ffffff; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Means of gaining access include: exploiting assumptions of the script, exploiting weaknesses in the server environment, and exploiting weaknesses in other programs and system calls. &amp;nbsp;&lt;/span&gt;&lt;/p&gt;
&lt;p dir="ltr" style="line-height: 1.7142866666666667; margin-top: 0pt; margin-bottom: 0pt;"&gt;&amp;nbsp;&lt;/p&gt;
&lt;p dir="ltr" style="line-height: 1.7142866666666667; margin-top: 0pt; margin-bottom: 0pt;"&gt;&lt;span style="font-family: Arial; color: #000000; background-color: #ffffff; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;The primary weakness in CGI scripts is insufficient input validation.&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"&gt;&lt;span style="font-family: Arial; color: #000000; background-color: #ffffff; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Refrain from binding user input to system variables if not necessary.&lt;/span&gt;&lt;/p&gt;
&lt;p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"&gt;&lt;span id="docs-internal-guid-c71b5d0e-9d95-efa3-1ca7-894d4af475fb"&gt;&lt;span style="font-family: Arial; vertical-align: baseline; white-space: pre-wrap;"&gt;Validate and encode all user input.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Perl&lt;/h3&gt;&lt;h4&gt;Bad - The script blindly prints out the submitted comment&lt;/h4&gt;&lt;pre&gt;#!/usr/bin/perl
use CGI;

my $cgi = CGI-&gt;new();
my $text = $cgi-&gt;param('comment');

print $cgi-&gt;header();
print "You entered $text";&lt;/pre&gt;&lt;h4&gt;Good - The comment is being encoded before printed out&lt;/h4&gt;&lt;pre&gt;#!/usr/bin/perl
use CGI;
use HTML::Entities;

my $cgi = CGI-&gt;new();
my $text = $cgi-&gt;param('comment');

print $cgi-&gt;header();
print "You entered ", HTML::Entities::encode($text);&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4144</key><name>Improper_Encoding_Of_Output</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Since the application is not using context-specific encoding, it may be possible for an attacker to find a&amp;nbsp;Cross-Site Scripting (XSS) vulnerability, enabling them to&amp;nbsp;steal the user's password, request the user&amp;rsquo;s credit card information, provide false information, or run malicious code. All this would still be in context of the original web application, from the victim's perspective, allowing the attacker to effectively control the user's experience on the target website.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application dynamically creates JavaScript scripts in the website's pages, embedding&amp;nbsp;data generated on the server directly into the client JavaScript.&amp;nbsp;This data might be controllable from user input. In order to protect this page against Cross-Site Scripting (XSS) attacks, the application does ensure the data is encoded before being output into the response.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;However, the application does not perform proper context-specific&amp;nbsp;encoding, in particular encoding the input for HTML instead of JavaScript-specific encoding. This could allow an attacker to inject a JavaScript payload into the response, despite the encoding. This JavaScript would be executed by the victim's browser.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Generic Guidance&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avoid generating JavaScript code dynamically, based on user input or other data.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Fully encode all dynamic data before embedding it in output.&lt;/li&gt;
&lt;li&gt;Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;JavaScript encoding for server-generated JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using the &lt;code&gt;System.Web.Security.AntiXss.AntiXssEncoder&lt;/code&gt;&amp;nbsp;class (or the AntiXss library in older versions), to provide context-specific encoding methods.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;li&gt;Implement Content Security Policy (CSP) headers, to constrain and restrict the source of JavaScript code.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Specific Recommendations&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove the dynamically generated JavaScript code, and seperate any source of data from the source code.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;If it is necessary to dynamically generate JavaScript from data, use context-specific encoding on all data to properly mitigate XSS and simliar attacks.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Consider using Razor's built-in context encoding nuggets.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Generating JavaScript from Server Code&lt;/h4&gt;&lt;pre&gt;&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="javascriptGenerator.aspx.cs" 
  			Inherits="javascriptGenerator" %&gt;
&lt;script&gt; 
	var dataFromServer = "&lt;%= Server.HtmlEncode(this.JsCode); %&gt;";
	
    doSomething(dataFromServer);
&lt;/script&gt;&lt;/pre&gt;&lt;h4&gt;Using Modern Razor Auto Encoding&lt;/h4&gt;&lt;pre&gt;@{
	LayoutPage = "SiteLayout.cshtml";
}

&lt;script&gt; 
	var dataFromServer = "@this.JsCode"
	
    doSomething(dataFromServer);
&lt;/script&gt;&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2218</key><name>Use_of_Broken_or_Risky_Cryptographic_Algorithm</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Using a weak or broken algorithm ruins the protection granted by using cryptographic mechanisms in the first place, harming the confidentiality or integrity of sensitive user data. This could allow an attacker to steal secret information, alter sensitive data, or forge the source of modified messages.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application code specifies the name of the selected cryptographic algorithm, either via a String argument, a factory method, or a specific implementation class. These algorithms have fatal cryptographic weaknesses, that make it trivial to break in a reasonable timeframe. Strong algorithms should withstand attacks far beyond the realm of possible.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Only use strong, approved cryptographic algorithms, including AES, RSA, ECC, and SHA-256 respectively, amongst others.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Do not use weak algorithms that are considered completely broken, such as DES, RC4, and MD5, amongst others.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Avoid, where possible, using legacy algorithms that are not considered "future-proof" with sufficient safety margins, even though they are considered "safe enough" for today. This includes algorithms that are weaker than they should be, and have stronger replacements, even if they are not yet fatally broken - such as SHA-1, 3DES,&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Consider using a relevant official set of classifications, such as NIST or ENISA. If possible, use only FIPS 140-2 certified algorithm implementations.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Legacy Encryption with DES&lt;/h4&gt;&lt;pre&gt;private static byte[] encrypt(String plainText) {
	byte[] encData;
  
    SecretKey key = new SecretKeySpec(SECRET_KEY, "DES");

  	Cipher cipher = Cipher.getInstance("DES/ECB/NoPadding");
  	cipher.init(Cipher.ENCRYPT_MODE, key);

  	encData = cipher.doFinal(plainText.getBytes());
  	byte[] iv = cipher.getIV();
      
	return encData;
}&lt;/pre&gt;&lt;h4&gt;Modern Encryption with AES&lt;/h4&gt;&lt;pre&gt;private static byte[] encrypt(String plainText) {
	byte[] encData;
  
	try {
        SecretKey key = new SecretKeySpec(SECRET_KEY_FROM_CONFIG, "AES");

        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
			// Consider a stronger mode, such as GCM / CCM / or other AEAD mode, if required
        cipher.init(Cipher.ENCRYPT_MODE, key);

 		encData = cipher.doFinal(plainText.getBytes("UTF-8"));
        byte[] iv = cipher.getIV();

    } catch (GeneralSecurityException e) {
        handleError(e);
    }
	return encData;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_796</key><name>Session_Clearing_Problems</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Leaving the user's session in an active state after the user leaves the site may enable an attacker to impersonate the user, via session hijacking. Once the attacker gains the victim's session identifier, the attacker can perform any action in the application that the user is permitted, including accessing the user's personal data such as reading the user's records or changing the user account.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The web application tracks user state via a server-side session mechanism, providing the user's browser with a session identifier to allow the server to associate the browser request with the current&amp;nbsp;session. Typically the application will use this session object to cache various user-dependent data, however the application never actively removes this data from the session, or actively kills the session. If the user leaves the site after being logged in, the session remains active, even if the browser is closed. This can enable an attacker to continue to use the valid session identifier (e.g. if the user leaves the computer unlocked, or at an Internet cafe), and thus the live session. This will associate with the logged-in user.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Provide the user with a manual logout mechanism, to allow users to actively close their session.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Implement a session timeout, so that after a specific amount of time the session will automatically be logged out.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;When logging out the user, call &lt;code&gt;Session.Abandon()&lt;/code&gt; , and do not suffice with removing the sessionid from the browser's cookie.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;If the application does not require user sessions, disable the session mechanism in Web.config file:&amp;nbsp;&lt;code&gt;&lt;span class="tag"&gt;&amp;lt;sessionState&lt;/span&gt; &lt;span class="atn"&gt;mode&lt;/span&gt;&lt;span class="pun"&gt;=&lt;/span&gt;&lt;span class="atv"&gt;"Off"&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;User Login&lt;/h4&gt;&lt;pre&gt;private void Login(string Username, string Password)
{
	if (this.ValidatePassword(Username, Password)) 
    {
      	Session["Authenticated"] = true;
        Session["Username"] = Username; 
      	Session["Roles"] = this.GetRolesForUser(Username); 
    }
  	else 
    {
		Session["Authenticated"] = false; 
		RedirectToFailurePage();
    }
}&lt;/pre&gt;&lt;h4&gt;User Login with Logout&lt;/h4&gt;&lt;pre&gt;private void Login(string Username, string Password)
{
	if (this.ValidatePassword(Username, Password)) 
    {
      	Session["Authenticated"] = true;
        Session["Username"] = Username; 
      	Session["Roles"] = this.GetRolesForUser(Username); 
    }
  	else 
    {
		Session.Abandon(); 
		RedirectToFailurePage("Login failed");
    }
}

protected void Logout_Click() 
{
		Session.Abandon();
  		RedirectToHomePage("You have logged out successfully");
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_772</key><name>Reflected_XSS_All_Clients</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to cause a user to send the website engineered input, rewriting web pages and inserting malicious scripts. The attacker can then pretend to be the original website, which would enable the attacker to steal the user's password, request the user&amp;#8217;s credit card information, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website, and the victim would blame the site for incurred damage.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from previous user input. The user input is embedded directly in the page's HTML, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary user input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Fully encode all dynamic data before embedding it in output.&lt;/li&gt;
&lt;li&gt;Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;JavaScript encoding for server-generated JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or the built-in platform functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User input is written to a label displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClients {
	public static void XSSExample(TextArea name) {	
		Label label = new Label();		
		label.setText("Hello " + name.getText());	
	}
}&lt;/pre&gt;&lt;h4&gt;Switch case is used in order to assemble the label's text value and manage wrong user input&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClientsFixed {
	public static void XSSExample(TextArea name) {
		Label label = new Label();		
		switch (name) {
		case "Joan":
			label.setText("Hello Joan");	
			break;
		case "Jim":
			label.setText("Hello Jim");	
			break;
		case "James":
			label.setText("Hello James");	
			break;
		default:
			System.out.println("Wrong Input");
		}
	}
}&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Bad - The application uses the "Referer" field string to construct the HttpResponse&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClients
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(Referer);
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "Referer" field string is HTML encoded before use&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClientsFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response, AntiXss.AntiXssEncoder encoder)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(encoder.HtmlEncode(Referer, true));
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - User input is written to a TextBox displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClients
{
        public void foo(TextBox tb)
        {
                string input = Console.ReadLine();
                tb.Text = input;
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The user input is HTML encoded before being displayed on the screen&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClientsFixed
{
        public void foo(TextBox tb, AntiXssEncoder encode)
        {
                string input = Console.ReadLine();
                tb.Text = encode.HtmlEncode(input);
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - The application uses the "filename" field string from an HttpRequest construct an HttpResponse&lt;/h4&gt;&lt;pre&gt;public class UTF7XSS
{
        public void foo(HttpRequest Request, HttpResponse Response
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["filename"];
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "filename" string is converted to an int and using a switch case the new "filename" string is constructed&lt;/h4&gt;&lt;pre&gt;public class UTF7XSSFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["fileNum"];
                int fileNum = Convert.ToInt32(filename);
                
                switch(fileNum)
                {
                        case 1:
                                filename = "File1.txt";
                                break;
                        default:
                                filename = "File2.txt";
                                break;
                }
                
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_782</key><name>Improper_Resource_Shutdown_or_Release</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Unreleased resources can cause a drain of those available for system use, eventually causing general reliability and availability problems, such as performance degradation, process bloat, and system instability. If a resource leak&amp;nbsp;can be intentionally exploited by an attacker, it may be possible to cause a widespread DoS (Denial of Service) attack. This might even expose sensitive information between unprivileged users, if the resource continues to retain&amp;nbsp;data or user id&amp;nbsp;between subsequent allocations.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application code allocates resource objects, but does not ensure these are always closed and released in a timely manner. This can include database connections, file handles, network sockets, or any other resource that needs to be released.&amp;nbsp;In some cases,&amp;nbsp;these might be released - but only if everything works as planned; if there is any runtime exception during the normal course of system operations, resources start to leak.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Note that even in managed-memory languages such as Java, these resources must be explicitly released. Many types of resource are not released even when the Garbage Collector runs; and even if the the object would eventually release the resource, we have no control over when the Garbage Collector does&amp;nbsp;run.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Always close and release all resources.&lt;/li&gt;
&lt;li&gt;Ensure resources are released (along with&amp;nbsp;any other necessary cleanup) in a &lt;code&gt;finally { }&lt;/code&gt; block. Do not close resources in a &lt;code&gt;catch { }&lt;/code&gt; block, since this is not ensured to be called.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Explicitly call .close() on any instance of a class that implements the &lt;code&gt;Closable&lt;/code&gt; or &lt;code&gt;AutoClosable&lt;/code&gt; interfaces.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Alternatively, an even better solution is to use the try-with-resources idiom, in order to automatically close any defined&amp;nbsp;&lt;code&gt;AutoClosable&lt;/code&gt;&amp;nbsp;instances.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Unreleased Database Connection&lt;/h4&gt;&lt;pre&gt;private MyObject getDataFromDb(int id)  {
	MyObject data = null;
  
  	try {
		Connection con = DriverManager.getConnection(CONN_STRING);
      	
      	data = queryDb(con, id); 
	}
	catch ( SQLException e ) {
		handleError(e);
	}
}  &lt;/pre&gt;&lt;h4&gt;Explicit Release of Database Connection&lt;/h4&gt;&lt;pre&gt;private MyObject getDataFromDb(int id)  {
	MyObject data = null;
  
  	try {
		Connection con = DriverManager.getConnection(CONN_STRING);
      	
      	data = queryDb(con, id); 
	}
	catch ( SQLException e ) {
		handleError(e);
	}
  	finally {
      	if ((con != null) &amp;&amp; (! con.isClosed())) {
          	con.close();
        }
    }
}  &lt;/pre&gt;&lt;h4&gt;Automatic Implicit Release Using Try-With-Resources&lt;/h4&gt;&lt;pre&gt;private MyObject getDataFromDb(int id)  {
	MyObject data = null;
  
  	try (Connection con = DriverManager.getConnection(CONN_STRING)) {
      	data = queryDb(con, id); 
	}
	catch ( SQLException e ) {
		handleError(e);
	}
}  &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_792</key><name>Leaving_Temporary_Files</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Applications often create temporary files containing sensitive business data or personal information, in order to handle the file generation process in&amp;nbsp;several steps, or even as the output of an automatic process. These files, if left exposed&amp;nbsp;on disk for an indeterminate period of time, could leak the secret data to unauthorized users.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;It is very common for applications to use temporary files, as intermediate storage and to aid with processing large amounts of data or long-running calculations. Applications require such files so frequently that most operating systems allocate a dedicated area for temporary files, such as a TEMP directory, and several different mechanisms for creating them exist in most platforms. However, by default these temporary files are not deleted automatically, and will remain on disk indefinitely. If the program does not explicitly and proactively delete the temporary files when it is finished processing them, they might be accessbile to other users of the computer.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Always explicitly delete any temporary file created. Ensure temp file deletion will occur by wrapping it in a &lt;code&gt;finally { }&lt;/code&gt; block, or call &lt;code&gt;File.deleteOnExit()&lt;/code&gt; to ensure eventual deletion.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Additionally, to ensure that all temporary files will eventually be deleted, consider implementing additional functionality that will periodically scrape and delete all unused, existing temporary files.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ensure all existing file handles or references are closed before attempting deletion.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Leaving Temporary Report File&lt;/h4&gt;&lt;pre&gt;private byte[] generateData(int key) {
	File tempFile = File.createTempFile(TEMP_PREFIX, ".txt");   

  	FileOutputStream writer = new FileOutputStream(tempFile); 
  	ReportGenerator.writeHugeReportToFileStream(writer, key); 
  
  	FileInputStream reader = new FileInputStream(tempFile); 
  	int length = reader.available(); 
  	if (length &gt; 0) {
  		byte[] reportData = new byte[length];
		reader.read(reportData);
      
      	return reportData;
    }
  	else {
      	return null; 
    }
}&lt;/pre&gt;&lt;h4&gt;Cleaning Up Temporary Report File&lt;/h4&gt;&lt;pre&gt;private byte[] generateData(int key) {
  	byte[] reportData = null; 
  	File tempFile = null;
	FileOutputStream writer = null;
	FileInputStream reader = null;
	
  	try { 
      tempFile = File.createTempFile(TEMP_PREFIX, ".txt");

      writer = new FileOutputStream(tempFile); 
      ReportGenerator.writeHugeReportToFileStream(writer, key); 

      reader = new FileInputStream(tempFile); 
      int length = reader.available(); 
      if (length &gt; 0) {
		  reportData = new byte[length];
          reader.read(reportData);
      }
    }
  	catch (IOException e) {
      	handleError(e); 
    }
  	finally { 
		if (reader != null) {
          	try {
        		reader.close(); 
            }
      		catch (IOException e) {
      			handleError(e); 
    		}
        }
      
      	if (writer != null) {
          	try {
          		writer.close(); 
            }
            catch (IOException e) {
                handleError(e); 
            }
        }

      	if (tempFile != null) {
          	try { 
            	tempFile.delete(); 
            }
            catch (IOException e) {
                handleError(e); 
            }
        }
    }
  	return reportData;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_783</key><name>Just_One_of_Equals_and_Hash_code_Defined</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If an application class explictly defines an override for only one of the&amp;nbsp;&lt;code&gt;.equals()&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;.hashCode()&lt;/code&gt;&amp;nbsp;methods, but not the other, this can negatively affect the application's integrity, and possibly cause inconsistent and unexpected results. This may also affect system performance, when using instances of this class in a hashtable or set.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The general language contract for implementing classes requires the class to implement both &lt;code&gt;.equals()&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;.hashCode()&lt;/code&gt;&amp;nbsp;methods (or neither). This requirement is important for hash tables and other data structures, and to ensure the class behavior is consistent between these methods. However, this class does in fact only implement one of these methods, but not the other, resulting in a broken object.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Define overriding implementations for both&amp;nbsp;&lt;code&gt;.equals()&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;.hashCode()&lt;/code&gt;&amp;nbsp;methods, or not at all. If one is overridden, then both must be.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Note the general principle is: if &lt;code&gt;x.equals(y)&lt;/code&gt;, then &lt;code&gt;x.hashCode()&lt;/code&gt; must be equal to &lt;code&gt;y.hashCode()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Consider using the &lt;code&gt;EqualsBuilder&lt;/code&gt; and &lt;code&gt;HashCodeBuilder&lt;/code&gt; classes from the Apache Commons library.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Incomplete Implementation&lt;/h4&gt;&lt;pre&gt;public class Foo {
	int fooId; 
  	String name; 

  	@Override
  	public boolean equals(Object obj) {
      	if (obj instanceof Foo) {
          	if (obj == this)
              	return true;
          
          	Foo other = (Foo)obj;
          	return this.fooId.equals(other.fooId);
        }
      	else { 
          	return false;
        }
    }
  	// Two equal objects, with same fooId, will have different hash codes
  	// This can result in duplicate fooIds being added to a HashTable
}&lt;/pre&gt;&lt;h4&gt;Proper Implementation&lt;/h4&gt;&lt;pre&gt;public class Foo {
	int fooId; 
  	String name; 

  	@Override
  	public boolean equals(Object obj) {
      	if (obj instanceof Foo) {
          	if (obj == this)
              	return true;
          
          	Foo other = (Foo)obj;
          	return this.fooId.equals(other.fooId);
        }
      	else { 
          	return false;
        }
    }

  	@Override
  	public int hashCode() {
      	return this.fooId.hashCode(); 
      	// This keeps hashCode consistent with equality 
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_805</key><name>Cross_Site_History_Manipulation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could compromise the browser's Same Origin Policy and violate a user's privacy, by manipulating the browser's History object in JavaScript. This could allow the attacker in certain situations to detect whether the user is logged in, track the user's activity, or infer the&amp;nbsp;state of other conditional values. This may also enhance Cross Site Request Forgery (XSRF) attacks, by leaking the result of the initial attack.&amp;nbsp;&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Modern browsers expose the user's browsing history to local JavaScript as a stack of previously visited URLs. While the browsers enforce a strict Same Origin Policy (SOP) to prevent pages from one website from reading visited URLs on other websites, the History object does leak the size of the history stack. Using only this information, in some situations the attacker can discover the results of certain checks the application performs on the server-side. For example, if the application redirects an unauthenticated user to the login page, a script on another website can detect that whether or not the&amp;nbsp;user is logged in, by checking the length of the History object.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;This information leakage is enabled when the application redirects the user's browser based on the value of some condition, the state of the user's server-side session. E.g. whether the user is authenticated to the application, if the user has visited a certain page with specific parameters, or the value of some application data. For more information, see&amp;nbsp;https://www.checkmarx.com/wp-content/uploads/2012/07/XSHM-Cross-site-history-manipulation.pdf .&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Add the response header "X-Frame-Options: DENY" to all sensitive pages in the application, to protect against the IFrame version of XSHM in modern browser versions.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Add a random value to all targeted URLs as a parameter.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Example of code that leaks the variable state via browser history
      &lt;/h4&gt;&lt;pre&gt;If (!isAuthenticated)
    response.sendRedirect("Login.jsp");     &lt;/pre&gt;&lt;h4&gt;
Example code that prevents history leakage via random token
      &lt;/h4&gt;&lt;pre&gt;if (request.getParameter("r") == null)
    response.sendRedirect("Login.jsp?r=" + (new Random()).nextInt());

If (!isAuthenticated)
    response.sendRedirect("Login.jsp?r=" + (new Random()).nextInt());&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3773</key><name>Heap_Inspection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;All variables stored by the application in unencrypted memory can potentially be retrieved by an unauthorized user, with privlieged access to the&amp;#160;machine. For example, a privileged attacker could attach a debugger to the running process, or retrieve the process's memory from the swapfile or crash dump file.&amp;#160;&lt;/div&gt;
&lt;div&gt;Once the attacker&amp;#160;finds the user passwords in memory, these can be reused to easily impersonate the user to the system.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;String variables are immutable - in other words, once a string variable is assigned, its value cannot be changed or removed. Thus, these strings may remain&amp;#160;around in memory, possibly in multiple locations, for an indefinite period of time until the garbage collector happens to remove it. Sensitive data, such as passwords, will remain exposed in memory as plaintext with no control over their lifetime.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not store senstiive data, such as passwords or encryption keys, in memory in plaintext, even for a short period of time.&amp;#160;&lt;/li&gt;
&lt;li&gt;Prefer to use specialized classes that store&amp;#160;encrypted memory.&amp;#160;&lt;/li&gt;
&lt;li&gt;Alternatively, store secrets temporarily in mutable data types, such as byte arrays, and then promptly zeroize the&amp;#160;memory locations.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations - Java:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Instead of storing passwords in immutable strings, prefer to use an encrypted memory&amp;#160;object, such as SealedObject. &amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;div&gt;Specific Recommendations - .NET:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Instead of storing passwords in immutable strings, prefer to use an encrypted memory&amp;#160;object, such as&amp;#160;SecureString or ProtectedData.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CPP&lt;/h3&gt;&lt;h4&gt;Vulnerable C code&lt;/h4&gt;&lt;pre&gt;/* Vulnerable to heap inspection */

#include &lt;stdio.h&gt;


void somefunc(){
	printf("Yea, I'm just being called for the heap of it..\n");
}

void authfunc(){
        char* password = (char *) malloc(256);
        char ch;
        ssize_t k;
		int i=0;
        while(k = read(0, &amp;ch, 1) &gt; 0)
        {
                if (ch == '\n'){
                        password[i]='\0';
                        break;
                } else{
                        password[i++]=ch;
                        fflush(0);
                }
        }
        printf("Password: %s\n",&amp;password[0]);
}

int main()
{
    printf("Please enter a password:\n");

	authfunc();
	printf("You can now dump memory to find this password!");
	somefunc();
	gets();

}
&lt;/pre&gt;&lt;h4&gt;Safe C code&lt;/h4&gt;&lt;pre&gt;/* Pesumably safe heap */

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define STDIN_FILENO 0

void somefunc(){
        printf("Yea, I'm just being called for the heap of it..\n");
}

void authfunc(){
	char* password = (char*) malloc(256);
	int i=0;
	char ch;
	ssize_t k;
	while(k = read(STDIN_FILENO, &amp;ch, 1) &gt; 0)
	{
		if (ch == '\n'){
			password[i]='\0';
			break;
		} else{
			password[i++]=ch;
			fflush(0);
		}
	}
	i=0;
	memset(password,'\0',256);
}

int main()
{
	printf("Please enter a password:\n");
	authfunc();
	somefunc();
	char ch;
	while(read(STDIN_FILENO, &amp;ch, 1) &gt; 0)
	{
		if (ch == '\n')
			break;
	}
}
&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Plaintext Password in Immutable String&lt;/h4&gt;&lt;pre&gt;
class Heap_Inspection 
{
  private string password;
	
  void setPassword()
  {	
	password = System.console().readLine("Enter your password: ");
  }
}
&lt;/pre&gt;&lt;h4&gt;Password Protected in Memory&lt;/h4&gt;&lt;pre&gt;class Heap_Inspection_Fixed 
{
  private SealedObject password;
	
  void setPassword()
  {	
	byte[] sKey = getKeyFromConfig();
	Cipher c = Cipher.getInstance("AES");
	c.init(Cipher.ENCRYPT_MODE, sKey);

	char[] input = System.console().readPassword("Enter your password: ");
	password = new SealedObject(Arrays.asList(input), c);
  }
}

&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_814</key><name>Improper_Locking</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Incomplete management of explicit thread locking can lead to deadlocked threads, wherein one thread (or several) is blocked while waiting for the other thread to release it's lock - which will&amp;#160;never happen, causing the other threads to be disabled indefinitely. This could also cause the application to&amp;#160;consume other resources indefinitely, without releasing them. At the very least, this flaw will severly limit throughput of the application, by blocking the multithreaded operations.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;In order to improve performance and raise throughput, the application has several threads performing operations in parallel. In certain situations, sensitive methods need to ensure that other threads are not interferring with the integrity of their operations or data. To do so, these methods need to acquire a lock (commonly known as mutex, monitor, or other types) to synchronize access between threads.&lt;/div&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;div&gt;However, in this case, the synchronization lock is never unlocked, and can cause the other threads to continuously await its release indefinitely.&amp;#160;&lt;/div&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Always ensure any synchronization locks are explicitly released.&amp;#160;&lt;/li&gt;
&lt;li&gt;In particular, use strucutured error handling to ensure that the locks are released even after runtime exceptions.&amp;#160;&lt;/li&gt;
&lt;li&gt;Avoid manual locking, if&amp;#160;possible, instead using&amp;#160;automatic&amp;#160;locking via&amp;#160;synchronized blocks and methods where available.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Threaded code without releasing the synchronization lock&lt;/h4&gt;&lt;pre&gt;class Improper_Locking 
{
   private final ReentrantLock lock = new ReentrantLock();
   public void m()
   {
     lock.lock();
     DoSomethingSynchronized();
   }
}
    &lt;/pre&gt;&lt;h4&gt;Proper Lock release&lt;/h4&gt;&lt;pre&gt; class Improper_Locking_Fixed
{
   private final ReentrantLock lock = new ReentrantLock();
 
   public void m()
   {
     try
    {
	    lock.lock();
        DoSomethingSynchronized();
    } 
    finally 
    {
        lock.unlock();
    }
  }
}
 
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_810</key><name>Use_of_Hard_coded_Cryptographic_Key</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Static, unchangeable encryption keys in the source code can be stolen by an attacker with access to the source code or the application binaries. Once the attacker has the encryption key, this can be used to gain access to any encrypted secret data, thus violating the confidentiality of the data. Furthermore, it would be impossible to replace the encryption key once stolen. Note that if this is&amp;#160;a product that can be installed numerous times, the encryption key will always be the same, allowing an attacker to break all instances at the same cost.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application code uses an encryption key to encrypt and decrypt sensitive data. While it is important to create this encryption key randomly and keep it secret, the application has a single, static key embedded in plain text in the source code.&amp;#160;&lt;/div&gt;
&lt;div&gt;An attacker could gain access to the source code - whether in the source control system, developer workstations, or the server filesystem or product binaries themselves. Once the attacker has gained access to the source code, it is trivial to retrieve the plain text encryption key and use it to decrypt the sensitive data that the application was protecting.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Do not store any sensitive information, such as encryption keys, in plain text.&lt;/li&gt;
&lt;li&gt;Never&amp;#160;hardcode encryption keys in the application source code.&amp;#160;&lt;/li&gt;
&lt;li&gt;Implement proper key management, including dynamically generating random keys, protecting keys, and replacing keys as necessary.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Remove the hardcoded encryption key from the application source code. Instead, retrieve the key from an external, protected store.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Common example of hardcoded encryption key&lt;/h4&gt;&lt;pre&gt;
//Generate a key
string encryptionKey = "EncryptionKey123"

//Encrypt the data
SecretKeySpec keySpec = new SecretKeySpec(encryptionKey.getBytes(), "AES");
Cipher cipher = Cipher.getInstance("AES/CBC/PKCS7Padding");
cipher.init(Cipher.ENCRYPT_MODE, keySpec);
output = cipher.doFinal(input)
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_818</key><name>SQL_Injection_Evasion_Attack</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. Using available&amp;#160;tools and basic text editing, the attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;div&gt;The application communicates with its database by sending a textual SQL query. The application creates the query by simply concatenating strings including the user's input. The&amp;#160;user input is not&amp;#160;checked properly for data type validity nor subsequently sanitized.&lt;/div&gt;
&lt;div&gt;In particular, the application decodes the user input (typically from HTML encoding format), before embedding it in the database query. Since the application decodes the input before using it, an attacker could obscure&amp;#160;his malicious payload by encoding it before sending to the server, thus concealing the attack from most protection mechanisms. &amp;#160;&lt;/div&gt;
&lt;div&gt;As such,&amp;#160;the input could contain SQL commands that would be interpreted as such by the database, without being detected or blocked by most countermeasures.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;In particular, all data validation should be performed after canonicalization, i.e. after the data has been decoded and simplified.&amp;#160;&lt;/li&gt;
&lt;li&gt;Instead of concatenating strings, use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters). Alternatively, an&amp;#160;even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&amp;#160;&lt;/li&gt;
&lt;li&gt;Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Perform input sanitization after the decoding.&amp;#160;&lt;/li&gt;
&lt;li&gt;Use Prepared Statements or&amp;#160;Stored Procedures instead of string concatenation.&lt;/li&gt;
&lt;li&gt;Use an ORM (such as Hibernate, iBatis, or EntityFramework) to wrap data access instead of directly querying the database.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;div&gt;&amp;#160;&lt;/div&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;SQL Injection attack evading sanitization via HTML encoding&lt;/h4&gt;&lt;pre&gt;
String custId = request.getParameter("customerId");

String safeCustId = custId.replace("'", " ");  // Remove all quotes

String query = "SELECT accountBalance FROM customers WHERE customerId = '" 
                    + htmlDecode(safeCustId) + "' ";

Statement s = (Statement) con.createStatement();
ResultSet result = s.executeQuery(query);
&lt;/pre&gt;&lt;h4&gt;Proper Sanitization After Canonicalization using Parameterized Queries&lt;/h4&gt;&lt;pre&gt;
String custId = request.getParameter("customerId");

String safeCustId = htmlDecode(custId);
safeCustId = safeCustId.replace("'", " ");  // Remove all quotes AFTER decoding

String query = "SELECT accountBalance FROM customers WHERE customerId = ?"; 

try {
    PreparedStatement pstmt = connection.prepareStatement( query );
    pstmt.setString( 1, safeCustId );
    ResultSet results = pstmt.executeQuery( );
}
catch (SQLException se) {
    // ... logging and error handling
}
&lt;/pre&gt;&lt;h4&gt;Proper Sanitization After Canonicalization using Stored Procedures&lt;/h4&gt;&lt;pre&gt;
String custId = request.getParameter("customerId");

String safeCustId = htmlDecode(custId);
safeCustId = safeCustId.replace("'", " ");  // Remove all quotes AFTER decoding

String query = "SELECT accountBalance FROM customers WHERE customerId = ?"; 

try {
    CallableStatement cs = conn.prepareCall("{call getAccountBalance(?)}");
    cs.setString(1, safeCustId);
    ResultSet results = cs.executeQuery();
}
catch (SQLException se) {
    // ... logging and error handling
}

&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_832</key><name>CookieLess_Session</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;&lt;span style="font-family: Verdana, Arial, Helvetica, Geneva, sans-serif; "&gt;When an application enables cookieless authentication or sessions, the user identifiers (session id and authentication token) are sent embedded in all application URLs. This increases the risk of leaking the identifier to other unauthorized entities, such as other users or external systems, which would enable session hijacking attacks.&amp;#160;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style="font-family: Verdana, Arial, Helvetica, Geneva, sans-serif; "&gt;Likewise, URL-based identifiers can also enable injection attacks, such as session fixation attacks, allowing an attacker to pre-select the victim's sessionid.&amp;#160;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style="font-family: Verdana, Arial, Helvetica, Geneva, sans-serif; "&gt;&lt;span style="text-align: -webkit-auto; orphans: 2; widows: 2;"&gt;In either of these types of attacks, an&amp;#160;attacker can essentially take over a legitimate user's account, by reusing their active session. Once the attacker has access to the victim's session, she can do anything the user can, as the user.&amp;#160;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;With the user's session identifier, or authentication token, being sent in all application URLs, there are several ways this secret identifier can leak:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Server and proxy logs&lt;/li&gt;
&lt;li&gt;Referer HTTP header (especially to external systems)&lt;/li&gt;
&lt;li&gt;User sharing of internal URLs&lt;/li&gt;
&lt;li&gt;User screenshots&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;In any of these scenarios, and others, the user and browser are not treating the URL as secret, and thus could accidentally&amp;#160;expose the secret sessionid publicly. An attacker could easily reuse this sessionid to hijack the user's session.&amp;#160;&lt;/div&gt;
&lt;div&gt;Additionally, an attacker can provide a user with a link to the attacker's pre-established session, causing the victim to login the attacker's session with the victim's credentials, essentially providing the attacker with the user's account. This is known as "Session Fixation".&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not enable cookieless authentication or cookieless sessions.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly require the application to enforce cookie-based authentication and sessions only, using the "&lt;code&gt;UseCookies&lt;/code&gt;" value to the &lt;code&gt;cookieless&lt;/code&gt; attribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Cookieless Sessions Enabled&lt;/h4&gt;&lt;pre&gt;&lt;configuration&gt;
    &lt;system.web&gt;
        &lt;sessionState cookieless ="UseUri" &gt;&lt;/sessionState&gt;

        &lt;authentication mode="Forms"&gt;
            &lt;forms cookieless="UseUri"&gt;
        &lt;/authentication&gt;

    &lt;/system.web&gt;
&lt;/configuration&gt;
&lt;/pre&gt;&lt;h4&gt;Cookie-based Sessions Only&lt;/h4&gt;&lt;pre&gt;&lt;configuration&gt;
    &lt;system.web&gt;
        &lt;sessionState cookieless ="UseCookies" &gt;&lt;/sessionState&gt;

        &lt;authentication mode="Forms"&gt;
            &lt;forms cookieless="UseCookies"&gt;
        &lt;/authentication&gt;

    &lt;/system.web&gt;
&lt;/configuration&gt;
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_795</key><name>Information_Leak_Through_Persistent_Cookies</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker with access to the user's desktop, or unprotected network connection, could steal the user's password and other sensitive data stored in the cookie. Once the password is stolen, the attacker can impersonate her victim to the application, and do anything the user can do. The application would not be able to discern the difference, since the user's own password was used.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application sends sensitive user data, including passwords, back to the user's browser embedded in a cookie. Persistent cookies are stored in a file on the user's computer, where they might be accessed by an unauthorized user, thus exposing the user's password.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Do not store passwords, or any other secret data besides sessionid, in cookies.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Storing user credentials in cookie&lt;/h4&gt;&lt;pre&gt;public bool LoginUser(string username, string password)
{
    bool isValid = false;

    if (Authenticate(username, password))
    {
        isValid = true; 
        
        HttpCookie cookie = new HttpCookie("credentials", 
                                            username + ":" + password);
        cookie.Expires = DateTime.Now.AddDays(30);
        
        Response.Cookies.Add(cookie);
    }
    
    return isValid;
}&lt;/pre&gt;&lt;h4&gt;Use a GUID instead of credentials&lt;/h4&gt;&lt;pre&gt;public bool LoginUser(string username, string password)
{
    bool isValid = false;

    if (Authenticate(username, password))
    {
        isValid = true; 
        
        Guid id = Guid.NewGuid(); 
        SaveUserGuidToDB(username, id); 
        
        HttpCookie cookie = new HttpCookie("id", id.ToString());
        cookie.Expires = DateTime.Now;
        cookie.Secure = true;
        cookie.HttpOnly = true;
        
        Response.Cookies.Add(cookie);
    }
    
    return isValid;
}&lt;/pre&gt;&lt;h4&gt;Using FormsAuthentication Class&lt;/h4&gt;&lt;pre&gt;public bool LoginUser(string username, string password)
{
    bool isValid = false;

    if (Authenticate(username, password))
    {
        isValid = true; 
        FormsAuthentication.SetAuthCookie(username, false);
    }
    
    return isValid;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_831</key><name>CookieLess_Authentication</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;&lt;span style="font-family: Verdana, Arial, Helvetica, Geneva, sans-serif; "&gt;When an application enables cookieless authentication or sessions, the user identifiers (session id and authentication token) are sent embedded in all application URLs. This increases the risk of leaking the identifier to other unauthorized entities, such as other users or external systems, which would enable session hijacking attacks.&amp;#160;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style="font-family: Verdana, Arial, Helvetica, Geneva, sans-serif; "&gt;Likewise, URL-based identifiers can also enable injection attacks, such as session fixation attacks, allowing an attacker to pre-select the victim's sessionid.&amp;#160;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style="font-family: Verdana, Arial, Helvetica, Geneva, sans-serif; "&gt;&lt;span style="text-align: -webkit-auto; orphans: 2; widows: 2;"&gt;In either of these types of attacks, an&amp;#160;attacker can essentially take over a legitimate user's account, by reusing their active session. Once the attacker has access to the victim's session, she can do anything the user can, as the user.&amp;#160;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;With the user's session identifier, or authentication token, being sent in all application URLs, there are several ways this secret identifier can leak:&amp;#160;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Server and proxy logs&lt;/li&gt;
&lt;li&gt;Referer HTTP header (especially to external systems)&lt;/li&gt;
&lt;li&gt;User sharing of internal URLs&lt;/li&gt;
&lt;li&gt;User screenshots&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;In any of these scenarios, and others, the user and browser are not treating the URL as secret, and thus could accidentally&amp;#160;expose the secret sessionid publicly. An attacker could easily reuse this sessionid to hijack the user's session.&amp;#160;&lt;/div&gt;
&lt;div&gt;Additionally, an attacker can provide a user with a link to the attacker's pre-established session, causing the victim to login the attacker's session with the victim's credentials, essentially providing the attacker with the user's account. This is known as "Session Fixation".&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not enable cookieless authentication or cookieless sessions.&amp;#160;&lt;/li&gt;
&lt;li&gt;Explicitly require the application to enforce cookie-based authentication and sessions only, using the "&lt;code&gt;UseCookies&lt;/code&gt;" value to the &lt;code&gt;cookieless&lt;/code&gt; attribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Cookieless Sessions Enabled&lt;/h4&gt;&lt;pre&gt;&lt;configuration&gt;
    &lt;system.web&gt;
        &lt;sessionState cookieless ="UseUri" &gt;&lt;/sessionState&gt;

        &lt;authentication mode="Forms"&gt;
            &lt;forms cookieless="UseUri"&gt;
        &lt;/authentication&gt;

    &lt;/system.web&gt;
&lt;/configuration&gt;
&lt;/pre&gt;&lt;h4&gt;Cookie-based Sessions Only&lt;/h4&gt;&lt;pre&gt;&lt;configuration&gt;
    &lt;system.web&gt;
        &lt;sessionState cookieless ="UseCookies" &gt;&lt;/sessionState&gt;

        &lt;authentication mode="Forms"&gt;
            &lt;forms cookieless="UseCookies"&gt;
        &lt;/authentication&gt;

    &lt;/system.web&gt;
&lt;/configuration&gt;
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_786</key><name>Use_Of_Hardcoded_Password</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Hardcoded passwords expose the application to password leakage. If an attacker gains access to the source code, she will be able to steal the embedded passwords, and use them to impersonate a valid user. This could include impersonating end users to the application, or impersonating the application to a remote system, such as a database or a remote web service.&amp;#160;&lt;/div&gt;
&lt;div&gt;Once the attacker succeeds in impersonating the user or application, she will have full access to the system, and be able to do anything the impersonated identity could do.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application codebase&amp;#160;has string literal passwords embedded in the source code. This hardcoded value is used either to compare to user-provided credentials, or to authenticate downstream to a remote system (such as a database or a remote web service). &amp;#160;&lt;/div&gt;
&lt;div&gt;An attacker only needs to gain access to the source code to reveal the hardcoded password. Likewise, the attacker can reverse engineer the compiled application binaries, and easily retrieve the embedded password. Once found, the attacker can easily use the password in impersonation attacks, either directly on the application or to the remote system.&amp;#160;&lt;/div&gt;
&lt;div&gt;Furthermore, once stolen, this password cannot be easily changed to prevent further misuse, unless a new version of the application is compiled. Moreover, if this application is distributed to numerous systems, stealing the password from one system automatically allows a class break in to all the deployed systems.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Do not hardcode any secret data in source code, especially not passwords.&amp;#160;&lt;/li&gt;
&lt;li&gt;In particular, user passwords should be stored in a&amp;#160;database or directory service, and protected with a strong password hash (e.g. bcrypt, scrypt, PBKDF2, or Argon2). Do not compare user passwords with a hardcoded value.&amp;#160;&lt;/li&gt;
&lt;li&gt;Sytem passwords should be stored in a configuration file or the database, and protected with strong encryption (e.g. AES-256). Encryption keys should be securely managed, and not hardcoded.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Hardcoded Admin Password&lt;/h4&gt;&lt;pre&gt;bool isAdmin(String username, String password) {
    bool isMatch = false; 
    
    if (username.equals("admin")) {
        if (password.equals("P@ssw0rd"))
            return isMatch = true;
    }
    
    return isMatch;
}&lt;/pre&gt;&lt;h4&gt;No Hardcoded Credentials&lt;/h4&gt;&lt;pre&gt;bool isAdmin(String username, String password) {
    bool adminPrivs = false;
    
    if (authenticateUser(username, password)) { 
        UserPrivileges privs = getUserPrivilieges(username);
        
        if (privs.isAdmin)
            adminPrivs = true;
    }
    
    return adminPrivs;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3070</key><name>Missing_X_Frame_Options</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Allowing setting of web-pages inside of a frame in an untrusted web-page will leave these web-pages vulnerable to Clickjacking, otherwise known as a redress attack. This may allow an attacker to redress a vulnerable web-page by setting it inside a frame within a malicious web-page. By crafting a convincing malicious web-page, the attacker can then use the overlayed redress to convince the user to click a certain area of the screen, unknowingly clicking inside the frame containing the vulnerable web-page, and thus performing actions within the user's context on the attacker's behalf.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Failure to utilize the "X-FRAME-OPTIONS" header will likely allow attackers to perform Clickjacking attacks. Properly utilizing the "X-FRAME-OPTIONS" header would indicate to the browser to disallow embedding the web-page within a frame, mitigating this risk, if the browser supports this header. All modern browsers support this header by default.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Utilize the "X-FRAME-OPTIONS" header flags according to business requirements to restrict browsers that support this header from allowing embedding web-pages in a frame:&lt;/p&gt;
&lt;p class="MsoListParagraphCxSpFirst" dir="LTR" style="margin: 0cm 0cm 8pt 36pt; text-indent: -18pt; direction: ltr; unicode-bidi: embed;"&gt;&lt;!-- [if !supportLists]--&gt;&lt;span style="font-family: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol;"&gt;&amp;middot;&lt;span style="font-variant-numeric: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;"X-Frame-Options: DENY" will indicate to the browser to disallow&amp;nbsp;embedding any web-page inside a frame, including the current web-site.&lt;/p&gt;
&lt;p class="MsoListParagraphCxSpMiddle" dir="LTR" style="margin: 0cm 0cm 8pt 36pt; text-indent: -18pt; direction: ltr; unicode-bidi: embed;"&gt;&lt;!-- [if !supportLists]--&gt;&lt;span style="font-family: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol;"&gt;&amp;middot;&lt;span style="font-variant-numeric: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;"X-Frame-Options: SAMEORIGIN" will indicate to the browser to disallow&amp;nbsp;embedding any web-page inside a frame,&amp;nbsp;excluding the current web-site.&lt;/p&gt;
&lt;p class="MsoListParagraphCxSpLast" dir="LTR" style="margin: 0cm 0cm 8pt 36pt; text-indent: -18pt; direction: ltr; unicode-bidi: embed;"&gt;&lt;!-- [if !supportLists]--&gt;&lt;span style="font-family: Symbol; mso-fareast-font-family: Symbol; mso-bidi-font-family: Symbol;"&gt;&amp;middot;&lt;span style="font-variant-numeric: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: 'Times New Roman';"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/span&gt;&lt;/span&gt;&lt;!--[endif]--&gt;"X-Frame-Options: ALLOW-FROM https://example.com/" will indicate to the browser to disallow embedding any web-page inside a frame,&amp;nbsp;excluding&amp;nbsp;the web-site listed after the ALLOW-FROM parameter.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Setting the "DENY" Flag on a Response&lt;/h4&gt;&lt;pre&gt;response.addHeader("X-Frame-Options", "DENY");&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_834</key><name>DebugEnabled</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Tests and debugging code are not intended to be deployed to the production environment, and can create unintended entry points, thus increasing the application's attack surface. Furthermore, this code is often not properly tested or maintained, and can retain historic vulnerabilities that were fixed in other parts of the codebase. Often, debug code will contain a functional "back door", by enabling the programmer to bypass operational security mechanisms, such as authentication or access controls.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;During application development, it is common for programmers to implement specialized code, in order to ease debugging and testing. Often the programmer will even&amp;nbsp;enable the debug code to bypass security mechanisms, so as to focus the tests on the specific functionality and isolate it from the security architecture.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;This debug or test code is not removed from the codebase, and is then included in the software build and deployed to the production environment.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;&amp;nbsp;- Remove all debug code before deploying or building the application. Ensure the configuration settings are not defined to enable debug mode.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Implement all test code via a dedicated test framework, which can isolate the test case code from the rest of the application.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Avoid implementing special "test code", "debugging-time" functionality, or "secret" interfaces or parameters in the application code itself.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Define and implement a standard and automatic build / deployment process, using dedicated CI / CD tools, that can automatically configure the deployed application, exclude all temporary code, and include only intended application code.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Ruby&lt;/h3&gt;&lt;h4&gt;Internal Test Method&lt;/h4&gt;&lt;pre&gt;class AppClass
	def run_app
      # Run the app
    end
  	def test_app
      # Test and debug the app
    end
end&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Main in Servlet&lt;/h4&gt;&lt;pre&gt;public class AppServlet extends HttpServlet { 
	protected void doGet(HttpServletRequest request, HttpServletResponse response) 
      				throws ServletException, IOException {
      	// handle request
    }
  
  	private static String MODE = "";
  	public static void main(String[] args) {
      	// initialize app for debugging and testing
      	MODE = "DEBUGGING";
    }
}&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Debug Configuration&lt;/h4&gt;&lt;pre&gt;&lt;configuration&gt;
	&lt;system.web&gt;
    	&lt;compilation debug="false" /&gt;
    &lt;/system.web&gt;
&lt;/configuration&gt;&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_817</key><name>Reflected_XSS_Specific_Clients</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to cause a user to send the website engineered input, rewriting web pages and inserting malicious scripts. The attacker can then pretend to be the original website, which would enable the attacker to steal the user's password, request the user&amp;#8217;s credit card information, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website, and the victim would blame the site for incurred damage.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from previous user input. The user input is embedded directly in the page's HTML, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary user input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Fully encode all dynamic data before embedding it in output.&lt;/li&gt;
&lt;li&gt;Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;JavaScript encoding for server-generated JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or the built-in platform functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User input is written to a label displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClients {
	public static void XSSExample(TextArea name) {	
		Label label = new Label();		
		label.setText("Hello " + name.getText());	
	}
}&lt;/pre&gt;&lt;h4&gt;Switch case is used in order to assemble the label's text value and manage wrong user input&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClientsFixed {
	public static void XSSExample(TextArea name) {
		Label label = new Label();		
		switch (name) {
		case "Joan":
			label.setText("Hello Joan");	
			break;
		case "Jim":
			label.setText("Hello Jim");	
			break;
		case "James":
			label.setText("Hello James");	
			break;
		default:
			System.out.println("Wrong Input");
		}
	}
}&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Bad - The application uses the "Referer" field string to construct the HttpResponse&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClients
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(Referer);
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "Referer" field string is HTML encoded before use&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClientsFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response, AntiXss.AntiXssEncoder encoder)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(encoder.HtmlEncode(Referer, true));
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - User input is written to a TextBox displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClients
{
        public void foo(TextBox tb)
        {
                string input = Console.ReadLine();
                tb.Text = input;
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The user input is HTML encoded before being displayed on the screen&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClientsFixed
{
        public void foo(TextBox tb, AntiXssEncoder encode)
        {
                string input = Console.ReadLine();
                tb.Text = encode.HtmlEncode(input);
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - The application uses the "filename" field string from an HttpRequest construct an HttpResponse&lt;/h4&gt;&lt;pre&gt;public class UTF7XSS
{
        public void foo(HttpRequest Request, HttpResponse Response
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["filename"];
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "filename" string is converted to an int and using a switch case the new "filename" string is constructed&lt;/h4&gt;&lt;pre&gt;public class UTF7XSSFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["fileNum"];
                int fileNum = Convert.ToInt32(filename);
                
                switch(fileNum)
                {
                        case 1:
                                filename = "File1.txt";
                                break;
                        default:
                                filename = "File2.txt";
                                break;
                }
                
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_784</key><name>Cleansing_Canonicalization_and_Comparison_Errors</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;If a security decision, such as access control for example, is taken based on unsanitized, user-controlled data, it may be possible for&amp;nbsp;an attacker to manipulate the format of the data,&amp;nbsp;and thus obfuscate the actual&amp;nbsp;target. For example, if users are allowed to read any page that has&amp;nbsp;their user id in the URL, a user can request a URL with multiple user ids. Another example could be an administrative interface, wherein users are forbidden from accessing any page under the &lt;code&gt;/admin/&lt;/code&gt; folder; an attacker can hide the actual target by sending a request to &lt;code&gt;/NOTEXISTS/../admin/&lt;/code&gt;&amp;nbsp;. This would evade the check for URLs starting with "admin/", if the request URL is not canonicalized before checking.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Filesystem paths and Internet URLs can be represented in an unlimited number of different ways, using various encodings, folder misdirection, and path obfuscation techniques. If a path or address is not properly sanitized and fully canonicalized into it's most basic, simplified form, it would be impossible to check all possible variants of this path. Hence, any decision based on a specific attributes of the path would likely be mistaken, and can be evaded by an active attacker.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Avoid performing security decisions based on untrusted, user-controlled input.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Always sanitize all user input.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Before making any decision based on a URL or path parameter, always transform it first into its canonical form, before making any decisions or doing any checks on it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Block Access to Admin Directory&lt;/h4&gt;&lt;pre&gt;private void blockAdminAccess(HttpServletRequest request, HttpServletResponse response) {
	String path = request.getRequestURI();
  
  	if (path.startsWith("/admin")) {
      	response.setError(response.SC_FORBIDDEN);	// return HTTP Status 403: Forbidden
    }
}&lt;/pre&gt;&lt;h4&gt;Ensure Path is Canonicalized Before Blocking Admin Access&lt;/h4&gt;&lt;pre&gt;private void blockAdminAccess(HttpServletRequest request, HttpServletResponse response) {
	String path = ESAPI.encoder().canonicalize(request.getRequestURI());
  
  	if (path.contains("/admin")) {
      	response.setError(response.SC_FORBIDDEN);	// return HTTP Status 403: Forbidden
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3482</key><name>No_Request_Validation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Request validation attempts to automatically identify potentially malicious content in user-provided inputs; if a potentially malicious&amp;nbsp;input is detected, the server rejects the entire request and throws an exception. Disabling this additional layer of defense may put the application at risk from malicious input, which may lead to cross-site scripting attacks, HTML injection, and more.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Since request validation is promptly blocks multiple meta-characters, ways to locally or globally disabling request validations have been introduced. However, using these overrides may leave the application exposed to attack.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Always consider the need and weigh the risks when explicitly disabling request validation. If disabling of request validation is required, consider the risks and outputs of any unvalidated inputs, and implement a different input validation solution appropriate to the output's context, as required.&lt;/p&gt;
&lt;p&gt;Note that Request Validation does not constitute as a sanitizer against cross-site scripting (XSS), HTML injection or any other form of attack. Request Validation&amp;nbsp;is simply an additional layer to assist in mitigation of these attacks, and it is recommended to have&amp;nbsp;it enabled.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Specific Page where Request Validation is Disabled&lt;/h4&gt;&lt;pre&gt;&lt;%@ Page Language="C#" MasterPageFile="~/Site.master" CodeFile="Default.aspx.cs" Inherits="_Default" validateRequest="false" %&gt;&lt;/pre&gt;&lt;h4&gt;Request Validation Disabled for Entire Application in Configuration&lt;/h4&gt;&lt;pre&gt;&lt;configuration&gt;
  &lt;system.web&gt;
    &lt;pages validateRequest="false" /&gt;
  &lt;/system.web&gt;
&lt;/configuration&gt;&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4413</key><name>Value_Shadowing</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Value shadowing may result in an incorrect reference, such as one value being validated while a completely different one is used, or a value assumed to be safe (such as headers automatically issued by the browser, or server parameters) which can actually be overwritten by user inputs.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Value Shadowing occurs when a certain set of information can be searched and may contain values of the same name, whose precedence over one another is not immediately clear.&lt;/p&gt;
&lt;p&gt;For example, in .NET, a Request object can be searched via an index (Request[param]) - however, the value whose key is&amp;nbsp;"param" in this implementation may be a query string parameter, a form parameter, a header, a server variable and more. This causes the value of Request["value"] to be ambiguous, which could be leveraged for bypassing logic restrictions, security measures and value checks.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Always explicitly refer to the exact data context from which values are retrieved.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Value Shadowing over HTTP_REFERER Value&lt;/h4&gt;&lt;pre&gt;/* This code will return "None" for no Referer header or the value of the Referer header is one exists,
but it is also shadowed, such that the GET request ?HTTP_REFERER=fake_referer will take precedence over
the header value */
string referer = Request["HTTP_REFERER"] != null ? Request["HTTP_REFERER"] : "None" ;
if (TRUSTED_DOMAIN.startswith(referer)) {
  // Do something
}&lt;/pre&gt;&lt;h4&gt;Obtaining the HTTP Referer, without Value Shadowing&lt;/h4&gt;&lt;pre&gt;// Explicitly retrieves Referer header
referer = Request.UrlReferrer != null ? Request.UrlReferrer.ToString() : "None" ;
if (TRUSTED_DOMAIN.startswith(referer)) {
  // Do something
}&lt;/pre&gt;&lt;h4&gt;Input Validation Bypass by Value Shadowing&lt;/h4&gt;&lt;pre&gt;if (isSanitizedForXSS(Request["info"])) // Will read "info" from GET parameter first
{
	InfoLabel.Text = Request.Form["info"]; /* Will read "info" explicitly from POST parameter, so a request
    										  with a valid GET "info" and malicious "POST" info will work*/
}&lt;/pre&gt;&lt;h4&gt;Not Vulnerable to Value Shadowing, Input Validation Performed on Same Value&lt;/h4&gt;&lt;pre&gt;string info = Request.Form["info"];
if (isSanitizedForXSS(info))
{
	InfoLabel.Text = info;
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_4669</key><name>Unsafe_Object_Binding</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Mass assignment may expose unintended setters to remote attackers, allowing them to directly access unintended objects or attributes within the object that is mass-assigned.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Mass assignment exposes all public setters to allow easily binding values submitted by users to the objects and attributes they are intended to create or alter. However, mass assignment may also accidentally expose unintended objects or attributes.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Review all mass-assigned objects to ensure no unintended public setters or constructors are unintentionally exposed by this approach.&lt;/p&gt;
&lt;p&gt;Consider transitioning away from this approach to a more granular approach where values are only ever explicitly set, to prevent accidentally setting unintended values implicitly.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Mass Assignment via RequestMapping with a Model as an Input&lt;/h4&gt;&lt;pre&gt;//Item:
public class Item {
	private String id;
    private String itemName;
    private String price;
    private String shippingAddress;
    private User buyer;
	//Public setters/getters:
    [..]
}
//User:
public class User {
	private String id;
    private String userName;
    private String password;
	//Public setters/getters:
    [..]
}

//ItemController:
@RequestMapping(value="saveItem", method = RequestMethod.POST)
	public String saveItem(@ModelAttribute("country") Item item, ModelMap model) {
		db.save(item); //If the parameter "price=0" is added, the assigned price of item is 0.
      				   //If the parameter "user.password=hacked!!" is added, the password for the user is changed to "hacked!!".
		return "success";
	}	&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_780</key><name>Client_Side_Only_Validation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Bypassing a client side validation may lead to&amp;nbsp;unexpected&amp;nbsp;and tanpered data to the server.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Relience on client side validation&amp;nbsp;only&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;It is highly recommended to validate the input in the server side, alongside client side validation.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_790</key><name>Improper_Transaction_Handling</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Database transactions that are abandoned (if their associated connection is closed, before the transaction is committed or rolled back) can have several different results, depending on implementation and specific technologies in use. While in some scenarios the database will automatically roll back the transaction if the connection is closed, more often it will either automatically commit the transaction in its abortive state, or leave the transaction open indefinitely (depending on its configured timeout value).&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;In the first case, a transaction that is committed after a runtime exception is likely to be in an inconsistent state, incompatible with the current runtime conditions. This would result in situation detrimental to the system's integrity and possibly even stability.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;In the second case, a transaction that is kept active&amp;nbsp;indefinitely would cause the database server to retain its locks on all records and tables affected by the transaction. This could cause general reliability and availability problems, leading to delays, degraded performance, or even deadlocks as one thread waits for the locks to be released.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;In either case this results in unexpected state, and is dependent on external factors such that the application is not controlling the result.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;The application creates a connection to the database, and explicitly manages the database transaction by committing it when appropriate. However, the code does not explicitly roll back failed transactions, for example in the case of exceptions. This causes the application to rely on implementation-specific behavior, depending on the specific combination of technologies (such as the database server) and resultant configuration.&amp;nbsp;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Always open database connections and begin transactions within a &lt;code&gt;try { }&lt;/code&gt; block.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ensure there are no active uncommitted transactions before closing a database connection.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Always rollback active transactions in the case of exceptions.&lt;/li&gt;
&lt;li&gt;After handling the exception, ensure the transaction is rolled back in the &lt;code&gt;catch { }&lt;/code&gt; block, or possibly in the &lt;code&gt;finally { }&lt;/code&gt; block. &amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Implicit Failed Transaction Handling&lt;/h4&gt;&lt;pre&gt;public void updateValues(int id, String value) {
	Connection con; 
	PreparedStatement orderStmt = null;
	PreparedStatement custStmt = null; 
 
    try {
		con = DriverManager.getConnection(CONN_STRING);
        con.setAutoCommit(false);

      	String orderSql = "update ORDERS set DESCRIPTION = ? where CUSTID = ?";
        orderStmt = con.prepareStatement(orderSql);
      	orderStmt.setString(1, value);
      	orderStmt.setInt(2, id); 
      	orderStmt.executeUpdate(); 
      
      	String custSql = "update CUSTOMERS set TOTAL = TOTAL + 1 where ID = ?"
        custStmt = con.prepareStatement(custSql);
      	custStmt.setInt(1, id); 
      	custStmt.executeUpdate();
      
      	con.commit();
    } catch (SQLException e ) {
        handleException(e);
    } finally {
        if (orderStmt != null)
            orderStmt.close();
        if (custStmt != null)
            custStmt.close();
        if (con != null)
			con.close();  // In case of exception, transaction might be rolled back, might not... 
    }
}&lt;/pre&gt;&lt;h4&gt;Explicit Rollback of Failed Transaction&lt;/h4&gt;&lt;pre&gt;public void updateValues(int id, String value) {
	Connection con; 
	PreparedStatement orderStmt = null;
	PreparedStatement custStmt = null; 
 
    try {
		con = DriverManager.getConnection(CONN_STRING);
        con.setAutoCommit(false);

      	String orderSql = "update ORDERS set DESCRIPTION = ? where CUSTID = ?";
        orderStmt = con.prepareStatement(orderSql);
      	orderStmt.setString(1, value);
      	orderStmt.setInt(2, id); 
      	orderStmt.executeUpdate(); 
      
      	String custSql = "update CUSTOMERS set TOTAL = TOTAL + 1 where ID = ?"
        custStmt = con.prepareStatement(custSql);
      	custStmt.setInt(1, id); 
      	custStmt.executeUpdate();
      
      	con.commit();
    } catch (SQLException e ) {
        handleException(e);
		if (con != null) {
			try {
              	// Explicitly rollback active transaction in case of exception
				con.rollback(); 
            } catch (SQLException innerEx) {
				handleException(innerEx); 
            }
		}
    } finally {
        if (orderStmt != null)
            orderStmt.close();
        if (custStmt != null)
            custStmt.close();
        if (con != null)
			con.close();
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_816</key><name>Privacy_Violation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;A user&amp;#8217;s personal information could be stolen by a malicious programmer, or an attacker that intercepts the data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application sends user information, such as passwords, account information, or credit card numbers, outside the application, such as writing it to a local text or log file or sending it to an external web service.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Personal data should be removed before writing to logs or other files.&lt;/li&gt;
&lt;li&gt;Review the need and justification of sending personal data to remote web services.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The user's password is written to the screen
      &lt;/h4&gt;&lt;pre&gt;

class PrivacyViolation
{
        static void foo(string insert_sql)
        {
                string password = "unsafe_password";
                insert_sql = insert_sql.Replace("$password", password);
                System.Console.WriteLine(insert_sql);
        } 
}



      &lt;/pre&gt;&lt;h4&gt;
the user's password is MD5 coded before being written to the screen
      &lt;/h4&gt;&lt;pre&gt;

class PrivacyViolationFixed
{
        static void foo(string insert_sql)
        {
                string password = "unsafe_password";
                MD5 md5Hash = System.Security.Cryptography.MD5.Create();
                byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(password));
        StringBuilder md5Password = new StringBuilder();

                for (int i = 0; i &lt; data.Length; i++)
		{
			md5Password.Append(data[i].ToString("x2"));
		}
		insert_sql = insert_sql.Replace("$password", md5Password.ToString());
                System.Console.WriteLine(insert_sql);
        } 
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_769</key><name>Command_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could run arbitrary system-level OS commands on the application server host. Depending on the application&amp;rsquo;s OS permissions, these could include:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;File actions (read / create / modify / delete)&lt;/li&gt;
&lt;li&gt;Open a network connection to the attacker&amp;rsquo;s server&lt;/li&gt;
&lt;li&gt;Start and stop system services&lt;/li&gt;
&lt;li&gt;Complete server takeover&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application runs an OS system-level command to complete it's task, rather than via application code. The command includes untrusted data, that may be controllable by an attacker. This untrusted string may contain malicious, system-level commands engineered by an attacker, which would be executed as though the attacker were running commands directly on the application server.&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Refactor the code to avoid any direct shell command execution. Instead, use platform provided APIs or library calls.&lt;/li&gt;
&lt;li&gt;If it is impossible to remove the command execution, execute only static commands that do not include dynamic, user-controlled data.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified format, rather than rejecting bad patterns (blacklist). Parameters should be limited to an allowed character set, and non-validated input should be dropped. In addition to characters, check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;In order to minimize damage as a measure of defense in depth, configure the application to run using a restricted user account that has no unnecessary OS privileges.&lt;/li&gt;
&lt;li&gt;If possible, isolate all OS commands to use a separate, dedicated user account that has minimal privileges only for the specific commands and files used by the application, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_813</key><name>Integer_Overflow</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Assigning large data types into smaller data types, without proper checks and explicit casting, will&amp;#160;lead to undefined behavior and unintentional effects, such as data corruption (e.g. value wraparound, wherein maximum values become minimum values); system crashes; infinite loops; logic errors, such as bypassing of security mechanisms; or even buffer overflows leading to arbitrary code execution.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;This flaw can occur when&amp;#160;implicitly casting numerical data types of a larger size, into a variable with a data type of a smaller size. This forces the program to discard some bits of information from the number.&lt;/div&gt;
&lt;div&gt;Depending on how the numerical data types are stored in memory, this is often the bits with the highest value, causing substantial corruption of the stored number. Alternatively,&amp;#160;the sign bit of a signed integer could be lost, completely reversing the intention of the number.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Avoid casting larger data types to smaller types.&amp;#160;&lt;/li&gt;
&lt;li&gt;Prefer promoting the target variable to a large enough data type.&amp;#160;&lt;/li&gt;
&lt;li&gt;If downcasting is necessary, always check that values are valid and in range of the target type, before casting&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CPP&lt;/h3&gt;&lt;h4&gt;Unsafe Downsize Casting&lt;/h4&gt;&lt;pre&gt;int unsafe_addition(short op1, int op2) { 

    // op2 gets forced from int into a short
    short total = op1 + op2; 
    
    return total;
}
&lt;/pre&gt;&lt;h4&gt;Safer Use of Proper Data Types&lt;/h4&gt;&lt;pre&gt;int safe_addition(short op1, int op2) { 

    // total variable is of type int, the largest type that is needed
    int total = 0; 

    // check if total will overflow available integer size 
    if (INT_MAX - abs(op2) &gt; op1) 
    {
        total = op1 + op2; 
    }
    else
    {
        // instead of overflow, saturate (but this is not always a good thing)
        total = INT_MAX
    }
    
    return total;
}
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_820</key><name>Unclosed_Connection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application opens new connections to the database&amp;#160;in order to serve each request. However, the application does not properly ensure these database&amp;#160;connections are always explicitly closed and released. Since the database server typically has a relatively low limit on open connections, which are being held open by the application,&amp;#160;it would be relatively simple for an attacker to cause a Denial of Service (DoS) attack.&lt;/div&gt;
&lt;div&gt;The attacker could simply send many requests to the server, each in a new session, causing the application to re-open many connections to the database, which are left open. This may&amp;#160;eventually cause the database to refuse to open additional connections for the application, thus blocking the application.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application opens many database connections. Since these are not a managed resource, the application is responsible for properly closing the connection and releasing the resource. The proper way of ensuring the connection will be released, no matter what and even in the case of errors, is to explicitly close the connection in a &lt;code&gt;finally { }&lt;/code&gt; block, however the application does not do so.&amp;#160;&lt;/div&gt;
&lt;div&gt;Thus,&amp;#160;even after the connection object goes out of scope of the current method, the underlying unmanaged resource will still not be released, despite the garbage collector.&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Generic Guidance:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Always ensure the application properly cleans up any unmanaged or physical resources, such as open files or dastabase connections.&amp;#160;&lt;/li&gt;
&lt;li&gt;Prefer to implement the proper Dispose() pattern&amp;#160;&lt;/li&gt;
&lt;li&gt;Ensure all cleanup processes will always be run, even in the case of errors.&amp;#160;&lt;/li&gt;
&lt;li&gt;Be extra careful to avoid exceptions during the method cleanup and exception handling.&amp;#160;&lt;/li&gt;
&lt;li&gt;Prefer implementing the using () statement&amp;#160;pattern, which automatically disposes&amp;#160;its own resources.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;Specific Recommendations:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Explicitly close all open database connections.&amp;#160;&lt;/li&gt;
&lt;li&gt;Perform connection cleanup in the &lt;code&gt;finally { }&lt;/code&gt; block of the same &lt;code&gt;try { }&lt;/code&gt; that opened the connection.&amp;#160;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Unclosed Connection&lt;/h4&gt;&lt;pre&gt;void GetConnection()
{
    SqlConnection conn = new SqlConnection(CONN_STRING); 
    conn.Open(); 
    
    runCommand(conn);
}&lt;/pre&gt;&lt;h4&gt;Closing Connections&lt;/h4&gt;&lt;pre&gt;void GetConnection()
{
    try 
    {
        SqlConnection conn = new SqlConnection(CONN_STRING); 
        conn.Open(); 
        
        runCommand(conn);
    }
    catch (SqlException ex) 
    {  
        handleException(ex); 
    }
    finally
    {
        if (conn != null) 
            conn.Close();
    }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_811</key><name>Hardcoded_password_in_Connection_String</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Hardcoded database passwords expose the application to password leakage, and the database to unauthorized access. If an attacker gains access to the source code (or can decompile the application binaries), she will be able to steal the embedded passwords, and use them to directly access the database. This would enable the attacker to steal secret information, modify sensitive records, or delete important data.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;&amp;nbsp;&lt;/div&gt;
&lt;div&gt;In addition, the password cannot be easily changed when required. In the eventual situation wherein it is a necessity to update the password, a new version of the application would need to be built and deployed to production systems.&amp;nbsp;&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application has the database password hardcoded in the source code files, and uses this password in a connection string to the database or other server. This password is visible to anyone with access to source code, and cannot be changed without rebuilding or recompiling the application. Even after compilation or deployment, the password and connection string are still present in the binary program files or production environment.&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;&amp;nbsp;- Never hardcode sensitive data, such as database passwords.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;&amp;nbsp;- Prefer to avoid requiring an explicit database password at all, instead using OS-integrated system authentication.&lt;/div&gt;
&lt;div&gt;&amp;nbsp;- Alternatively, store the password in an encrypted configuration file, and implement a mechanism enabling administrators to change the password. Ensure the file permissions are configured to restrict access to administrators only.&amp;nbsp;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;- In particular, if the database supports Integrated Windows Authentication, prefer to use a Windows user over SQL user.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Configure the connection string with "&lt;code&gt;Trusted_Connection=True;&lt;/code&gt;", or "&lt;code&gt;Integrated Security=SSPI;&lt;/code&gt;" (or "&lt;code&gt;true&lt;/code&gt;").&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Alternatively, define the application's connection string in the&amp;nbsp;&lt;code&gt;web.config&lt;/code&gt;&amp;nbsp;configuration file. Typically, this should be in the&amp;nbsp;&lt;code&gt;connectionString&lt;/code&gt;&amp;nbsp;attribute of an&amp;nbsp;&lt;code&gt;&amp;lt;add&amp;gt;&lt;/code&gt;&amp;nbsp;element, under the&amp;nbsp;&lt;code&gt;&amp;lt;connectionStrings&amp;gt;&lt;/code&gt;&amp;nbsp;element.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Encrypt the configured connection strings using:&amp;nbsp;&lt;code&gt;aspnet_regiis -pe "connectionStrings" -app "/YourApplication"&lt;/code&gt;&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;VbNet&lt;/h3&gt;&lt;h4&gt;Hard-Coded Connection String&lt;/h4&gt;&lt;pre&gt;Private Function GetConnection() As DbConnection
    Dim conn As New SqlConnection("Initial Catalog=appDb;User Id=sa;Pwd=mypass;")
  	conn.Open()
 
  	Return conn
End Function&lt;/pre&gt;&lt;h4&gt;Read Connection String From web.config&lt;/h4&gt;&lt;pre&gt;Private Function GetConnection() As DbConnection
    String connString = ConfigurationManager.ConnectionStrings["DbConn"].ToString()
    
    Dim conn As New SqlConnection(connString)
  	conn.Open()
 
  	Return conn
End Function&lt;/pre&gt;&lt;h4&gt;Dynamically Construct Connection String from Encrypted Configuration&lt;/h4&gt;&lt;pre&gt;Private Function GetConnection() As DbConnection
    Dim builder As New SqlConnectionStringBuilder()
    builder.DataSource = ConfigurationManager.AppSettings("dbServer")
    builder.InitialCatalog = ConfigurationManager.AppSettings("dbName")
    builder.ConnectTimeout = 1000
    builder.UserId = ConfigurationManager.AppSettings("dbUser")
    builder.Password = Decrypt(ConfigurationManager.AppSettings("dbPassword"))
    builder.Encrypt = True
  
    Dim conn As New SqlConnection(builder.ConnectionString)
  	conn.Open()
 
  	Return conn
End Function&lt;/pre&gt;&lt;h4&gt;Using Windows Authentication without Password&lt;/h4&gt;&lt;pre&gt;&lt;connectionStrings&gt;
	&lt;add name="AppDbConnString"
  		connectionString="Server=myServerAddress;Database=appDb;Trusted_Connection=True;"
  		providerName="System.Data.SqlClient" /&gt;
&lt;/connnectionStrings&gt;&lt;/pre&gt;&lt;h4&gt;Encrypted Web.config Section&lt;/h4&gt;&lt;pre&gt;&lt;configuration&gt;
   &lt;connectionStrings configProtectionProvider="DataProtectionConfigurationProvider"&gt;
      &lt;EncryptedData&gt;
         &lt;CipherData&gt;
            &lt;CipherValue&gt;AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAe3IeYtVA1Ein16Kz9W96UQQAAAACAAAAAA
ADZgAAqAAAABAAAABLQdIlQjmYEpvL/YlcKtQIAAAAAASAAACgAAAAEAAAALJbofuwZFVfY0X5w
PO172OYAQAAM1JJuZpvWvHlvZZCGMpLXmvkURVkdv3gjWjED3y0X29kGfKrecXPg+xngFAQ1qG4
Ruxa96leDTo+Eb1QrvXgZgdABN+rXmmzPwi9csOCorTidlJ/55drL96zyeQrynPfs4HRqtRPmc8
4F/4hVbEe9xnKIiykSPEYSnOIef4arj567y5vmwcgh8b11d4wmbMIbrvgWFOWniJRXgvkHAYMje
/R5C6yRDDqr7OCkvZoX/hqe+mkJRvpHewCXJBIcbHsF2sCs3WZQlNbDY7H9J3EESPR4S0qPTEb3
q8GD31vjMPo7WbDTTN8/lXi6BbooyY6IPviIkxUvmbAxxiWXmz7J93WYKqnhFUHunv8JgoBgc8a
6t55zpsG1oNGSJAAJ7qBu0Y1+gktPQof/DabkL54Zl8wK8/u6q7mU+nJbaHW9AKC6bfCWa16QXV
6jF2QWHGqrsXzRqURXsG0t+9bdNwmiNHimpVc6p+JhiXNd9Ym8NbDCCS2ICgNDActd5MmGfJpHM
PbubNuVgcueSdH8bdHJXSc1hucDURrFAAAAHOaFiNRTxD+d8YctPO/HiGD9NeV&lt;/CipherValue&gt;
         &lt;/CipherData&gt;
      &lt;/EncryptedData&gt;
   &lt;/connectionStrings&gt;
&lt;/configuration&gt;
&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_836</key><name>HttpOnlyCookies_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Cookies that contain the user's session identifier, and other sensitive application cookies, are typically accessible by client-side scripts, such as JavaScript. Unless the web application explicitly prevents this using the "httpOnly" cookie flag, these cookies could be read and accessed by malicious client scripts, such as Cross-Site Scripting (XSS). This flag would mitigate the damage done in case XSS vulnerabilities are discovered, according to Defense in Depth.&amp;nbsp;&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The web application framework by default does not set the "httpOnly" flag for the application's sessionid cookie, and other sensitive application cookies. Likewise, the application does not explicitly use the "httpOnly" cookie flag, thus allowing client scripts to access the cookies by default.&amp;nbsp;&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;p&gt;&amp;nbsp;- Always set the "httpOnly" flag for any sensitive server-side cookie.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;- Configure the application to always use "httpOnly" cookies, in the site-wide configuration file.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;- Set the httpOnlyCookies attribute on the &amp;lt;httpCookies&amp;gt; element, under &amp;lt;system.web&amp;gt; in your application's web.config, to "true".&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;VbNet&lt;/h3&gt;&lt;h4&gt;ASP.NET web.config file without HttpOnly configured&lt;/h4&gt;&lt;pre&gt;&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;configuration&gt;
	&lt;system.web&gt;
		&lt;compilation debug="true" targetFramework="4.0" /&gt;

		&lt;authentication mode="Forms"&gt;
			&lt;forms loginUrl="~/default.aspx" timeout="2880" /&gt;
		&lt;/authentication&gt;
    &lt;/system.web&gt;
&lt;/configuration&gt;&lt;/pre&gt;&lt;h4&gt;Configuring Secure Cookies with HttpOnly&lt;/h4&gt;&lt;pre&gt;&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;configuration&gt;
	&lt;system.web&gt;
		&lt;compilation debug="true" targetFramework="4.0" /&gt;

		&lt;authentication mode="Forms"&gt;
			&lt;forms loginUrl="~/default.aspx" timeout="2880" /&gt;
		&lt;/authentication&gt;

		&lt;httpCookies domain="MyDomain" 
        	httpOnlyCookies="true" 
          	requireSSL="true" /&gt;

    &lt;/system.web&gt;
&lt;/configuration&gt;&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_809</key><name>Path_Traversal</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could define any arbitrary file path for the application to use, potentially leading to:&lt;/div&gt;
&lt;ol&gt;
&lt;ul&gt;
&lt;li&gt;Stealing sensitive files, such as configuration or system files&lt;/li&gt;
&lt;li&gt;Overwriting files such as program binaries, configuration files, or system files&lt;/li&gt;
&lt;li&gt;Deleting critical files, causing a denial of service (DoS).&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses user input in the file path for accessing files on the application server&amp;#8217;s local disk. This enables an attacker to arbitrarily determine the file path.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Ideally, avoid depending on user input for file selection.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Accept user input only for the filename, not for the path and folders.&lt;/li&gt;
&lt;li&gt;Ensure that file path is fully canonicalized.&lt;/li&gt;
&lt;li&gt;Explicitly limit the application to using a designated folder that separate from the applications binary folder.&lt;/li&gt;
&lt;li&gt;Restrict the privileges of the application&amp;#8217;s OS user to necessary files and folders. The application should not be able to write to the application binary folder, and should not read anything outside of the application folder and data folder.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Using unvalidated user input as the file name may enable the user to access arbitrary files on the server local disk&lt;/h4&gt;&lt;pre&gt;public class Absolute_Path_Traversal {
    public static void main(String[] args) {
        Scanner userInputScanner = new Scanner(System.in);
        System.out.print("\nEnter file name: ");
        String name = userInputScanner.nextLine();
        String path = "c:\files\file" + name;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(path));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/pre&gt;&lt;h4&gt;Potentially hazardous characters are removed from the user input before use&lt;/h4&gt;&lt;pre&gt;public class Absolute_Path_Traversal_Fixed {
    public static void main(String[] args) {
        Scanner userInputScanner = new Scanner(System.in);
        System.out.print("\nEnter file name: ");
        String name = userInputScanner.nextLine();
        name = name.replace("/", "").replace("..", "");
        String path = "c:\files\file" + name;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(path));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Using unvalidated user input as the file name may enable the user to access arbitrary files on the server local disk&lt;/h4&gt;&lt;pre&gt;public class PathTraversal
{
        private void foo(TextBox textbox1)
        {
                string fileNum = textbox1.Text;
                string path = "c:\files\file" + fileNum;
                FileStream f = new FileStream(path, FileMode.Open);
                byte[] output = new byte[10];
                f.Read(output,0, 10);
        }
}&lt;/pre&gt;&lt;h4&gt;
Potentially hazardous characters are removed from the user input before use
      &lt;/h4&gt;&lt;pre&gt;public class PathTraversalFixed
{
        private void foo(TextBox textbox1)
        {
                string fileNum = textbox1.Text.Replace("\", "").Replace("..", "");
                string path = "c:\files\file" + fileNum;
                FileStream f = new FileStream(path, FileMode.Open);
                byte[] output = new byte[10];
                f.Read(output,0, 10);
        }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_798</key><name>Thread_Safety_Issue</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;At best, a Race Condition may&amp;nbsp;cause errors in accuracy, overidden values or unexpected behavior that may result in denial-of-service. At worst, it may allow attackers to retrieve data or bypass security processes by replaying a controllable Race Condition until it plays out in their favor.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;p&gt;Race Conditions occur when a public, single instance of a resource is used by multiple concurrent logical processes. If the these logical processes attempt to retrieve and update the resource without a timely management system, such as a lock, a Race Condition will occur.&lt;/p&gt;
&lt;p&gt;An example for when a Race Condition occurs is a resource that may return a certain value to a process for further editing, and then updated by a second&amp;nbsp;process, resulting in the original process' data no longer being valid. Once the original process edits and updates the incorrect value back into the resource, the second process' update has been overwritten and lost.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;p&gt;When sharing resources between concurrent processes across the application ensure that these resources are&amp;nbsp;either thread-safe, or implement a locking mechanism to ensure expected concurrent activity.&lt;/p&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Different Threads Increment and Decrement The Same Counter Repeatedly, Resulting in a Race Condition&lt;/h4&gt;&lt;pre&gt;	public static int counter = 0;	
	public static void start() throws InterruptedException { 
		incrementCounter ic;
		decrementCounter dc;
		while(counter == 0) {
			counter = 0;
			ic = new incrementCounter();
			dc = new decrementCounter();
			ic.start();
			dc.start();
			ic.join();
			dc.join();
		}
		System.out.println(counter); //Will stop and return either -1 or 1 due to race condition over counter
	}
	
	public static class incrementCounter extends Thread {
	    public void run() {
    		counter++;
	    }
	}
	
	public static class decrementCounter extends Thread {
	    public void run() {
    		counter--;
	    }
	}&lt;/pre&gt;&lt;h4&gt;Different Threads Increment and Decrement The Same Thread-Safe Counter Repeatedly, Never Resulting in a Race Condition&lt;/h4&gt;&lt;pre&gt;	public static int counter = 0;
	public static Object lock = new Object();
	
	public static void start() throws InterruptedException {
		incrementCounter ic;
		decrementCounter dc;
		while(counter == 0) { // because of proper locking, this condition is never false
			counter = 0;
			ic = new incrementCounter();
			dc = new decrementCounter();
			ic.start();
			dc.start();
			ic.join();
			dc.join();
		}
		System.out.println(counter); // Never reached
	}
	
	public static class incrementCounter extends Thread {
	    public void run() {
	    	synchronized (lock) {
	    		counter++;
	    	}
	    }
	}
	
	public static class decrementCounter extends Thread {
	    public void run() {
	    	synchronized (lock) {
	    		counter--;
	    	}
	    }
	}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_768</key><name>Code_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could run arbitrary code on the application server host. Depending on the application&amp;rsquo;s OS permissions,these could include:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Database access, such as reading or modifying sensitive data;&lt;/li&gt;
&lt;li&gt;File actions (read / create / modify / delete);&lt;/li&gt;
&lt;li&gt;Changing the website;&lt;/li&gt;
&lt;li&gt;Open a network connection to the attacker&amp;rsquo;s server;&lt;/li&gt;
&lt;li&gt;Decrypt secret data using the application's encryption keys;&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Start and stop system services;&lt;/li&gt;
&lt;li&gt;Complete server takeover.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application performs some action by creating and running code that includes untrusted data, which might be under control of a malicious user. If the data contains malicious code, the executed code could contain system-level activities engineered by an attacker, as though the attacker were running code directly on the application server.&lt;/div&gt;


&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;The application should not compile, execute, or evaluate any untrusted code from any external source, including user input, uploaded files, or a database.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;If it is absolutely necessary to include external&amp;nbsp;data in dynamic execution, it is permissible to pass the data as parameters to the code, but do not execute user data directly. &amp;nbsp;&lt;/li&gt;
&lt;li&gt;If it is necessary to pass untrusted data to dynamic execution, enforce very strict data validation. For example, accept only integers between certain values.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Parameters should be limited to an allowed character set, and non-validated input should be dropped. In addition to characters, check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;If possible, always prefer to whitelist known and trusted input instead of comparing to a blacklist.&lt;/li&gt;
&lt;li&gt;Configure the application to run using a restricted user account that has no unnecessary privileges.&lt;/li&gt;
&lt;li&gt;If possible, isolate all dynamic execution to use a separate, dedicated user account that has privileges only for the specific operations and files used by dynamic execution, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;If dynamic execution is necessary, run all dynamic code in an external process, and pass the external data as a parameter to the process.&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Alternatively, it is possible to perform dynamic execution of code in an isolated sandbox, such as .NET&amp;rsquo;s &lt;code&gt;AppDomain&lt;/code&gt; with &lt;code&gt;Evidence&lt;/code&gt; to restrict its &lt;code&gt;PermissionSet&lt;/code&gt; to the minimum, using &lt;code&gt;SecurityManager.GetStandardSandbox()&lt;/code&gt;. (Note that this can never be complete protection from sandbox exploits, and should be avoided if possible.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;VbNet&lt;/h3&gt;&lt;h4&gt;Dynamically Compile User Code&lt;/h4&gt;&lt;pre&gt;Function ExecuteDynamicCode_Unsafe(request As HttpRequest) As Integer
	Dim exitCode As Integer
	Dim userCode As String = request.Form("Code")
	
	Dim compiler As New VBCodeProvider 
	Dim parameters As New CompilerParameters
	parameters.GenerateInMemory = True
	parameters.GenerateExecutable = True
	
	Try 
		Dim results As CompilerResults = compiler.CompileAssemblyFromSource(parameters, userCode)
		
		Dim compiledAssembly As Assembly = results.CompiledAssembly
		exitCode = CInt(compiledAssembly.EntryPoint.Invoke(Nothing, New Object()))
	Catch ex As Exception
		HandleExceptions(ex)
	End Try
	
	Return exitCode
End Function&lt;/pre&gt;&lt;h4&gt;Call to Static Program with Parameters&lt;/h4&gt;&lt;pre&gt;Function ExecuteProcessWithArguments(request As HttpRequest) As Integer
	Dim exitCode As Integer
	Dim userParams As String = request.Form("ExeParams")

	Using proc As Process New Process
		proc.StartInfo.FileName = PATH_TO_PRECOMPILED_EXTERNAL_PROGRAM
		proc.StartInfo.Arguments = SanitizeForProcess(userParams)
		proc.StartInfo.UseShellExecute = False
		
		proc.Start()
		proc.WaitForExit(MAX_TIMEOUT)
		
		exitCode = proc.ExitCode
	End Using
	
	Return exitCode
End Function&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_840</key><name>TraceEnabled</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;   &lt;link href="main.css" rel="stylesheet" type="text/css"&gt;   &lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;
          &lt;span style="font-weight:bold;color:white;"&gt;Trace Enabled&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;    &lt;span class="tool"&gt;&lt;/span&gt;    &lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID:
          10708&lt;/b&gt;&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_90_Description" id="oc_90_Description" class="expandblock"&gt;&lt;div class="detail"&gt;  &lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;
          By enabling the &amp;quot;trace&amp;quot; element for remote computers, browsing the page
          trace.axd&amp;nbsp; exposes any user to the list of the recent requests made to the
          application.&lt;br&gt;
          The list may be very detailed and contain sensitive data about the requests made
          to the application.&lt;br&gt;
          &lt;/div&gt;  &lt;p class="subheading"&gt;
              Extended Description&lt;/p&gt;&lt;div class="indent"&gt;The trace log may contain request
              and response cookies,headers, form variables, QueryString variables, session
              state, application state keys ,server variables and more.&lt;br&gt;
              The hacker can use this vast information in order to plan his attack.&lt;br&gt;
          &lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_90_Time of Introduction" id="oc_90_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;  &lt;li&gt;
              Implementation&lt;/li&gt;  &lt;li&gt;Operation&lt;/li&gt;  &lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_90_Applicable Platforms" id="oc_90_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;  &lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;  &lt;p&gt;
          ASP.NET&lt;/p&gt;  &lt;/div&gt;  &lt;p class="subheading"&gt;Technology Classes&lt;/p&gt;&lt;div class="indent"&gt;  &lt;p&gt;
          Web-Server&lt;/p&gt;  &lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_90_Demonstrative Examples" id="oc_90_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example :&lt;/p&gt;&lt;p&gt;
                  The following code in ASP.NET describes a vulnerable configuration of
                  cookieless authentication in a web.config file:&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example  Language:
                  ASP.NET&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;
&lt;configuration&gt; &lt;system.web&gt; &lt;authentication mode="?Forms?"&gt; &lt;forms cookieless="?UseUri?"&gt;
&lt;configuration&gt; &lt;system.web&gt; &lt;authentication mode="?Forms?"&gt; &lt;forms cookieless="?UseUri?"&gt;
&lt;configuration&gt; &lt;system.web&gt; &lt;authentication mode="?Forms?"&gt; &lt;forms cookieless="?UseUri?"&gt;&amp;lt;configuration&amp;gt;&lt;br&gt;
                      &amp;lt;system.web&amp;gt;&lt;br&gt;
                      &amp;lt;trace enabled=&amp;quot;true&amp;quot; localOnly=&amp;quot;false&amp;quot;&amp;gt;&lt;/forms&gt;&lt;/authentication&gt;&lt;/system.web&gt;&lt;/configuration&gt;&lt;/forms&gt;&lt;/authentication&gt;&lt;/system.web&gt;&lt;/configuration&gt;&lt;/forms&gt;&lt;/authentication&gt;&lt;/system.web&gt;&lt;/configuration&gt;&lt;/div&gt;
                  &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

              &lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_90_Potential Mitigations" id="oc_90_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;  &lt;tr&gt;&lt;td valign="top"&gt;
          &lt;span class="style1"&gt;The best to prevent the attacker to use this information is
          not to expose it.&lt;/span&gt;&lt;br class="style1"&gt;
          &lt;span class="style1"&gt;It can be done by setting the &amp;quot;trace enabled&amp;quot; attribute to
          &amp;quot;false&amp;quot; or&amp;nbsp; setting localOnly to &amp;quot;true&amp;quot;, or both.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
              &lt;/html&gt;        &lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_2963</key><name>Password_In_Configuration_File</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Password in Configuration File&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;260&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_260_Description" id="oc_260_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The software stores a password in a configuration file that
might be accessible to actors who do not know the
password.&lt;/div&gt;
&lt;p class="subheading"&gt;Extended Description&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;This can result in compromise of the system for which the password is
used. An attacker could gain access to this file and learn the stored
password or worse yet, change the password to one of their choosing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_260_Time of Introduction" id="oc_260_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_260_Applicable Platforms" id="oc_260_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_260_Demonstrative Examples" id="oc_260_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;Below is a snippet from a Java properties file in which the LDAP
server password is stored in plaintext.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;webapp.ldap.username=secretUsername&lt;/div&gt;&lt;div style="font-size:90%;"&gt;webapp.ldap.password=secretPassword&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_260_Potential Mitigations" id="oc_260_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Avoid storing passwords in easily accessible locations.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Consider storing cryptographic hashes of passwords as an alternative
to storing in plaintext.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_260_Relationships" id="oc_260_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;254&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=254" target="_blank"&gt;Security Features&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts&lt;/span&gt;699&lt;/span&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;522&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=522" target="_blank"&gt;Insufficiently Protected Credentials&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;632&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=632" target="_blank"&gt;Weaknesses that Affect Files or Directories&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Resource-specific Weaknesses &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;631&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;13&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=13" target="_blank"&gt;ASP.NET Misconfiguration: Password in Configuration File&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;ParentOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;258&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=258" target="_blank"&gt;Empty Password in Configuration File&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Affected Resources"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Affected Resources&lt;/div&gt;&lt;div name="oc_260_Affected Resources" id="oc_260_Affected Resources" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;File/Directory&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_260_Taxonomy Mappings" id="oc_260_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Password Management: Password in Configuration
File&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="References"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;References&lt;/div&gt;&lt;div name="oc_260_References" id="oc_260_References" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;J. Viega and
G. McGraw. "Building Secure Software: How to Avoid Security Problems the
Right Way". 2002. &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_260_Content History" id="oc_260_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Sean Eidemiller&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;added/updated demonstrative
examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Description&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_777</key><name>UTF7_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to cause a user to send the website engineered input, rewriting web pages and inserting malicious scripts. The attacker can then pretend to be the original website, which would enable the attacker to steal the user's password, request the user&amp;#8217;s credit card information, provide false information, or run malware. From the victim&amp;#8217;s point of view, this is the original website, and the victim would blame the site for incurred damage.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from previous user input. The user input is embedded directly in the page's HTML, causing the browser to display it as part of the web page. If the input includes HTML fragments or JavaScript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary user input without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Fully encode all dynamic data before embedding it in output.&lt;/li&gt;
&lt;li&gt;Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML Attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;JavaScript encoding for server-generated JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or the built-in platform functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;User input is written to a label displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClients {
	public static void XSSExample(TextArea name) {	
		Label label = new Label();		
		label.setText("Hello " + name.getText());	
	}
}&lt;/pre&gt;&lt;h4&gt;Switch case is used in order to assemble the label's text value and manage wrong user input&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSAllClientsFixed {
	public static void XSSExample(TextArea name) {
		Label label = new Label();		
		switch (name) {
		case "Joan":
			label.setText("Hello Joan");	
			break;
		case "Jim":
			label.setText("Hello Jim");	
			break;
		case "James":
			label.setText("Hello James");	
			break;
		default:
			System.out.println("Wrong Input");
		}
	}
}&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Bad - The application uses the "Referer" field string to construct the HttpResponse&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClients
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(Referer);
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "Referer" field string is HTML encoded before use&lt;/h4&gt;&lt;pre&gt;public class ReflectedXssAllClientsFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response, AntiXss.AntiXssEncoder encoder)
        {
                string Referer = Request.QueryString["Referer"];
                Response.BinaryWrite(encoder.HtmlEncode(Referer, true));
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - User input is written to a TextBox displayed on the screen enabling a user to inject a script&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClients
{
        public void foo(TextBox tb)
        {
                string input = Console.ReadLine();
                tb.Text = input;
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The user input is HTML encoded before being displayed on the screen&lt;/h4&gt;&lt;pre&gt;public class ReflectedXSSSpecificClientsFixed
{
        public void foo(TextBox tb, AntiXssEncoder encode)
        {
                string input = Console.ReadLine();
                tb.Text = encode.HtmlEncode(input);
        }
}&lt;/pre&gt;&lt;h4&gt;Bad - The application uses the "filename" field string from an HttpRequest construct an HttpResponse&lt;/h4&gt;&lt;pre&gt;public class UTF7XSS
{
        public void foo(HttpRequest Request, HttpResponse Response
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["filename"];
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;h4&gt;Good - The "filename" string is converted to an int and using a switch case the new "filename" string is constructed&lt;/h4&gt;&lt;pre&gt;public class UTF7XSSFixed
{
        public static void foo(HttpRequest Request, HttpResponse Response)
        {
                Response.Charset("UTF-7");
                string filename = Request.QueryString["fileNum"];
                int fileNum = Convert.ToInt32(filename);
                
                switch(fileNum)
                {
                        case 1:
                                filename = "File1.txt";
                                break;
                        default:
                                filename = "File2.txt";
                                break;
                }
                
                Response.BinaryWrite(AntiXss.HtmlEncode(filename));
        }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_779</key><name>Blind_SQL_Injections</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. Using available tools and text editing, the attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with its database by sending a textual SQL query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain SQL commands that would be interpreted as such by the database. Even when application error responses do not contain actual database content, available tools can perform series of boolean tests for errors to gradually obtain database content.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Additionally, escape all user input before including it in the query. Escaping should be done relative to the specific database in use.&lt;/li&gt;
&lt;li&gt;Instead of concatenating strings: a. Use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters). b. An even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&lt;/li&gt;
&lt;li&gt;Do not allow the user to dynamically provide the name of the queried table, and if possible completely avoid using dynamic table names. 5. Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Using Parameterized Queries:

      &lt;/h4&gt;&lt;pre&gt;


String custId = request.getParameter("customerId");
Pattern custPattern = Pattern.compile("^\d{6}$");
if ( !custPattern.matcher( custId ).matches() )
throw new ValidationException("Invalid customer Id.");
String query = "SELECT accountBalance FROM customers WHERE customerId = ?";
PreparedStatement pstmt = connection.prepareStatement( query );
pstmt.setString( 1, custId );
ResultSet results = pstmt.executeQuery( );


      &lt;/pre&gt;&lt;h4&gt;

Using Stored Procedures:

      &lt;/h4&gt;&lt;pre&gt;


String custId = request.getParameter("customerId");
Pattern custPattern = Pattern.compile("^\d{6}$");
if ( !custPattern.matcher( custId ).matches() )
throw new ValidationException("Invalid customer Id.");
try {
CallableStatement cs = conn.prepareCall("{call getAccountBalance(?)}");
cs.setString(1, custname);
ResultSet results = cs.executeQuery();
}
catch (SQLException se) {
// … logging and error handling
}


      &lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Using Parameterized Queries:

      &lt;/h4&gt;&lt;pre&gt;


String custId = txtCustomerId.Text;
if (!Regex.IsMatch(custId, @"^\d{6}\z"))
throw new ArgumentException("Invalid customer Id.");
String query = "SELECT accountBalance FROM customers WHERE customerId = ?";
OleDbCommand command = new OleDbCommand(query, connection);
command.Parameters.Add(new OleDbParameter("customerName", custId));
OleDbDataReader reader = command.ExecuteReader();



      &lt;/pre&gt;&lt;h4&gt;

Using Stored Procedures:

      &lt;/h4&gt;&lt;pre&gt;


String custId = txtCustomerId.Text;
if (!Regex.IsMatch(custId, "^\d{6}\z"))
throw new ArgumentException("Invalid customer Id.");
try {
SqlCommand command = new SqlCommand("getAccountBalance", conn);
command.CommandType = CommandType.StoredProcedure;
command.Parameters.Add(new SqlParameter("@CustomerName", custId));
SqlDataReader reader = command.ExecuteReader();
}
catch (SqlException se) {
// … logging and error handling
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_765</key><name>Heuristic_SQL_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. Using simple tools and text editing, the attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with its database by sending a textual SQL query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain SQL commands that would be interpreted as such by the database.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Instead of concatenating strings: a. Use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters). b. An even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&lt;/li&gt;
&lt;li&gt;Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application creates an SQL query using string obtained from the user&lt;/h4&gt;&lt;pre&gt;public class SQL_Injection {
	public static void getUserId(Connection con) {
		System.out.println("enter user name");
		Scanner in = new Scanner(System.in);
		String user = in.nextLine();
		String query = "select user_id from User where user = " + user;
		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery(query);
	}
}&lt;/pre&gt;&lt;h4&gt;The string obtained from the user is checked for potentially malicious characters&lt;/h4&gt;&lt;pre&gt;public class SQL_Injection_Fixed {
	public static void getUserId(Connection con) {
		System.out.println("enter user name");
		Scanner in = new Scanner(System.in);
		String user = in.nextLine();
		String query = "select user_id from User where user = ?";
		PreparedStatement stmt = con.createStatement(query);
		stmt.setString(1, user);
		ResultSet rs = stmt.executeQuery(query);
	}
}&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application creates an SQL query using string obtained from the user
      &lt;/h4&gt;&lt;pre&gt;public class SQLInjection
{
        public void foo(TextBox tbUserName, SqliteConnection connection)
        {	
                string user = tbUserName.Text;
                string sql = "insert into users(name) VALUES (user)"
                MySqlCommand cmd = new MySqlCommand(sql, connection);
                connection.Open();
                SqlDataReader reader = cmd.ExecuteReader();
        }
}&lt;/pre&gt;&lt;h4&gt;
The string obtained from the user is checked for potentially malicious characters
      &lt;/h4&gt;&lt;pre&gt;
class SqlInjectionFixed
{
        public void foo(TextBox tbUserName, SqliteConnection connection)
        {
                string user = tbUserName.Text;
                string sql = "insert into users(name) VALUES (@param1)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue(@param1, user);
                connection.Open();
                SqlDataReader reader = cmd.ExecuteReader();
        }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_778</key><name>XPath_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Depending on the type of information contained in the queried XML document, an attacker could cause any effect of selecting the wrong information from the XML document, such as stealing unauthorized data or impersonating another user.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application queries an XML document by using a textual XPath query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could be maliciously crafted to cause the application to select the wrong information from the XML document.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Ideally, avoid making the xpath query dependent on user input. If it is necessary to make the query dependent on user input, preferably map XPath queries to user parameters, maintaining separation between data and code. If it is necessary to include the user input in the query, the input must be first properly validated as above.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;The application uses a user inputed string to construct an XPath query&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import xpath
print 'Insert item number: '
userInput = stdin.readline()	
xpath.find('//item' + userInput, doc)&lt;/pre&gt;&lt;h4&gt;The user inputed string is turned into an integer before usage in the XPath query&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import xpath
print 'Insert item number: '
userInput = stdin.readline()	
xpath.find('//item' + str(int(userInput)), doc)&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application uses a user inputed string to construct an XPath query&lt;/h4&gt;&lt;pre&gt;public class XPath_Injection {
	public static void main(String[] args) {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter xpath expression: ");
		String expression = userInputScanner.nextLine();

		// read a string value
		XPath xPath = XPathFactory.newInstance().newXPath();
		try {
			XPathExpression email = xPath.compile(expression);
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h4&gt;The user inputed string is encoded before usage in the XPath query&lt;/h4&gt;&lt;pre&gt;public class XPath_Injection_Fixed {
	public static void main(String[] args) {
		HashMap&lt;String, String&gt; sanitize = new HashMap&lt;String, String&gt;();
		sanitize.put("student", "/class/student");
		sanitize.put("graduate", "/class/graduate");
		sanitize.put("professor", "/class/professor");
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter xpath expression: ");
		String expression = userInputScanner.nextLine();

		// read a string value
		XPath xPath = XPathFactory.newInstance().newXPath();
		try {
			XPathExpression email = xPath.compile(sanitize.get(expression));
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application uses a user inputed string to construct an XPath query
      &lt;/h4&gt;&lt;pre&gt;class XPathInjection
    {
        static void foo(XPathDocument document)
        {
            XPathNavigator navigator = document.CreateNavigator();
            string input = Console.ReadLine();
            XPathNodeIterator nodes = navigator.Select(input);
        }
    }&lt;/pre&gt;&lt;h4&gt;
The user inputed string is encoded before usage in the XPath query
      &lt;/h4&gt;&lt;pre&gt;class XPathInjectionFixed
    {
        static void foo(XPathDocument document)
        {
            XPathNavigator navigator = document.CreateNavigator();
            string input = Console.ReadLine();
                        byte[] fileName = md5.ComputeHash(System.Text.Encoding.ASCII.GetBytes(input));
                        input = System.Text.Encoding.Default.GetString(fileName);
            XPathNodeIterator nodes = navigator.Select(input);
        }
    }&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_808</key><name>DoS_by_Sleep</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could provide a very high sleep value, effectively causing a denial of service for a long period of time.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application uses a user-provided value to set its sleep period, without enforcing a limited range for this value.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Ideally, the sleep command&amp;#8217;s duration should not be be according to user input at all. It should be either hardcoded, defined in a configuration file, or dynamically calculated at runtime.&lt;/li&gt;
&lt;li&gt;If it is necessary to allow the user to define the sleep duration, this value MUST be checked and enforced to be within a predefined range of valid values.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application receives a timeout int from the user to be used as argument for Sleep(). This int could be a very big number.
      &lt;/h4&gt;&lt;pre&gt;

public class DosbySleep
{
        public void foo()
        {
                int sleep = int.Parse(HttpContext.Request.QueryString["timeout"]);
                Thread.Sleep(sleep);
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The int received is varified to be in an acceptable range.
      &lt;/h4&gt;&lt;pre&gt;

public class DosbySleep
{
        public void foo()
        {
                int sleep = int.Parse(HttpContext.Request.QueryString["timeout"]);
                if (sleep &gt; 1000)
		{
			sleep = 1000;
		}
		else if (sleep &lt;= 10)
                {
                        sleep = 10;
                }
                Thread.Sleep(sleep);
        }
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_839</key><name>SlidingExpiration</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Insufficient Session Expiration&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;613&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Incomplete"&gt;Incomplete&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_613_Description" id="oc_613_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;According to WASC, "Insufficient Session Expiration is when a
web site permits an attacker to reuse old session credentials or session IDs for
authorization."&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_613_Time of Introduction" id="oc_613_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Architecture and Design&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_613_Demonstrative Examples" id="oc_613_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;The following snippet was taken from a J2EE web.xml deployment
descriptor in which the session-timeout parameter is explicitly defined (the
default value depends on the container). In this case the value is set to
-1, which means that a session will never expire.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;Java&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;web-app&amp;gt;&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;[...snipped...]&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&lt;br&gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;session-config&amp;gt;&lt;/div&gt;
&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;session-timeout&amp;gt;-1&amp;lt;/session-timeout&amp;gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;/session-config&amp;gt;&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;/web-app&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_613_Potential Mitigations" id="oc_613_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Set sessions/credentials expiration date.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Other Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Other Notes&lt;/div&gt;&lt;div name="oc_613_Other Notes" id="oc_613_Other Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;The lack of proper session expiration may improve the likely success of
certain attacks. For example, an attacker may intercept a session ID,
possibly via a network sniffer or Cross-site Scripting attack. Although
short session expiration times do not help if a stolen token is immediately
used, they will protect against ongoing replaying of the session ID. In
another scenario, a user might access a web site from a shared computer
(such as at a library, Internet cafe, or open work environment).
Insufficient Session Expiration could allow an attacker to use the browser's
back button to access web pages previously accessed by the victim.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_613_Relationships" id="oc_613_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;361&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=361" target="_blank"&gt;Time and State&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;672&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=672" target="_blank"&gt;Operation on a Resource after Expiration or Release&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;724&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=724" target="_blank"&gt;OWASP Top Ten 2004 Category A3 - Broken Authentication and Session Management&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;CanPrecede&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;287&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=287" target="_blank"&gt;Improper Authentication&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts&lt;/span&gt;699&lt;/span&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;RequiredBy&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Compound Element: Composite&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;352&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=352" target="_blank"&gt;Cross-Site Request Forgery (CSRF)&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_613_Taxonomy Mappings" id="oc_613_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;WASC&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;WASC&lt;/td&gt;&lt;td valign="top"&gt;47&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Insufficient Session Expiration &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_613_Content History" id="oc_613_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;WASC&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Sean Eidemiller&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;added/updated demonstrative
examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2010-02-16&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_819</key><name>Trust_Boundary_Violation</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Application developers may treat user input as trusted data, potentially creating an input-based vulnerability such as SQL Injection or Cross-Site Scripting.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application places user input, which is untrusted data, in the server-side Session folder, which is considered a trusted location. This could lead developers to treat untrusted data as trusted.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Validate and sanitize all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Don&amp;#8217;t mix untrusted user input with trusted data.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Input from the user is added to the current session without sanitizing it
      &lt;/h4&gt;&lt;pre&gt;

public class TrustBoundaryViolation
{
        public void foo()
        {
                string input = Console.ReadLine();
                HttpContext.Current.Session[�val�] = input;
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The numbers are extracted from the user inputed data before use
      &lt;/h4&gt;&lt;pre&gt;

public class TrustBoundaryViolationFixed
{
        public void foo()
        {
                string input = Console.ReadLine();
                string inputValue = int.Parse(input).ToString();
                HttpContext.Current.Session[�val�] = inputValue;
        }
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_776</key><name>Stored_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use legitimate access to the application to submit engineered data to the application&amp;#8217;s database. When another user subsequently accesses this data, web pages may be rewritten and malicious scripts may be activated.&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from the application&amp;#8217;s database. The data is embedded directly in the page's HTML, causing the browser to display it as part of the web page. This data may have originated in input from another user. If the data includes HTML fragments or Javascript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary database data without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all dynamic data, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Validation is not a replacement for encoding. Fully encode all dynamic data, regardless of source, before embedding it in output. Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;Javascript encoding for server-generated Javascript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or its built-in functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Data obtained from the excecution of an SQL command is output to a label&lt;/h4&gt;&lt;pre&gt;public class Stored_XSS {
	public static void XSSExample(Statement stmt) throws SQLException {
		Label label = new Label();
		ResultSet rs;
		rs = stmt.executeQuery("SELECT * FROM Customers WHERE UserName = Mickey");
		String lastNames = "";
		while (rs.next()) {
			lastNames += rs.getString("Lname") + ", ";
		}
		label.setText("Mickey last names are: " + lastNames + " ");
	}
}&lt;/pre&gt;&lt;h4&gt;The outputed string is encoded to hard-coded string before it is displayed in the label&lt;/h4&gt;&lt;pre&gt;public class Stored_XSS_Fix {
	public static void XSSExample(Statement stmt) throws SQLException {
		Label label = new Label();
		ResultSet rs;
		HashMap&lt;String, String&gt; sanitize = new HashMap&lt;String, String&gt;();
		sanitize.put("A", "Cohen");
		sanitize.put("B", "Smith");
		sanitize.put("C", "Bond");
		rs = stmt.executeQuery("SELECT * FROM Customers WHERE UserName = Mickey");
		String lastNames = "";
		while (rs.next()) {
			lastNames += sanitize.get(rs.getString("Lname")) + ", ";
		}
		label.setText("Mickey last names are: " + lastNames + " ");
	}
}&lt;/pre&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is rendered to a web-page template&lt;/h4&gt;&lt;pre&gt;function renderUserProfileTable(res, connection, user_id) {
	connection.query('SELECT id,name,description from user WHERE id= ?', [user_id],function(err, results) {
		var table = "&lt;table&gt;"
		table += "&lt;table class='profile-html-table'&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + results[0].name + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + results[0].description + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;/table&gt;"
		res.render("profile", table)
	});
}&lt;/pre&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is encoded and then rendered to a web-page template&lt;/h4&gt;&lt;pre&gt;var htmlencoder = require('htmlencode');

function renderUserProfileTable(res, connection, user_id) {
	connection.query('SELECT id,name,description from user WHERE id= ?', [user_id],function(err, results) {
		var table = "&lt;table&gt;"
		table += "&lt;table class='profile-html-table'&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + htmlencoder.htmlEncode(results[0].name) + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + htmlencoder.htmlEncode(results[0].description) + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;/table&gt;"
		res.render("profile", table)
	});
}&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is output to a label&lt;/h4&gt;&lt;pre&gt;public class StoredXss
{
        public string foo(Label lblOutput, SqlConnection connection, int id)
        {
                string sql = "select email from CustomerLogin where customerNumber = @id";
                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.Prepare();
                cmd.Parameters.AddWithValue("@id", id);
                string output = (string)cmd.ExecuteScalar();
                lblOutput.Text = String.IsNullOrEmpty(output) ? "Customer Number does not exist" : output;
        }
}&lt;/pre&gt;&lt;h4&gt;
The outputed string is Html encoded before it is displayed in the label
      &lt;/h4&gt;&lt;pre&gt;public class StoredXssFixed
{
        public string foo(Label lblOutput, SqlConnection connection, HttpServerUtility Server, int id)
        {
                string sql = "select email from CustomerLogin where customerNumber = @id";
                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.Prepare();
                cmd.Parameters.AddWithValue("@id", id);
                string output = (string)cmd.ExecuteScalar()
                lblOutput.Text = String.IsNullOrEmpty(output) ? "Customer Number does not exist" : Server.HtmlEncode(output);                
        }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_787</key><name>Impersonation_Issue</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div class="definitions" id="TableWithRules"&gt;&lt;table border="0" cellspacing="0" cellpadding="0" width="100%"&gt;&lt;tbody&gt;&lt;tr class="header"&gt;&lt;th valign="top" width="100%" colspan="2"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold; "&gt;Impersonation Issue&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;CWE ID&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;10024&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;Impersonation method is influenced by user input.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Likelihood of Exploit&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;&lt;p&gt;Low&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Common Consequences&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;&lt;p&gt;Misuse of impersonation may lead to a violation of the least privilege principle.&lt;/p&gt;&lt;p&gt;&lt;p&gt;&lt;p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Potential Mitigations&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;&lt;p&gt;Use impersonation only when you must do so and revert to normal privilege level when the higher privilege level is no longer required.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;div style="height:10px; width:100%;"&gt;&lt;/div&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Applicable Platforms&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;&lt;p&gt;All&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;/div&gt;
&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_788</key><name>Improper_Exception_Handling</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;An attacker could maliciously cause an exception that could crash the application, potentially resulting in a denial of service (DoS).&lt;/li&gt;
&lt;li&gt;Inadvertent application crashes may occur.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application performs some operation, such as database or file access, that could throw an exception. Since the application is not designed to properly handle the exception, the application could crash.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Any method that could cause an exception should be wrapped in a try-catch block that:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Explicitly handles expected exceptions&lt;/li&gt;
&lt;li&gt;Includes a default solution to explicitly handle unexpected exceptions&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Always catch exceptions explicitly.

      &lt;/h4&gt;&lt;pre&gt;


try
{
// Database access or other potentially dangerous function
}
catch (SQLException ex)
{
// Handle exception
}
catch (Exception ex)
{
// Default handler for unexpected exceptions
}


      &lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Always catch exceptions explicitly.

      &lt;/h4&gt;&lt;pre&gt;


try
{
// Database access or other potentially dangerous function
}
catch (SqlException ex)
{
// Handle exception
}
catch (Exception ex)
{
// Default handler for unexpected exceptions
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_762</key><name>Heuristic_2nd_Order_SQL_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. The attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with its database by sending a textual SQL query. The application creates the query by simply concatenating strings including data obtained from the database. Since that data may have been previously obtained from user input, and is neither checked for data type validity nor subsequently sanitized, the data could contain SQL commands that would be interpreted as such by the database.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all data, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Instead of concatenating strings: a. Use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters). b. An even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&lt;/li&gt;
&lt;li&gt;Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application creates an SQL query using data obtained from a database&lt;/h4&gt;&lt;pre&gt;public class Second_Order_SQL_Injection {
	public static void sql(Connection con, String sqlStm) {
		try {
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery(sqlStm);
			String userName = rs.getString("USER_NAME");
			String newSqlStm = "Update USER set PASSWORD = '1234' where userName like " + userName;
			stmt.executeUpdate(newSqlStm);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h4&gt;The data obtained from the database is checked for potentially malicious characters&lt;/h4&gt;&lt;pre&gt;public class Second_Order_SQL_Injection_Fixed {
	public static void sql(Connection con, String sqlStm) {
		try {
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery(sqlStm);
			String userName = rs.getString("USER_NAME");
			userName = userName.replaceAll("'", "");
			String newSqlStm = "Update USER set PASSWORD = '1234' where userName like " + userName;
			stmt.executeUpdate(newSqlStm);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application creates an SQL query using data obtained from a database
      &lt;/h4&gt;&lt;pre&gt;public class SecondOrderSQLInjection
{
        public void foo(SqlConnection connection, SqlDataAdapter DA)
        {
                DataSet DS = new DataSet();
                DA.Fill(ref DS, "UserName"); 
                SqlCommand command = new SqlCommand("SELECT * FROM Customers " + "WHERE UserName = " + DS[0]["UserName"].ToString(), connection);
                command.ExecuteNonQuery();
        }
}&lt;/pre&gt;&lt;h4&gt;
The data obtained from the database is checked for potentially malicious characters
      &lt;/h4&gt;&lt;pre&gt;class SecondOrderSQLInjectionFixed
{
        public void foo(SqlConnection connection, SqlDataAdapter DA)
        {
                DataSet DS = new DataSet();
                DA.Fill(ref DS, "UserName");
                string userName = DS[0]["UserName"].ToString().Replace("'", "");
                SqlCommand command = new SqlCommand("SELECT * FROM Customers " + "WHERE UserName = " + userName, connection);
                command.ExecuteNonQuery();
        }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3519</key><name>Stored_LDAP_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could arbitrarily engineer the application&amp;#8217;s LDAP queries. Depending on how the application is using LDAP, the attacker could potentially do any of the following:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Log in as another user&lt;/li&gt;
&lt;li&gt;Escalate privileges&lt;/li&gt;
&lt;li&gt;Steal information&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with an LDAP server, such as Active Directory, by sending a textual LDAP query or command. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain LDAP commands that would be interpreted as such by the LDAP server.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application uses the "user" field string from an HttpRequest to communicate with an LDAP server
      &lt;/h4&gt;&lt;pre&gt;

public class LDAPInjection
{
        public void foo(HttpRequest Request, DirectorySearcher searcher)
        {
                string userName = Request.QueryString["user"];
                searcher.Filter = "(&amp;(samAccountName=" + userName + "))";
        }
}



      &lt;/pre&gt;&lt;h4&gt;
Potentially hazardous characters in the "user" string are removed
      &lt;/h4&gt;&lt;pre&gt;

public class LDAPInjectionFixed
{
        public void foo(HttpRequest Request, DirectorySearcher searcher)
        {
                string userName = Request.QueryString["user"];
                userName = Regex.Replace(userName, "^\\d{3}-\\d{3}-\\d{4}$", "");
                searcher.Filter = "(&amp;(samAccountName=" + userName + "))";
        }
}





      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_799</key><name>URL_Canonicalization_Issue</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div class="definitions" id="TableWithRules"&gt;&lt;table border="0" cellspacing="0" cellpadding="0" width="100%"&gt;&lt;tbody&gt;&lt;tr class="header"&gt;&lt;th valign="top" width="100%" colspan="2"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold; "&gt;URL Canonicalization Issue&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;CWE ID&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;10030&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;The software, when making decision based on the URL does not properly cleanse special character sequences.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Likelihood of Exploit&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;&lt;p&gt;Low&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Common Consequences&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;&lt;p&gt;Wrong decisions are made by the software.&lt;/p&gt;&lt;p&gt;&lt;p&gt;&lt;p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Potential Mitigations&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;&lt;p&gt;Decode each URL before making decision which are based on it.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;div style="height:10px; width:100%;"&gt;&lt;/div&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Applicable Platforms&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;&lt;p&gt;All&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;/div&gt;
&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_806</key><name>Data_Filter_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. Using simple tools and text editing, the attacker would be able to steal any sensitive information stored in the server cache (such as personal user details or credit cards), and possibly change or erase existing data that could be subsequently used for other users or relied upon for security decisions. The application stores temporary data in its cache, and queries this data. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain commands that would be interpreted as such.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;&amp;#160;&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Instead of concatenating strings:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;a. Use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters).&lt;/li&gt;
&lt;li&gt;b. An even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;li&gt;If possible, avoid making security decisions based on cached data, especially data shared between users.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application creates a query using ViewState with cached data that might contain a user injected script
      &lt;/h4&gt;&lt;pre&gt;

public class DataFilterInjection
{
        public void foo(DataView dv)
        {
                string input = ViewState["strFilterFiles"].ToString();
                dv.RowFilter = "FileName like \'%" + input + "%\'";
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The string obtained from the cached data is examined for malicious characters
      &lt;/h4&gt;&lt;pre&gt;

public class DataFilterInjectionFixed
{
        public void foo(DataView dv)
        {
                string input = ViewState["strFilterFiles"].ToString();
                string filtered = input.Replace("'","");
                dv.RowFilter = "FileName like \'%" + filtered + "%\'";
        }
}






      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_833</key><name>CustomError</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;ASP.NET Misconfiguration: Missing Custom Error Page&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;12&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_12_Description" id="oc_12_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;An ASP .NET application must enable custom error pages in order
to prevent attackers from mining information from the framework's built-in
responses.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_12_Time of Introduction" id="oc_12_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;li&gt;Operation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_12_Applicable Platforms" id="oc_12_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;.NET&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_12_Common Consequences" id="oc_12_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Default error pages gives detailed information about the error that
occurred, and should not be used in production environments.&lt;/p&gt;&lt;p&gt;Attackers can leverage the additional information provided by a
default error page to mount attacks targeted on the framework, database,
or other resources used by the application.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_12_Demonstrative Examples" id="oc_12_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;Custom error message mode is turned off. An ASP.NET error message
with detailed stack trace and platform versions will be
returned.&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;ASP.NET&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;customErrors ... mode="Off" /&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p class="subheading"&gt;Example 2&lt;/p&gt;&lt;p&gt;Custom error message mode for remote user only. No defaultRedirect
error page is specified. The local user on the web server will see a
detailed stack trace. For remote users, an ASP.NET error message with the
server customError configuration setting and the platform version will be
returned.&lt;/p&gt;&lt;div class="indent Good_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Good Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;ASP.NET&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;customErrors mode="RemoteOnly" /&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_12_Potential Mitigations" id="oc_12_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Handle exceptions appropriately in source code. The best practice is
to use a custom error message. Make sure that the mode attribute is set
to "RemoteOnly" in the web.config file as shown in the following
example.&lt;/p&gt;&lt;div class="indent Good_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Good Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;customErrors mode="RemoteOnly" /&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The mode attribute of the &amp;lt;customErrors&amp;gt; tag in the
Web.config file defines whether custom or default error pages are used.
It should be configured to use a custom page as follows:&lt;/p&gt;&lt;div class="indent Good_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Good Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;customErrors mode="On" defaultRedirect="YourErrorPage.htm"
/&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Do not attempt to process an error or attempt to mask it.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Verify return values are correct and do not supply sensitive
information about the system.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;ASP .NET applications should be configured to use custom error pages
instead of the framework default page.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Background Details"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Background Details&lt;/div&gt;&lt;div name="oc_12_Background Details" id="oc_12_Background Details" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;The mode attribute of the &amp;lt;customErrors&amp;gt; tag defines whether
custom or default error pages are used.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_12_Relationships" id="oc_12_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;2&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=2" target="_blank"&gt;Environment&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;10&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=10" target="_blank"&gt;ASP.NET Environment Issues&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;756&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=756" target="_blank"&gt;Missing Custom Error Page&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_12_Taxonomy Mappings" id="oc_12_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;ASP.NET Misconfiguration: Missing Custom Error
Handling&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="References"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;References&lt;/div&gt;&lt;div name="oc_12_References" id="oc_12_References" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;M. Howard, D. LeBlanc
and J. Viega. "19 Deadly Sins of Software Security". McGraw-Hill/Osborne. 2005. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;OWASP, Fortify Software. "ASP.NET Misconfiguration: Missing Custom Error
Handling". &amp;lt;&lt;a href="http://www.owasp.org/index.php/ASP.NET_Misconfiguration:_Missing_Custom_Error_Handling" target="_blank"&gt;http://www.owasp.org/index.php/ASP.NET_Misconfiguration:_Missing_Custom_Error_Handling&lt;/a&gt;&amp;gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_12_Content History" id="oc_12_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated References, Demonstrative Example,
Potential Mitigations, Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships, Other Notes, References,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-10-14&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-11-24&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences, Other Notes,
Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Name, Relationships&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Background Details, Common Consequences,
Other Notes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Previous Entry Names&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Change Date&lt;/th&gt;&lt;th valign="top" nowrap="" colspan="3"&gt;Previous Entry
Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;2009-03-10&lt;/td&gt;&lt;td valign="top" colspan="3"&gt;ASP.NET Misconfiguration:
Missing Custom Error Handling&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border-bottom:1px solid #BAC5E3" colspan="4"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_767</key><name>Heuristic_XSRF</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could cause the victim to perform any action for which the victim is authorized, such as transferring funds from the victim&amp;#8217;s account to the attacker&amp;#8217;s. The action will be logged as being performed by the victim.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application performs some action that modifies database contents, based purely on HTTP request content, and does not require per-request renewed authentication (such as transaction authentication or a cryptographic form token), instead relying on browser or session authentication. This means that an attacker could use social engineering to cause a victim to click a link including a transaction request, and the application would trust the victim&amp;#8217;s browser and would perform the action. This type of attack is known as Cross-Site Request Forgery (XSRF or CSRF).&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Implement a standard or library anti-CSRF mechanism: preferably a built-in platform-provided mechanism or OWASP&amp;#8217;s CSRFGuard. Selective re-authentication or transaction authentication, such as with a cryptographic form token, is also acceptable.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
HttpRequest content is used in a database query without any validation of that content
      &lt;/h4&gt;&lt;pre&gt;

public class XSRF
{
        public void foo(SqliteConnection connection, HttpRequest Request)
        {
                string input = Request.QueryString["user"];
                string sql = "insert into Comments(comment) values (@user)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
            	cmd.Parameters.AddwithValue(@user, input);
            	connection.Open();
            	SqlDataReader reader = cmd.ExecuteReader();
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The HttpRequest content is validated using AntiXsrfTokenKey
      &lt;/h4&gt;&lt;pre&gt;

public class XSRFFixed
{
        public void foo(SqliteConnection connection, AntiXsrf AntiXsrfTokenKey, HttpRequest Request)
        {
                string input = AntiXsrfTokenKey.Validate(Request.QueryString["user"]);
                string sql = "insert into Comments(comment) values (@user)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
            	cmd.Parameters.AddwithValue(@user, input);
            	connection.Open();
            	SqlDataReader reader = cmd.ExecuteReader();
        }

}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_793</key><name>Log_Forging</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could engineer audit logs of security-sensitive actions and lay a false audit trail, potentially implicating an innocent user or hiding an incident.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application writes audit logs upon security-sensitive actions. Since the audit log includes user input that is neither checked for data type validity nor subsequently sanitized, the input could contain false information made to look like legitimate audit log data,&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Validation is not a replacement for encoding. Fully encode all dynamic data, regardless of source, before embedding it in logs.&lt;/li&gt;
&lt;li&gt;Use a secure logging mechanism.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Ensure you encode any special delimiter characters before writing to a log file.

      &lt;/h4&gt;&lt;pre&gt;


Log.Write( logDetails.Replace(CRLF, @"\CRLF"));


      &lt;/pre&gt;&lt;h3&gt;Swift&lt;/h3&gt;&lt;h4&gt;Ensure you encode any special delimiter characters before writing to a log file.&lt;/h4&gt;&lt;pre&gt;


print(logDetails.stringByReplacingOccurrencesOfString("\n", withString: "\\n"))


&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Ensure you encode any special delimiter characters before writing to a log file.

      &lt;/h4&gt;&lt;pre&gt;


Log.Write( logDetails.Replace(CRLF, @"\CRLF"));



      &lt;/pre&gt;&lt;h3&gt;Objc&lt;/h3&gt;&lt;h4&gt;Ensure you encode any special delimiter characters before writing to a log file.&lt;/h4&gt;&lt;pre&gt;


NSLog(@"%@", [logDetails stringByReplacingOccurrencesOfString:@"\n" withString:@"\\n"]);


&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_794</key><name>Insufficiently_Protected_Credentials</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could steal user credentials, enabling access to user accounts and confidential data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;User passwords are written to the database without being properly encrypted with a cryptographic hash. The application reads clear passwords straight from the database.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Store passwords using a cryptographic hash designed as a password protection scheme, such as:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;bcrypt&lt;/li&gt;
&lt;li&gt;scrypt&lt;/li&gt;
&lt;li&gt;PBKDF2 (with random salt) These need to be configured with an appropriately high work effort.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Always use a secure password protection scheme to store passwords, such as bcrypt:

      &lt;/h4&gt;&lt;pre&gt;


String hashed = BCrypt.hashpw(password, BCrypt.gensalt(12));


      &lt;/pre&gt;&lt;h4&gt;

For password verification, use the matching function:

      &lt;/h4&gt;&lt;pre&gt;


bool isValid = BCrypt.checkpw(candidate, hashed);


      &lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Always use a secure password protection scheme to store passwords, such as bcrypt:

      &lt;/h4&gt;&lt;pre&gt;


string hashed = BCrypt.HashPassword(password, BCrypt.GenerateSalt(12));



      &lt;/pre&gt;&lt;h4&gt;

For password verification, use the matching function:

      &lt;/h4&gt;&lt;pre&gt;


bool isValid = BCrypt.CheckPassword(candidate, hashed);



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_821</key><name>XSRF</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could cause the victim to perform any action for which the victim is authorized, such as transferring funds from the victim&amp;#8217;s account to the attacker&amp;#8217;s. The action will be logged as being performed by the victim.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application performs some action that modifies database contents, based purely on HTTP request content, and does not require per-request renewed authentication (such as transaction authentication or a cryptographic form token), instead relying on browser or session authentication. This means that an attacker could use social engineering to cause a victim to click a link including a transaction request, and the application would trust the victim&amp;#8217;s browser and would perform the action. This type of attack is known as Cross-Site Request Forgery (XSRF or CSRF).&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Implement a standard or library anti-CSRF mechanism: preferably a built-in platform-provided mechanism or OWASP&amp;#8217;s CSRFGuard. Selective re-authentication or transaction authentication, such as with a cryptographic form token, is also acceptable.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
HttpRequest content is used in a database query without any validation of that content
      &lt;/h4&gt;&lt;pre&gt;

public class XSRF
{
        public void foo(SqliteConnection connection, HttpRequest Request)
        {
                string input = Request.QueryString["user"];
                string sql = "insert into Comments(comment) values (@user)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
            	cmd.Parameters.AddwithValue(@user, input);
            	connection.Open();
            	SqlDataReader reader = cmd.ExecuteReader();
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The HttpRequest content is validated using AntiXsrfTokenKey
      &lt;/h4&gt;&lt;pre&gt;

public class XSRFFixed
{
        public void foo(SqliteConnection connection, AntiXsrf AntiXsrfTokenKey, HttpRequest Request)
        {
                string input = AntiXsrfTokenKey.Validate(Request.QueryString["user"]);
                string sql = "insert into Comments(comment) values (@user)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
            	cmd.Parameters.AddwithValue(@user, input);
            	connection.Open();
            	SqlDataReader reader = cmd.ExecuteReader();
        }

}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_789</key><name>Improper_Session_Management</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Information Leak Through Sent Data&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;201&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Variant)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_201_Description" id="oc_201_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The accidental leaking of sensitive information through sent
data refers to the transmission of data which are either sensitive in and of
itself or useful in the further exploitation of the system through standard data
channels.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_201_Time of Introduction" id="oc_201_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_201_Applicable Platforms" id="oc_201_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_201_Common Consequences" id="oc_201_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;Data leakage results in the compromise of data confidentiality.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_201_Demonstrative Examples" id="oc_201_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;The following is an actual mysql error statement:&lt;/p&gt;&lt;div class="indent Result"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Result)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;SQL&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;Warning: mysql_pconnect(): Access denied for user:
'root@localhost' (Using password: N1nj4) in
/usr/local/www/wi-data/includes/database.inc on line 4&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_201_Potential Mitigations" id="oc_201_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Requirements specification: Specify data output such that no sensitive
data is sent.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p class="subheading"&gt;Phase:  Implementation&lt;/p&gt;&lt;p&gt;Ensure that any possibly sensitive data specified in the requirements
is verified with designers to ensure that it is either a calculated risk
or mitigated elsewhere. Any information that is not necessary to the
functionality should be removed in order to lower both the overhead and
the possibility of security sensitive data being sent.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Compartmentalize your system to have "safe" areas where trust
boundaries can be unambiguously drawn. Do not allow sensitive data to go
outside of the trust boundary and always be careful when interfacing
with a compartment outside of the safe area.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Setup default error message to handle unexpected errors.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_201_Relationships" id="oc_201_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;200&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=200" target="_blank"&gt;Information Exposure&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;CanAlsoBe&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Variant&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;202&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=202" target="_blank"&gt;Privacy Leak through Data Queries&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;CanAlsoBe&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Base&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;209&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=209" target="_blank"&gt;Information Exposure Through an Error Message&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts&lt;/span&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_201_Taxonomy Mappings" id="oc_201_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Accidental leaking of sensitive information through sent
data&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Related Attack Patterns"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Related Attack Patterns&lt;/div&gt;&lt;div name="oc_201_Related Attack Patterns" id="oc_201_Related Attack Patterns" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;CAPEC-ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Attack Pattern Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;&lt;div style="font-weight:normal; font-size:85%; font-style:italic; color:#000000"&gt;(CAPEC Version: 1.5)&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;a href="http://capec.mitre.org12.html" target="_blank"&gt;12&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;Choosing a Message/Channel Identifier on a Public/Multicast Channel&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_201_Content History" id="oc_201_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CLASP&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences, Relationships, Other Notes,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-10-29&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Other Notes,
Potential Mitigations&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_791</key><name>JavaScript_Hijacking</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div class="definitions" id="TableWithRules"&gt;&lt;table border="0" cellspacing="0" cellpadding="0" width="100%"&gt;&lt;tbody&gt;&lt;tr class="header"&gt;&lt;th valign="top" width="100%" colspan="2"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold; "&gt;Information Leak through Javascript hijacking&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;CWE ID&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;10598&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;Transmission of data in JASON format in web applications can lead to theft of these data.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Potential Mitigations&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;&lt;p&gt;Recommendations include using safe AJAX frameworks, using only POST method and sending JASON data with a custom "header" transforming it in non-executable javascript. Javascript hijacking ca be seen as a specific kind of CSRF so mitigation techniques and designs relevant to CSRF could be relevant.&lt;/p&gt;&lt;p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Context Notes&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;&lt;p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Node Relationships&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;&lt;div class="relationships"&gt;&lt;div class="primary"&gt;ChildOf - 		&lt;a href="http://cwe.mitre.org/data/definitions/200.html"&gt;Information Leak (Information Disclosure)&lt;/a&gt; (200)		&lt;/div&gt;&lt;div&gt;			ChildOf - &lt;a href="http://cwe.mitre.org/data/definitions/352.html"&gt;Cross-Site Request Forgery (CSRF)&lt;/a&gt; (352)			&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;/div&gt;
&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3518</key><name>Stored_XPath_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Depending on the type of information contained in the queried XML document, an attacker could cause any effect of selecting the wrong information from the XML document, such as stealing unauthorized data or impersonating another user.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application queries an XML document by using a textual XPath query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could be maliciously crafted to cause the application to select the wrong information from the XML document.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Ideally, avoid making the xpath query dependent on user input. If it is necessary to make the query dependent on user input, preferably map XPath queries to user parameters, maintaining separation between data and code. If it is necessary to include the user input in the query, the input must be first properly validated as above.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;The application uses a user inputed string to construct an XPath query&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import xpath
print 'Insert item number: '
userInput = stdin.readline()	
xpath.find('//item' + userInput, doc)&lt;/pre&gt;&lt;h4&gt;The user inputed string is turned into an integer before usage in the XPath query&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import xpath
print 'Insert item number: '
userInput = stdin.readline()	
xpath.find('//item' + str(int(userInput)), doc)&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application uses a user inputed string to construct an XPath query&lt;/h4&gt;&lt;pre&gt;public class XPath_Injection {
	public static void main(String[] args) {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter xpath expression: ");
		String expression = userInputScanner.nextLine();

		// read a string value
		XPath xPath = XPathFactory.newInstance().newXPath();
		try {
			XPathExpression email = xPath.compile(expression);
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h4&gt;The user inputed string is encoded before usage in the XPath query&lt;/h4&gt;&lt;pre&gt;public class XPath_Injection_Fixed {
	public static void main(String[] args) {
		HashMap&lt;String, String&gt; sanitize = new HashMap&lt;String, String&gt;();
		sanitize.put("student", "/class/student");
		sanitize.put("graduate", "/class/graduate");
		sanitize.put("professor", "/class/professor");
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter xpath expression: ");
		String expression = userInputScanner.nextLine();

		// read a string value
		XPath xPath = XPathFactory.newInstance().newXPath();
		try {
			XPathExpression email = xPath.compile(sanitize.get(expression));
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application uses a user inputed string to construct an XPath query
      &lt;/h4&gt;&lt;pre&gt;class XPathInjection
    {
        static void foo(XPathDocument document)
        {
            XPathNavigator navigator = document.CreateNavigator();
            string input = Console.ReadLine();
            XPathNodeIterator nodes = navigator.Select(input);
        }
    }&lt;/pre&gt;&lt;h4&gt;
The user inputed string is encoded before usage in the XPath query
      &lt;/h4&gt;&lt;pre&gt;class XPathInjectionFixed
    {
        static void foo(XPathDocument document)
        {
            XPathNavigator navigator = document.CreateNavigator();
            string input = Console.ReadLine();
                        byte[] fileName = md5.ComputeHash(System.Text.Encoding.ASCII.GetBytes(input));
                        input = System.Text.Encoding.Default.GetString(fileName);
            XPathNodeIterator nodes = navigator.Select(input);
        }
    }&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_774</key><name>Second_Order_SQL_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. The attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with its database by sending a textual SQL query. The application creates the query by simply concatenating strings including data obtained from the database. Since that data may have been previously obtained from user input, and is neither checked for data type validity nor subsequently sanitized, the data could contain SQL commands that would be interpreted as such by the database.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all data, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Instead of concatenating strings: a. Use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters). b. An even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&lt;/li&gt;
&lt;li&gt;Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application creates an SQL query using data obtained from a database&lt;/h4&gt;&lt;pre&gt;public class Second_Order_SQL_Injection {
	public static void sql(Connection con, String sqlStm) {
		try {
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery(sqlStm);
			String userName = rs.getString("USER_NAME");
			String newSqlStm = "Update USER set PASSWORD = '1234' where userName like " + userName;
			stmt.executeUpdate(newSqlStm);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h4&gt;The data obtained from the database is checked for potentially malicious characters&lt;/h4&gt;&lt;pre&gt;public class Second_Order_SQL_Injection_Fixed {
	public static void sql(Connection con, String sqlStm) {
		try {
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery(sqlStm);
			String userName = rs.getString("USER_NAME");
			userName = userName.replaceAll("'", "");
			String newSqlStm = "Update USER set PASSWORD = '1234' where userName like " + userName;
			stmt.executeUpdate(newSqlStm);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application creates an SQL query using data obtained from a database
      &lt;/h4&gt;&lt;pre&gt;public class SecondOrderSQLInjection
{
        public void foo(SqlConnection connection, SqlDataAdapter DA)
        {
                DataSet DS = new DataSet();
                DA.Fill(ref DS, "UserName"); 
                SqlCommand command = new SqlCommand("SELECT * FROM Customers " + "WHERE UserName = " + DS[0]["UserName"].ToString(), connection);
                command.ExecuteNonQuery();
        }
}&lt;/pre&gt;&lt;h4&gt;
The data obtained from the database is checked for potentially malicious characters
      &lt;/h4&gt;&lt;pre&gt;class SecondOrderSQLInjectionFixed
{
        public void foo(SqlConnection connection, SqlDataAdapter DA)
        {
                DataSet DS = new DataSet();
                DA.Fill(ref DS, "UserName");
                string userName = DS[0]["UserName"].ToString().Replace("'", "");
                SqlCommand command = new SqlCommand("SELECT * FROM Customers " + "WHERE UserName = " + userName, connection);
                command.ExecuteNonQuery();
        }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_766</key><name>Heuristic_Stored_XSS</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use legitimate access to the application to submit engineered data to the application&amp;#8217;s database. When another user subsequently accesses this data, web pages may be rewritten and malicious scripts may be activated.&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application creates web pages that include data from the application&amp;#8217;s database. The data is embedded directly in the page's HTML, causing the browser to display it as part of the web page. This data may have originated in input from another user. If the data includes HTML fragments or Javascript, these are displayed too, and the user cannot tell that this is not the intended page. The vulnerability is the result of embedding arbitrary database data without first encoding it in a format that would prevent the browser from treating it like HTML instead of plain text.&lt;/div&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all dynamic data, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Validation is not a replacement for encoding. Fully encode all dynamic data, regardless of source, before embedding it in output. Encoding should be context-sensitive. For example:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;HTML encoding for HTML content&lt;/li&gt;
&lt;li&gt;HTML attribute encoding for data output to attribute values&lt;/li&gt;
&lt;li&gt;Javascript encoding for server-generated Javascript.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Consider using either the ESAPI encoding library, or its built-in functions. For earlier versions of ASP.NET, consider using the AntiXSS library.&lt;/li&gt;
&lt;li&gt;In the Content-Type HTTP response header, explicitly define character encoding (charset) for the entire page.&lt;/li&gt;
&lt;li&gt;Set the httpOnly flag on the session cookie, to prevent XSS exploits from stealing the cookie.&lt;/li&gt;
&lt;/ol&gt;            
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;Data obtained from the excecution of an SQL command is output to a label&lt;/h4&gt;&lt;pre&gt;public class Stored_XSS {
	public static void XSSExample(Statement stmt) throws SQLException {
		Label label = new Label();
		ResultSet rs;
		rs = stmt.executeQuery("SELECT * FROM Customers WHERE UserName = Mickey");
		String lastNames = "";
		while (rs.next()) {
			lastNames += rs.getString("Lname") + ", ";
		}
		label.setText("Mickey last names are: " + lastNames + " ");
	}
}&lt;/pre&gt;&lt;h4&gt;The outputed string is encoded to hard-coded string before it is displayed in the label&lt;/h4&gt;&lt;pre&gt;public class Stored_XSS_Fix {
	public static void XSSExample(Statement stmt) throws SQLException {
		Label label = new Label();
		ResultSet rs;
		HashMap&lt;String, String&gt; sanitize = new HashMap&lt;String, String&gt;();
		sanitize.put("A", "Cohen");
		sanitize.put("B", "Smith");
		sanitize.put("C", "Bond");
		rs = stmt.executeQuery("SELECT * FROM Customers WHERE UserName = Mickey");
		String lastNames = "";
		while (rs.next()) {
			lastNames += sanitize.get(rs.getString("Lname")) + ", ";
		}
		label.setText("Mickey last names are: " + lastNames + " ");
	}
}&lt;/pre&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is rendered to a web-page template&lt;/h4&gt;&lt;pre&gt;function renderUserProfileTable(res, connection, user_id) {
	connection.query('SELECT id,name,description from user WHERE id= ?', [user_id],function(err, results) {
		var table = "&lt;table&gt;"
		table += "&lt;table class='profile-html-table'&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + results[0].name + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + results[0].description + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;/table&gt;"
		res.render("profile", table)
	});
}&lt;/pre&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is encoded and then rendered to a web-page template&lt;/h4&gt;&lt;pre&gt;var htmlencoder = require('htmlencode');

function renderUserProfileTable(res, connection, user_id) {
	connection.query('SELECT id,name,description from user WHERE id= ?', [user_id],function(err, results) {
		var table = "&lt;table&gt;"
		table += "&lt;table class='profile-html-table'&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + htmlencoder.htmlEncode(results[0].name) + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;tr&gt;&lt;td&gt;" + htmlencoder.htmlEncode(results[0].description) + "&lt;/td&gt;&lt;/tr&gt;"
		table += "&lt;/table&gt;"
		res.render("profile", table)
	});
}&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;Data obtained from the execution of an SQL command is output to a label&lt;/h4&gt;&lt;pre&gt;public class StoredXss
{
        public string foo(Label lblOutput, SqlConnection connection, int id)
        {
                string sql = "select email from CustomerLogin where customerNumber = @id";
                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.Prepare();
                cmd.Parameters.AddWithValue("@id", id);
                string output = (string)cmd.ExecuteScalar();
                lblOutput.Text = String.IsNullOrEmpty(output) ? "Customer Number does not exist" : output;
        }
}&lt;/pre&gt;&lt;h4&gt;
The outputed string is Html encoded before it is displayed in the label
      &lt;/h4&gt;&lt;pre&gt;public class StoredXssFixed
{
        public string foo(Label lblOutput, SqlConnection connection, HttpServerUtility Server, int id)
        {
                string sql = "select email from CustomerLogin where customerNumber = @id";
                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.Prepare();
                cmd.Parameters.AddWithValue("@id", id);
                string output = (string)cmd.ExecuteScalar()
                lblOutput.Text = String.IsNullOrEmpty(output) ? "Customer Number does not exist" : Server.HtmlEncode(output);                
        }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_835</key><name>HardcodedCredentials</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold;color:white;"&gt;Leftover Debug Code&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Weakness ID: &lt;/b&gt;489&lt;span style="font-style:italic; font-size:80%"&gt; (Weakness Base)&lt;/span&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_489_Description" id="oc_489_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;&lt;div class="indent"&gt;The application can be deployed with active debugging code that
can create unintended entry points.&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_489_Time of Introduction" id="oc_489_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;li&gt;Operation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_489_Applicable Platforms" id="oc_489_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;All&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Common Consequences&lt;/div&gt;&lt;div name="oc_489_Common Consequences" id="oc_489_Common Consequences" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Scope&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Effect&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top" nowrap=""&gt;&lt;div style="font-size:90%;"&gt;Confidentiality&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Integrity&lt;/div&gt;&lt;div style="font-size:90%;"&gt;Availability&lt;/div&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;p&gt;The severity of the exposed debug application will depend on the
particular instance. At the least, it will give an attacker sensitive
information about the settings and mechanics of web applications on the
server. At worst, as is often the case, the debug application will allow
an attacker complete control over the web application and server, as
well as confidential information that either of these access.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_489_Demonstrative Examples" id="oc_489_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;Example 1&lt;/p&gt;&lt;p&gt;Debug code can be used to bypass authentication. For example,
suppose an application has a login script that receives a username and a
password. Assume also that a third, optional, parameter, called "debug", is
interpreted by the script as requesting a switch to debug mode, and that
when this parameter is given the username and password are not checked. In
such a case, it is very simple to bypass the authentication process if the
special behavior of the application regarding the debug parameter is known.
In a case where the form is:&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: &lt;/span&gt;HTML&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;FORM ACTION="/authenticate_login.cgi"&amp;gt;&lt;/div&gt;&lt;div class="indent "&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;INPUT TYPE=TEXT name=username&amp;gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;INPUT TYPE=PASSWORD name=password&amp;gt;&lt;/div&gt;
&lt;div style="font-size:90%;"&gt;&amp;lt;INPUT TYPE=SUBMIT&amp;gt;&lt;/div&gt;
&lt;/div&gt;&lt;div style="font-size:90%;"&gt;&amp;lt;/FORM&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Then a conforming link will look like:&lt;/p&gt;&lt;div class="indent "&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;http://TARGET/authenticate_login.cgi?username=...&amp;amp;password=...&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;An attacker can change this to:&lt;/p&gt;&lt;div class="indent Attack"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Attack)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;http://TARGET/authenticate_login.cgi?username=&amp;amp;password=&amp;amp;debug=1&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Which will grant the attacker access to the site, bypassing the
authentication process.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_489_Potential Mitigations" id="oc_489_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td valign="top"&gt;&lt;p&gt;Remove debug code before deploying the application.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Other Notes"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Other Notes&lt;/div&gt;&lt;div name="oc_489_Other Notes" id="oc_489_Other Notes" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;A common development practice is to add "back door" code specifically
designed for debugging or testing purposes that is not intended to be
shipped or deployed with the application. In web-based applications, debug
code is used to test and modify web application properties, configuration
information, and functions. If a debug application is left on a production
server, an attacker may be able to use it to perform these tasks. When this
sort of debug code is left in the application, the application is open to
unintended modes of interaction. These back door entry points create
security risks because they are not considered during design or testing and
fall outside of the expected operating conditions of the application.&lt;/p&gt;
&lt;p&gt;While it is possible to leave debug code in an application in any
language, in J2EE a main method may be a good indicator that debug code has
been left in the application, although there may not be any direct security
impact.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Relationships"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Relationships&lt;/div&gt;&lt;div name="oc_489_Relationships" id="oc_489_Relationships" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" id="Detail"&gt;&lt;tr&gt;&lt;th valign="top"&gt;Nature&lt;/th&gt;&lt;th valign="top"&gt;Type&lt;/th&gt;&lt;th valign="top"&gt;ID&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Name&lt;/th&gt;&lt;th valign="middle" class="left" style="text-align:center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View(s) this relationship pertains to&lt;/span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weakness Class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;485&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=485" target="_blank"&gt;Insufficient Encapsulation&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Development Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;699&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Seven Pernicious Kingdoms &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;700&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Research Concepts &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;1000&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr class="primary"&gt;&lt;td valign="top"&gt;ChildOf&lt;/td&gt;&lt;td valign="top" nowrap="" class="right" align="center" style="padding-top:1px"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Category&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;731&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=731" target="_blank"&gt;OWASP Top Ten 2004 Category A10 - Insecure Configuration Management&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses in OWASP Top Ten (2004) &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;711&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;tbody&gt;&lt;tr class="foreign"&gt;&lt;td valign="top"&gt;MemberOf&lt;/td&gt;&lt;td valign="middle" nowrap="" class="right" align="center"&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;View&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign="top"&gt;630&lt;/td&gt;&lt;td valign="top"&gt;&lt;a href="cwe.aspx?cweid=630" target="_blank"&gt;Weaknesses Examined by SAMATE&lt;/a&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div class="left"&gt;&lt;b&gt;&lt;span class="tool"&gt;&lt;span class="tip"&gt;Weaknesses Examined by SAMATE &lt;b&gt;(primary)&lt;/b&gt;&lt;/span&gt;630&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Taxonomy Mappings"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Taxonomy Mappings&lt;/div&gt;&lt;div name="oc_489_Taxonomy Mappings" id="oc_489_Taxonomy Mappings" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Mapped Taxonomy Name&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Node ID&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Fit&lt;/th&gt;&lt;th valign="top" width="100%"&gt;Mapped Node Name&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;Leftover Debug Code&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign="top"&gt;OWASP Top Ten 2004&lt;/td&gt;&lt;td valign="top"&gt;A10&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE More Specific&lt;/td&gt;&lt;td valign="top"&gt;Insecure Configuration Management&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="White Box Definitions"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;White Box Definitions&lt;/div&gt;&lt;div name="oc_489_White Box Definitions" id="oc_489_White Box Definitions" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;p&gt;A weakness where code path has a statement that defines an entry point
into an application which exposes additional state and control
information&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Content History"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Content History&lt;/div&gt;&lt;div name="oc_489_Content History" id="oc_489_Content History" class="expandblock"&gt;&lt;div class="tabledetail"&gt;&lt;table width="100%" cellpadding="0" cellspacing="0" border="0" class="Detail"&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Submissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Submission Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Submitter&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;7 Pernicious Kingdoms&lt;/td&gt;&lt;td valign="top"&gt;&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Externally Mined&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" colspan="5" class="title"&gt;Modifications&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th valign="top" nowrap=""&gt;Modification Date&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Modifier&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Organization&lt;/th&gt;&lt;th valign="top" nowrap=""&gt;Source&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-07-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Eric Dalci&lt;/td&gt;&lt;td valign="top"&gt;Cigital&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Potential Mitigations,
Time of Introduction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-08-01&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top"&gt;KDM Analytics&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;External&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;added/updated white box definitions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2008-09-08&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences, Relationships, Other Notes,
Taxonomy Mappings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-07-27&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Demonstrative Examples&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="" rowspan="2" style="border-bottom:1px solid #BAC5E3"&gt;2009-10-29&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;CWE Content Team&lt;/td&gt;&lt;td valign="top"&gt;MITRE&lt;/td&gt;&lt;td valign="top" nowrap=""&gt;Internal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" colspan="3" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"&gt;updated Common Consequences&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;/html&gt;

&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;a class="backtop" href="#top"&gt;Back to top&lt;/a&gt;&lt;/div&gt;

&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_837</key><name>NonUniqueFormName</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;
&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
	&lt;link href="main.css" rel="stylesheet" type="text/css"&gt;
&lt;div id="CWEDefinition"&gt;&lt;div class="title"&gt;&lt;table cellpadding="0" cellspacing="0" border="0" width="100%"&gt;&lt;tr&gt;&lt;td valign="top" width="20px"&gt;&lt;/td&gt;&lt;td valign="top"&gt;&lt;div align="center"&gt;
    &lt;span style="font-weight:bold;color:white;"&gt;Non Unique Form Name&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td valign="top" width="20px"&gt;&lt;div class="left noprint"&gt;

&lt;span class="tool"&gt;&lt;/span&gt;

&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="status"&gt;&lt;table width="100%" border="0" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td valign="top" align="left" width="33%" nowrap=""&gt;&lt;b&gt;Compound Element ID:
        10707&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" align="center" nowrap=""&gt;&lt;/td&gt;&lt;td valign="top" align="right" nowrap=""&gt;&lt;b&gt;Status: &lt;/b&gt;&lt;span class="Draft"&gt;Draft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id="Description"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Description&lt;/div&gt;&lt;div name="oc_352_Description" id="oc_352_Description" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Description Summary&lt;/p&gt;
    &lt;div class="indent"&gt;When there are multiple ASP.NET applications running on the
        server,it&amp;#39;s very important to set a unique authentication cookie name for each
        of the applications.
        &lt;br&gt;
        In case there are applications with the same authentication cookie name, when
        user logges in into one of the application he can gain acces to the other.&lt;br&gt;
        &lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Time of Introduction"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Time of Introduction&lt;/div&gt;&lt;div name="oc_352_Time of Introduction" id="oc_352_Time of Introduction" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;ul&gt;
&lt;li&gt;Implementation&lt;/li&gt;
        &lt;li&gt;Operation&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Applicable Platforms"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Applicable Platforms&lt;/div&gt;&lt;div name="oc_352_Applicable Platforms" id="oc_352_Applicable Platforms" class="expandblock"&gt;&lt;div class="detail"&gt;
&lt;p class="subheading"&gt;Languages&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;ASP.NET&lt;/p&gt;
&lt;/div&gt;
&lt;p class="subheading"&gt;Technology Classes&lt;/p&gt;&lt;div class="indent"&gt;
&lt;p&gt;Web-Server&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Common Consequences"&gt;&lt;div name="oc_352_Common Consequences" id="oc_352_Common Consequences" class="expandblock"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="Demonstrative Examples"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Demonstrative Examples&lt;/div&gt;&lt;div name="oc_352_Demonstrative Examples" id="oc_352_Demonstrative Examples" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;p class="subheading"&gt;
    Example:&lt;/p&gt;
    &lt;p&gt;This example in ASP.NET shows us a vulnerable configuration of forms name in
        a web.config file:&lt;/p&gt;&lt;div class="indent Bad_Code"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;div class="shadow"&gt;&lt;div class="CodeHead"&gt;&lt;div style="float:right; font-style:italic; font-size:10px; color:#98A9B7"&gt;(Bad Code)&lt;/div&gt;&lt;div class="optheading smaller"&gt;&lt;span style="font-weight:normal; font-style:italic"&gt;Example
Language: ASP.NET&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="top"&gt;&lt;div style="font-size:90%;"&gt;
&lt;configuration&gt; &lt;system.web&gt; &lt;httpcookies httponlycookies="?false?"&gt;&amp;lt;configuration&amp;gt;&lt;br&gt;
            &amp;lt;system.web&amp;gt;&lt;br&gt;
            &amp;lt;authentication mode=&amp;quot;Forms&amp;quot;&amp;gt;&lt;br&gt;
            &amp;lt;forms name=&amp;quot;.ASPXAUTH&amp;quot;&amp;gt;&lt;/httpcookies&gt;&lt;/system.web&gt;&lt;/configuration&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    &lt;p&gt;.ASPXAUTH is the default value for the name of the authentication cookie.&lt;/p&gt;
    &lt;p&gt;In case there is only one ASP.NET application running on the server the code is
        secure.&lt;/p&gt;
    &lt;p&gt;In case there is more ,user logging in to one of the applications can gain access
        to the other.&lt;/p&gt;
    &lt;p&gt;For example, when a user logges into some online service, he might inadvertently
        gain access to the administraion application of the service.&lt;/p&gt;
    &lt;p&gt;&amp;nbsp;&lt;/p&gt;
    &lt;div class="indent Attack"&gt;&lt;div id="ExampleCode" style="clear:both"&gt;&lt;/div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id="Potential Mitigations"&gt;&lt;div class="heading"&gt;&lt;span id="script"&gt; &lt;/span&gt;Potential Mitigations&lt;/div&gt;&lt;div name="oc_352_Potential Mitigations" id="oc_352_Potential Mitigations" class="expandblock"&gt;&lt;div class="detail"&gt;&lt;div id="Grouped"&gt;&lt;p&gt;
        Set the authentication cookie name to a unique value for each of your
        applications.&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;/html&gt;


&lt;html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&lt;/html&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_801</key><name>Information_Exposure_Through_an_Error_Message</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Exposed details about the application&amp;#8217;s environment, users, or associated data (for example, stack trace) could enable an attacker to find another flaw and help the attacker to mount an attack.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application generates an error message including raw exceptions, either by not being handled, by explicit returning of the object, or by configuration. Exception details may include sensitive information that could leak out of the exception to the users.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Any method that could cause an exception should be wrapped in a try-catch block that:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Explicitly handles expected exceptions.&lt;/li&gt;
&lt;li&gt;Includes a default solution to explicitly handle unexpected exceptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Configure a global handler to prevent unhandled errors from leaving the application.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Do not reveal exception details, instead always return a static message.

      &lt;/h4&gt;&lt;pre&gt;


try
{
// Database access or other potentially dangerous function
}
catch (SqlException ex)
{
LogException(ex);
Response.Write("Error occurred.");
}


      &lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Do not reveal exception details, instead always return a static message.

      &lt;/h4&gt;&lt;pre&gt;


try
{
// Database access or other potentially dangerous function
}
catch (SqlException ex)
{
LogException(ex);
Response.Write("Error occurred.");
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_773</key><name>Resource_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could open a backdoor enabling the attacker to connect directly to the application server, potentially leading to server takeover or other direct attacks.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application opens a network socket, for listening to incoming network connections. However, the application uses user input to define the socket, enabling an attacker to control it.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Don&amp;#8217;t allow a user to define parameters of network sockets.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;The application opens a network socket using a host name inputed by the user&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import socket
import sys

userInput = stdin.readline()

HOST = userInput 
PORT = 8888 # Arbitrary non-privileged port
	 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print 'Socket created'
	 
#Bind socket to local host and port
try:
    s.bind((HOST, PORT))
except socket.error as msg:
    print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
    sys.exit()
print 'Socket bind complete'&lt;/pre&gt;&lt;h4&gt;The application opens a hard-coded host name and does receive it from the user&lt;/h4&gt;&lt;pre&gt;import socket
import sys

HOST = ''   # Symbolic name, meaning all available interfaces
PORT = 8888 # Arbitrary non-privileged port
	 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print 'Socket created'
	 
#Bind socket to local host and port
try:
    s.bind((HOST, PORT))
except socket.error as msg:
    print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
    sys.exit()
print 'Socket bind complete'&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application opens a network socket using a port number inputed by the user&lt;/h4&gt;&lt;pre&gt;public class ResourceInjection {
	public static void main(String[] args) {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter port number: ");
		int portNumber = Integer.parseInt(userInputScanner.nextLine());
		try {
			ServerSocket serverSocket = new ServerSocket(portNumber);
		} catch (Exception e) {
			System.err.println("Caught Exception: " + e.getMessage());
		}

	}
}&lt;/pre&gt;&lt;h4&gt;The application opens a hard-coded port number according to the user input&lt;/h4&gt;&lt;pre&gt;public class ResourceInjectionFixed {
	public static void main(String[] args) {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter port name: ");
		String portName = userInputScanner.nextLine();
		int portNum;
		switch (portName) {
		case "ftps":
			portNum = 989;
			break;
		case "ftp":
			portNum = 20;
			break;
		case "smtp":
			portNum = 25;
			break;
		default:
			portNum = 80;
		}
		try {
			ServerSocket serverSocket = new ServerSocket(portNum);
		} catch (Exception e) {
			System.err.println("Caught Exception: " + e.getMessage());
		}
	}
}&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application opens a network socket using a port number inputed by the user
      &lt;/h4&gt;&lt;pre&gt;

class ResourceInjection
{
            public void foo(TextBox textBox1)
        {
                        long address = Convert.ToInt32(textBox1.Text);
            IPEndPoint endpoint = new IPEndPoint(address, port);
            Socket socket = new Socket(endpoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
            socket.Connect(endpoint);
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The application opens a hard-coded port number and does receive it from the user
      &lt;/h4&gt;&lt;pre&gt;

class ResourceInjection
{
            public void foo(TextBox textBox1, long address)
        {
            IPEndPoint endpoint = new IPEndPoint(address, 15551);
            Socket socket = new Socket(endpoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
            socket.Connect(endpoint);
        }
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_770</key><name>Connection_String_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could manipulate the application&amp;#8217;s connection string to its database or other server.Using simple tools and text editing, the attacker might be able do any of the following:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Damage application performance (by increasing the MIN POOL SIZE)&lt;/li&gt;
&lt;li&gt;Tamper with the network connection (for example, via TRUSTED CONNECTION)&lt;/li&gt;
&lt;li&gt;Direct the application to the attacker&amp;#8217;s bogus database&lt;/li&gt;
&lt;li&gt;Discover the password to the system account on the database (by a brute-force attack)&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;To communicate with its database or with another server (for example, Active Directory), the application dynamically constructs a connection string. This connection string includes concatenated user input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could be used to maliciously manipulate the connection string.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Ideally, avoid dynamically building connection strings. If it is necessary to dynamically build a connection string, try not to include user input. In any case use platform-provided utlities, such as .NET&amp;#8217;s SqlConnectionStringBuilder, or at least encode the validated input as appropriate for your platform.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;h4&gt;The application constructs a connection string using input from the user&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import cx_Oracle
print 'Insert your ID: '
userInput = stdin.readline()
connection = cx_Oracle.connect(userInput + '/password@99.999.9.99:PORT/SID')&lt;/pre&gt;&lt;h4&gt;The user inputed file number is turned to a string of that number before use&lt;/h4&gt;&lt;pre&gt;from sys import stdin
import cx_Oracle
print 'Insert your ID: '
userInput = stdin.readline()
connection = cx_Oracle.connect(str(int(userInput)) + '/password@99.999.9.99:PORT/SID')&lt;/pre&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application constructs a connection string using input from the user&lt;/h4&gt;&lt;pre&gt;public class ConnectionStringInjection {
	public static void main(String[] args) throws SQLException {
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter url name: ");
		String connURL = userInputScanner.nextLine();
		Connection con = DriverManager.getConnection(connURL, "username", "password");
	}
}&lt;/pre&gt;&lt;h4&gt;The user input is translated to a predefined connection string&lt;/h4&gt;&lt;pre&gt;public class ConnectionStringInjectionFixed {
	public static void main(String[] args) throws SQLException {
		HashMap&lt;String, String&gt; sanitize = new HashMap&lt;String, String&gt;();
		sanitize.put("DB_url_1", "DB_url_1");
		sanitize.put("DB_url_2", "DB_url_2");
		sanitize.put("DB_url_3", "DB_url_3");
		Scanner userInputScanner = new Scanner(System.in);
		System.out.print("\nEnter url name: ");
		String connURL = userInputScanner.nextLine();
		Connection con = DriverManager.getConnection(sanitize.get(connURL), "username", "password");
	}
}&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application constructs a connection string using input from the user
      &lt;/h4&gt;&lt;pre&gt;

 class ConnectionStringInjection
{
        static void foo(Textbox textbox1, SqlConnectionStringBuilder bldr)
        {
                bldr.UserID = textbox1.Text;
                myConnection = new SqlConnection(bldr.ToString());
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The user input is first checked for malicious characters before adding to the connection string
      &lt;/h4&gt;&lt;pre&gt;

 class ConnectionStringInjectionFixed
{
        static void foo(Textbox textbox, SqlConnectionStringBuilder bldr)
        {
                bldr.UserID = textbox.Text.Replace("'", "");
                myConnection = new SqlConnection(bldr.ToString());
        }
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_771</key><name>LDAP_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could arbitrarily engineer the application&amp;#8217;s LDAP queries. Depending on how the application is using LDAP, the attacker could potentially do any of the following:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Log in as another user&lt;/li&gt;
&lt;li&gt;Escalate privileges&lt;/li&gt;
&lt;li&gt;Steal information&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with an LDAP server, such as Active Directory, by sending a textual LDAP query or command. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain LDAP commands that would be interpreted as such by the LDAP server.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application uses the "user" field string from an HttpRequest to communicate with an LDAP server
      &lt;/h4&gt;&lt;pre&gt;

public class LDAPInjection
{
        public void foo(HttpRequest Request, DirectorySearcher searcher)
        {
                string userName = Request.QueryString["user"];
                searcher.Filter = "(&amp;(samAccountName=" + userName + "))";
        }
}



      &lt;/pre&gt;&lt;h4&gt;
Potentially hazardous characters in the "user" string are removed
      &lt;/h4&gt;&lt;pre&gt;

public class LDAPInjectionFixed
{
        public void foo(HttpRequest Request, DirectorySearcher searcher)
        {
                string userName = Request.QueryString["user"];
                userName = Regex.Replace(userName, "^\\d{3}-\\d{3}-\\d{4}$", "");
                searcher.Filter = "(&amp;(samAccountName=" + userName + "))";
        }
}





      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_775</key><name>SQL_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could directly access all of the system's data. Using simple tools and text editing, the attacker would be able to steal any sensitive information stored by the system (such as personal user details or credit cards), and possibly change or erase existing data.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application communicates with its database by sending a textual SQL query. The application creates the query by simply concatenating strings including the user's input. Since the user input is neither checked for data type validity nor subsequently sanitized, the input could contain SQL commands that would be interpreted as such by the database.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Instead of concatenating strings: a. Use secure database components such as stored procedures, parameterized queries, and object bindings (for commands and parameters). b. An even better solution is to use an ORM library, such as EntityFramework, Hibernate, or iBatis.&lt;/li&gt;
&lt;li&gt;Restrict access to database objects and functionality, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;The application creates an SQL query using string obtained from the user&lt;/h4&gt;&lt;pre&gt;public class SQL_Injection {
	public static void getUserId(Connection con) {
		System.out.println("enter user name");
		Scanner in = new Scanner(System.in);
		String user = in.nextLine();
		String query = "select user_id from User where user = " + user;
		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery(query);
	}
}&lt;/pre&gt;&lt;h4&gt;The string obtained from the user is checked for potentially malicious characters&lt;/h4&gt;&lt;pre&gt;public class SQL_Injection_Fixed {
	public static void getUserId(Connection con) {
		System.out.println("enter user name");
		Scanner in = new Scanner(System.in);
		String user = in.nextLine();
		String query = "select user_id from User where user = ?";
		PreparedStatement stmt = con.createStatement(query);
		stmt.setString(1, user);
		ResultSet rs = stmt.executeQuery(query);
	}
}&lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
The application creates an SQL query using string obtained from the user
      &lt;/h4&gt;&lt;pre&gt;public class SQLInjection
{
        public void foo(TextBox tbUserName, SqliteConnection connection)
        {	
                string user = tbUserName.Text;
                string sql = "insert into users(name) VALUES (user)"
                MySqlCommand cmd = new MySqlCommand(sql, connection);
                connection.Open();
                SqlDataReader reader = cmd.ExecuteReader();
        }
}&lt;/pre&gt;&lt;h4&gt;
The string obtained from the user is checked for potentially malicious characters
      &lt;/h4&gt;&lt;pre&gt;
class SqlInjectionFixed
{
        public void foo(TextBox tbUserName, SqliteConnection connection)
        {
                string user = tbUserName.Text;
                string sql = "insert into users(name) VALUES (@param1)";
                MySqlCommand cmd = new MySqlCommand(sql, connection);
                cmd.Parameters.AddWithValue(@param1, user);
                connection.Open();
                SqlDataReader reader = cmd.ExecuteReader();
        }
}&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>CRITICAL</severity><tag>checkmarx-high</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_812</key><name>HTTP_Response_Splitting</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;Arbitrarily change the application server&amp;rsquo;s response header to a victim&amp;rsquo;s HTTP request by manipulating headers&lt;/li&gt;
&lt;li&gt;Arbitrarily change the application server&amp;rsquo;s response body by injecting two consecutive line breaks, which may result in Cross-Site Scripting (XSS) attacks&lt;/li&gt;
&lt;li&gt;Cause cache poisoning, potentially controlling any site&amp;rsquo;s HTTP responses going through the same proxy as this application.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;Since user input is being used in an HTTP response header, an attacker could include NewLine characters to make the header look like multiple headers with engineered content, potentially making the response look like multiple responses (for example, by engineering duplicate content-length headers). This can cause an organizational proxy server to provide the second, engineered response to a victim&amp;#8217;s subsequent request; or, if the proxy server also performs response caching, the attacker can send an immediate subsequent request to another site, causing the proxy server to cache the engineered response as a response from this second site and to later serve the response to other users.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Validate all input, regardless of source (including cookies). Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. Check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Additionally, URL-encode all user input before including it in the response header.&lt;/li&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
User input is being used in an HTTP response header, enabling an attacker to add a newline character and multiple headers
      &lt;/h4&gt;&lt;pre&gt;

public class HTTPResponseSplitting
{
        public void foo(HttpResponse Response)
        {
                String author3 = Console.ReadLine();
                Response.AppendHeader("Author: " + author3);
        }
}



      &lt;/pre&gt;&lt;h4&gt;
The user input is examined to contain and newline character and the input is also URL encoded
      &lt;/h4&gt;&lt;pre&gt;

public class HTTPResponseSplittingFixed
{
        public void foo(HttpResponse Response)
        {
                String author3 = Console.ReadLine();
                if (author3.Contains('\n') == false)
                {
                        author3 = HttpUtility.UrlEncode(author3);
                        Response.AppendHeader("Author: " + author3);
                }
        }
}



      &lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_800</key><name>Open_Redirect</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could use social engineering to get a victim to click a link to the application, so that the user will be immediately redirected to another, arbitrary site. Users may think that they are still in the original application site. The second site may be offensive, contain malware, or, most commonly, be used for phishing.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application redirects the user&amp;#8217;s browser to a URL provided in a user request, without warning users that they are being redirected outside the site. An attacker could use social engineering to get a victim to click a link to the application with a parameter defining another site to which the application will redirect the user&amp;#8217;s browser, and the user may not be aware of the redirection.&lt;/div&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ol&gt;
&lt;li&gt;Ideally, do not allow arbitrary URLs for redirection. Instead, create a server-side mapping from user-provided parameter values to legitimate URLs.&lt;/li&gt;
&lt;li&gt;If it is necessary to allow arbitrary URLs:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;For URLs inside the application site, first filter and encode the user-provided parameter, and then use it as a relative URL by prefixing it with the application site domain.&lt;/li&gt;
&lt;li&gt;For URLs outside the application (if necessary), use an intermediate disclaimer page to provide users with a clear warning that they are leaving your site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ol&gt;      
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Source Code Examples&lt;/h2&gt;&lt;h3&gt;Java&lt;/h3&gt;&lt;h4&gt;
Avoid redirecting to arbitrary URLs, instead map the parameter to a list of static URLs.

      &lt;/h4&gt;&lt;pre&gt;


Response.Redirect(getUrlById(targetUrlId));


      &lt;/pre&gt;&lt;h3&gt;CSharp&lt;/h3&gt;&lt;h4&gt;
Avoid redirecting to arbitrary URLs, instead map the parameter to a list of static URLs.

      &lt;/h4&gt;&lt;pre&gt;


Response.Redirect(getUrlById(targetUrlId));



      &lt;/pre&gt;&lt;h3&gt;Apex&lt;/h3&gt;&lt;h4&gt;&lt;/h4&gt;&lt;pre&gt;String redirsite = ApexPages.currentPage().getParameters().get('redirlocation');
PageReference pageRef;
if(redirsite != null)
{
    pageRef = new PageReference(redirsite);
    pageRef.setRedirect(true);
    return pageRef;
}
pageRef = ApexPages.currentPage();
return pageRef;&lt;/pre&gt;&lt;h4&gt;&lt;/h4&gt;&lt;pre&gt;String redirsite = ApexPages.currentPage().getParameters().get('redirlocation');
PageReference pageRef;
if(redirsite != null)
{
    pageRef = new PageReference('http://domain.com/page.jsp?' + redirsite);
    pageRef.setRedirect(true);
    return pageRef;
}
pageRef = ApexPages.currentPage();
return pageRef;&lt;/pre&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_797</key><name>Session_Poisoning</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;div class="definitions" id="TableWithRules"&gt;&lt;table border="0" cellspacing="0" cellpadding="0" width="100%"&gt;&lt;tbody&gt;&lt;tr class="header"&gt;&lt;th valign="top" width="100%" colspan="2"&gt;&lt;div align="center"&gt;&lt;span style="font-weight:bold; "&gt;Session Poisoning&lt;/span&gt;&lt;/div&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;CWE ID&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;10012&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;Session poisoning occurs when the user is able to modify session variables.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Likelihood of Exploit&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;&lt;p&gt;Low&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Common Consequences&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;&lt;p&gt;Malicious user can modify arbitrary session variables.&lt;/p&gt;&lt;p&gt;&lt;p&gt;&lt;p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Potential Mitigations&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;&lt;p&gt;Do not let user input influence session variables.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;div style="height:10px; width:100%;"&gt;&lt;/div&gt;&lt;tr&gt;&lt;td valign="top" nowrap="nowrap"&gt;&lt;b&gt;Applicable Platforms&lt;/b&gt;&lt;/td&gt;&lt;td valign="top" width="100%"&gt;&lt;p&gt;All&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div align="right" style="padding-top:5px; padding-bottom:5px; clear:right" class="noprint"&gt;&lt;/div&gt;
&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MINOR</severity><tag>checkmarx-low</tag><type>VULNERABILITY</type></rule><rule><key>checkmarx_3517</key><name>Stored_Command_Injection</name><description>&lt;div style="display:none"&gt;![CDATA[&lt;/div&gt;&lt;h2&gt;Risk&lt;/h2&gt;&lt;h4&gt;What might happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;An attacker could run arbitrary system-level OS commands on the application server host. Depending on the application&amp;rsquo;s OS permissions, these could include:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;File actions (read / create / modify / delete)&lt;/li&gt;
&lt;li&gt;Open a network connection to the attacker&amp;rsquo;s server&lt;/li&gt;
&lt;li&gt;Start and stop system services&lt;/li&gt;
&lt;li&gt;Complete server takeover&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Cause&lt;/h2&gt;&lt;h4&gt;How does it happen&lt;/h4&gt;&lt;p&gt;&lt;div&gt;The application runs an OS system-level command to complete it's task, rather than via application code. The command includes untrusted data, that may be controllable by an attacker. This untrusted string may contain malicious, system-level commands engineered by an attacker, which would be executed as though the attacker were running commands directly on the application server.&lt;/div&gt;
&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;General Recommendations&lt;/h2&gt;&lt;h4&gt;How to avoid it&lt;/h4&gt;&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Refactor the code to avoid any direct shell command execution. Instead, use platform provided APIs or library calls.&lt;/li&gt;
&lt;li&gt;If it is impossible to remove the command execution, execute only static commands that do not include dynamic, user-controlled data.&lt;/li&gt;
&lt;li&gt;Validate all input, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified format, rather than rejecting bad patterns (blacklist). Parameters should be limited to an allowed character set, and non-validated input should be dropped. In addition to characters, check for:&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Data type&lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Range&lt;/li&gt;
&lt;li&gt;Format&lt;/li&gt;
&lt;li&gt;Expected values&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;In order to minimize damage as a measure of defense in depth, configure the application to run using a restricted user account that has no unnecessary OS privileges.&lt;/li&gt;
&lt;li&gt;If possible, isolate all OS commands to use a separate, dedicated user account that has minimal privileges only for the specific commands and files used by the application, according to the Principle of Least Privilege.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;div style="display:none"&gt;]]&lt;/div&gt;</description><severity>MAJOR</severity><tag>checkmarx-medium</tag><type>VULNERABILITY</type></rule></rules>